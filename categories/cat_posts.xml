<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GoldenGrape's Blog (关于文章 posts)</title><link>https://goldengrape.github.io/</link><description></description><atom:link href="https://goldengrape.github.io/categories/cat_posts.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2019 &lt;a href="mailto:https://twitter.com/goldengrape"&gt;Golden Grape&lt;/a&gt; </copyright><lastBuildDate>Sun, 01 Sep 2019 05:23:07 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>以电视剧的方式工业化生产MOOC</title><link>https://goldengrape.github.io/posts/bulabula/Industrial_production_of_MOOC_as_TV_series/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;在2013年的时候, 我写过《以电视剧的方式工业化生产MOOC》, 提出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网络课程可以『电视剧化』的。
完！全！可！以！雇！佣！演！员！ 来！表！演！讲！课！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;昨天发现一个Socratica做的&lt;a href="https://www.youtube.com/playlist?list=PLi01XoE8jYoi3SgnnGorR_XOW3IcK-TP6"&gt;抽象代数课程&lt;/a&gt;, 课程浅显易懂, 而且老师非常漂亮, 甚至有一点魅惑, 一口气就看了20多节课, 把以前在看&lt;a href="http://www.xuetangx.com/courses/course-v1:TsinghuaX+60240013X+sp/about"&gt;《组合数学》&lt;/a&gt;时留下的群论补充了不少. &lt;/p&gt;
&lt;p&gt;&lt;img alt="21-Simple Groups - Abstract Algebra-0001" src="https://i.loli.net/2019/09/01/oaVRWPjQp4tAkbf.png"&gt;&lt;/p&gt;
&lt;p&gt;今天经&lt;a href="https://twitter.com/goophile/status/1168011061825425409"&gt;@goophile&lt;/a&gt; 提示, 原来讲课老师是&lt;a href="https://en.wikipedia.org/wiki/Liliana_Castro"&gt;Liliana Castro&lt;/a&gt; 一位巴西女演员, 演过不少电影和电视剧. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Liliana_Castro01.jpg/640px-Liliana_Castro01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;真是表演与公开课结合的典范.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;hr&gt;
&lt;p&gt;以下是2013年写的blog&lt;/p&gt;
&lt;p&gt;MOOC有一个好处，就是非实时交流，很多人把这个当成弊端，但其实非实时交流可以使课程制作过程工业化，也就是将老师从一个人拆分成：知识顾问、编剧、导演、演员、配音、配乐、多媒体制作等很多个互相独立的工种。
在此之前课堂上必须由一个人完成，于是会有很多人学问很好但是讲不出来；会讲，但是形象不佳；形象尚可但情绪不到位；情绪有了，却口头语、小动作多；课堂表演不错PPT配色则一塌糊涂；干脆不用PPT了板书的字却拿不出手……所以出一个讲课很好的老师很难。&lt;/p&gt;
&lt;p&gt;网络课程可以『电视剧化』的。
完！全！可！以！雇！佣！演！员！ 来！表！演！讲！课！
《生活大爆炸》这个美剧表明，理论物理学博士是可以由一个不懂物理的演员演出来的。
http://tv.sohu.com/s2013/4402/s383695385/
http://tv.sohu.com/s2013/4402/s383695385/
TBBT表明人们可以相信一个演员演出来的理论物理博士是一个理论物理博士。&lt;/p&gt;
&lt;p&gt;同理，讲课也是。
去表演系请专业演员，把他/她按照学术明星那样包装，幕后由一批顶尖的专业教授为他来写讲稿、教案，由编剧组织情节，甚至还应该埋下一些悬念。讲课的时候用分镜头，每一句台词在导演的监督下，情绪饱满的演很多遍，不断的喊cut，直到精确的把知识通过情绪传达给观众以后才罢休。&lt;/p&gt;
&lt;p&gt;网络课程制作起来并不困难，要点是：
&lt;em&gt; 每15分钟一个视频，
&lt;/em&gt; 只讲一个知识点，
&lt;em&gt; 不要用PPT!!! 最好是写板书，
&lt;/em&gt; 要有真人的活动&lt;/p&gt;
&lt;p&gt;家用摄像机在办公室录制都可以，很多coursera、edx上的课程都是在教授的办公室里录制的，直接在课堂上录制也可以，但要注意声音应该单独用话筒采集。
由于老师的站位一般活动范围不大，甚至用单反录制效果还会更好。(2019年补充, 使用DJI的OSMO mobile 3, 接手机拍摄, 可以自动跟踪, 效果不错.)&lt;/p&gt;
&lt;p&gt;这是几门老师表演不错的课程：&lt;/p&gt;
&lt;p&gt;model thinking：
（人物活动与板书/ppt之间的关系）
生物学导论：
（情绪！讲课是要有激情的）
台湾大学的几门课也还不错
https://www.coursera.org/taiwan&lt;/p&gt;
&lt;p&gt;沃顿的《市场导论》：https://www.coursera.org/course/marketing
已经可以看出是团队制作的样子了：讲产品的时候就到商场里面去取外景；摄像的用光、虚化之类是专业人士所为；老师从头到尾讲话一个错误和停顿都没有，大概是反复录制剪辑过……确实是市场部的人做事的风格。&lt;/p&gt;
&lt;p&gt;以电视剧的方式制作出来的课程，也可以按照电视剧的方式来定价、出售和盈利，前后也可以插播广告，捧出来的明星也可以代言产品，没有长出锥子脸的演员也不必自怨自艾。&lt;/p&gt;
&lt;p&gt;康庄大道&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/Industrial_production_of_MOOC_as_TV_series/</guid><pubDate>Sun, 01 Sep 2019 04:00:00 GMT</pubDate></item><item><title>如何快速进入工作学习状态</title><link>https://goldengrape.github.io/posts/bulabula/How_to_get_into_work_or_study_quickly/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;h3&gt;工作日前的准备:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;前一天晚上睡前确保在微信“发现页”中已经关闭了朋友圈. &lt;/li&gt;
&lt;li&gt;前一天晚上或之前, 订阅好“无忧公主的数学时间”, 微信号是 wuyoushuxue .&lt;/li&gt;
&lt;li&gt;前一天晚上或之前, 将“无忧公主的数学时间” “添加到桌面”.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;工作日当日早上:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;工作日当天早起, 不要打开微信, 先点击桌面上的“无忧公主的数学时间”快捷方式.&lt;/li&gt;
&lt;li&gt;看一道数学题, 如果一眼就能看出答案, 另外找一道. &lt;/li&gt;
&lt;li&gt;开始日常的洗漱、吃早饭、通勤……, 开始工作.&lt;/li&gt;
&lt;li&gt;注意, 通勤时不要看朋友圈以及其他社交网络, 不要看新闻, 可以通过“讯飞有声”听电子书.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;工作开始后:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先进行输出工作, 至少一个番茄时间段(25分钟). 所谓输出就是自己写东西, 比如写代码、写email、写文章、做ppt等.&lt;/li&gt;
&lt;li&gt;休息时可以拿出一张草稿纸, 试着解决无忧公主出的数学题. &lt;/li&gt;
&lt;li&gt;第一个输出时间段之后才可以摸鱼.&lt;/li&gt;
&lt;li&gt;如果刷微信朋友圈, 可以临时开启“发现页”中的朋友圈, 看完后及时关闭.&lt;/li&gt;
&lt;li&gt;刷其他社交网络类似, 尽快及时关闭. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;以上流程的关键是:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在早起后第一时间, 先往脑子里装一道数学题. 并使之保持悬而未决的状态.&lt;/li&gt;
&lt;li&gt;第一组输出之后才开始允许输入. &lt;/li&gt;
&lt;li&gt;为浏览新闻、社交网络造成一定的困难.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上流程对我自己有一定的作用.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h2&gt;可能的原理&lt;/h2&gt;
&lt;p&gt;工作记忆内存一般只有4个扩展槽, 早起装一道数学题, 并且暂时不准使用草稿纸, 导致这道数学题一直占据一个工作内存槽. &lt;/p&gt;
&lt;p&gt;在保持思考数学题的时候, 更容易以客观视角看待问题, 不容易被情绪左右. 而新闻与社交网络中的信息主要以强烈情绪争夺注意力. 因此在第一时间植入数学题后, 能够增强一点免疫. 也就是说, 看到刷屏标题后第一反应不是好奇, 而是“关我屁事”. &lt;/p&gt;
&lt;p&gt;如果要加强效果, 可以将手机放在包里, 不取出, 不放在手边, 反正有信息也会响, 或者手环会提醒.&lt;/p&gt;
&lt;p&gt;如果要更增强效果, 在第一个工作输出时, 使用笔和纸, 不打开电脑.&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/How_to_get_into_work_or_study_quickly/</guid><pubDate>Sat, 17 Aug 2019 04:00:00 GMT</pubDate></item><item><title>金葡流简报术</title><link>https://goldengrape.github.io/posts/bulabula/goldengrape_style_ppt/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;h3&gt;简报两大困难&lt;/h3&gt;
&lt;p&gt;根据我多年来做简报，包括但不限于PPT/ Keynote的经验，做简报有两大困难：&lt;strong&gt;一不做二不休&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所谓“一不做”，是不开始做，严重的拖延症发作，几张PPT可能要做上一个星期。只要打开电脑就不可避免会被其他的网站所影响，即使在查阅与简报相关的资料，也可能在维基百科甚至是在pubmed中迷失方向，看了一大堆不相干的文件，学会了许多不相干的知识，但PPT还是没有动。&lt;/p&gt;
&lt;p&gt;另一大困难是“二不休”，可能直到deadline绕颈，被逼不得不动手以后，又在PPT中塞入了太多的内容，写下了太多的文字，加入了太多的动画，在真正演讲的时候排练不足，时间控制不好，讲着讲着发觉时间不够用了，于是不断的“过、过、下一张、下一张”，之前的辛苦制作，给浪费了许多，还给人留下了准备仓促的坏印象。&lt;/p&gt;
&lt;h3&gt;金葡流简报术&lt;/h3&gt;
&lt;p&gt;综上，我根据自己平时的工作特点，开发了一种做简报的新流程，被网友&lt;a href="https://twitter.com/octw"&gt;@octw&lt;/a&gt; 赐名为“金葡流简报术”。&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;这个简报术很容易，分为以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用笔和纸先写下演讲时要说的讲稿，&lt;/li&gt;
&lt;li&gt;用语音输入的软件将写好的讲稿输入电脑，分段粘贴进幻灯片的备注中，&lt;/li&gt;
&lt;li&gt;根据每页的讲稿，来选择图片图表，或书写文字，&lt;/li&gt;
&lt;li&gt;其中，如果是书写文字，推荐使用毛笔来写。写完后用Adobe Capture转换成svg，再转换成PPT或者Keynote中的“形状”。&lt;/li&gt;
&lt;li&gt;​然后是利用自己写好的程序，将带有备注的PPT生成由TTS转换语音后的视频，然后自己看看，再作少许修改、排练。也可以简单使用朗读软件，将讲稿文本朗读出来，记录个时间。甚至可以自己去充当朗读软件，只要对着讲稿念出来，进行幻灯片录制即可。​&lt;/li&gt;
&lt;li&gt;录好的语音幻灯可以导出成视频，既可以存档又可以传到网上分享，还可以给听众或学生作为课后复习&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个简报术的特点就是&lt;strong&gt;慢&lt;/strong&gt;，&lt;strong&gt;目的也是慢&lt;/strong&gt;，通过缓慢的过程是进入使自己进入工作流、心流的状态。&lt;/p&gt;
&lt;h3&gt;免拖延&lt;/h3&gt;
&lt;p&gt;在写讲稿的时候最好选择一个安静不受干扰的环境，比如图书馆，给自己留出一定的工作时间，比如上一个25分钟的倒计时，还可以给自己准备一点小小的奖励，比如一块巧克力，但只能在连续工作25分钟以后才可以吃一小块，&lt;/p&gt;
&lt;p&gt;最后也是最重要的准备，将电脑和手机放到够不着的地方，比如图书馆的储物柜里锁上，连续工作25分钟以后才能去查看一下微信和邮件之类。&lt;/p&gt;
&lt;p&gt;这些都是避免被干扰避免触发拖延行为的好方法，更详细的步骤，请参考coursera上面的一门课叫做&lt;a href="https://www.coursera.org/learn/learning-how-to-learn"&gt;learning how to learn&lt;/a&gt;，学习如何学习。其中关于拖延症的治疗讲得很好，我拖延了几个星期以后学完了，受益匪浅。&lt;/p&gt;
&lt;h3&gt;写作文&lt;/h3&gt;
&lt;p&gt;撰写演讲讲稿的过程，其实我们自己已经受了很多年的训练了，就是&lt;strong&gt;写作文&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一切均按照写作文的流程来，首先给自己出一个作文题，根据简报内容，根据简报要讲的目的写出一个作文题，然后估计出字数。&lt;/p&gt;
&lt;p&gt;常见的演讲学术会议发言通常是5到10分钟，商业演讲、小讲座可能是15到20分钟，一堂课一般是30到40分钟。通过时间来估计字数，播音员的语速可能会达到每分钟300字以上。但是作为演讲，是要让台下能够听清楚，并理解。因此每分钟最好控制在150到200字。&lt;/p&gt;
&lt;p&gt;那么一个10分钟的小演讲小讲座大约是1500字到2000字，高考作文是要求800字以上，写作时间一般至少留出40分钟，于是你大约需要工作1到2个小时可以写完讲稿。&lt;/p&gt;
&lt;p&gt;写讲稿的时候，如果有什么需要查询的细节内容，可以先画出空格，空着。等完全写完了之后再去打开电脑查找，很多人常年不写字了，可能提笔忘字，正好借此机会多多练习写字，龙飞凤舞即可，是供自己阅读的草稿，不必太工整。&lt;/p&gt;
&lt;p&gt;一旦开始动笔写，恐怕自己会很惊讶于自己的速度。因为通常要准备的简报都是自己熟悉的东西。之前的拖延其实也常常在心中想着草稿，只是没有将其记录下来，所以一旦动笔开始，就写得飞快。&lt;/p&gt;
&lt;p&gt;对了，在行云流水写的时候要有一支好写的笔，就给钢笔灌好墨水或者使用舒服的自动铅笔之类。&lt;/p&gt;
&lt;p&gt;手写讲稿，令我对演讲内容非常熟悉，自己手写的要比输入的印象更深刻，不大可能出现讲着讲着忘词或者卡壳的情况，手写的速度大约是每分钟20字，演讲时说话的速度是每分钟200字，有着10倍的差距，因此我有充足的时间来组织语言。更因为手写慢，所以我这样懒散的人，必定尽量言简意赅。&lt;/p&gt;
&lt;p&gt;用纸和笔还有一大好处是，要增加一倍的显示面积，只需要再添加一张纸就好了。我可以随时调用出之前写的部分或者提纲，也可以随手圈出一段，画个箭头指向另一处。如果临时想到什么，比如所需插图的样子，或者示意图的画法就可以直接在纸上潦草画出讲稿。&lt;/p&gt;
&lt;p&gt;写完之后我的工作就算完成一大半了，有一份手写稿，甚至不必做PPT，我也应该可以在现场写板书的，要知道写板书才是讲课最高境界，PPT什么的都是下等。&lt;/p&gt;
&lt;h3&gt;后处理&lt;/h3&gt;
&lt;p&gt;将手写稿变成电子版，理论上可以用OCR软件，但实际用起来效果并不好，倒是用语音输入软件，念一遍，又快又好。有些过于书面的表达或者容易引起听觉错误的表达方式，在语音输入的时候也比较容易发现。&lt;/p&gt;
&lt;p&gt;录入完成后又是语文课的基本功：分段摘出重点作为每一张幻灯片的展示内容。尽量避免在幻灯片上留下一堆文字，其实留下太多文字是不自信的表现，幻灯片上的大段文字往往是给自己照着念做准备的。现在有了手写稿，应当有充分的信心，所以尽量少写文字。&lt;/p&gt;
&lt;p&gt;能够用图片表达的搜索出图片，需要图表的放入图表，关键数据怕观众听不清才可以打字的方式写出来，最后多多少少还是会有些标题什么的，我建议找比手写更慢的方式：用毛笔来写。&lt;/p&gt;
&lt;p&gt;比起钢笔每分钟20字的速度，我估计毛笔还要再慢一个数量级，每分钟两个字吧，这是最具有个性化的艺术字了，孙过庭说过“书则一字可见其心”。&lt;/p&gt;
&lt;p&gt;​毛笔字可以加工成幻灯片中的“形状”，我&lt;a href="https://goldengrape.github.io/posts/bulabula/import_calligraphy_to_keynote_as_shape"&gt;另外写过教程&lt;/a&gt;，不再详述。转换成形状以后可以有很多华丽的处理。现代的平面展示媒介是投影仪，而不再是宣纸，书法当然也可以与时俱进，&lt;/p&gt;
&lt;p&gt;一切都完成后，可以再把文字转换成语音，这我也做好了&lt;a href="https://goldengrape.github.io/posts/bulabula/fullautomatic_dubbing_slide"&gt;现成的程序&lt;/a&gt;，转好后自己可以听听效果。修改完成后导出成视频可以供大家分享，&lt;/p&gt;
&lt;p&gt;以上就是金葡流简报术的基本方法，驽马十驾功在不舍，输出慢一点完成更快。&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/goldengrape_style_ppt/</guid><pubDate>Tue, 13 Aug 2019 10:00:00 GMT</pubDate></item><item><title>成人自学的困难</title><link>https://goldengrape.github.io/posts/bulabula/adult_self_study/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;昨天翻译完了&lt;a href="https://goldengrape.github.io/posts/python/15_pages_python_tutorial_translated/"&gt;15页的python教程&lt;/a&gt;，想就成人自学再说说。&lt;/p&gt;
&lt;h2&gt;现象&lt;/h2&gt;
&lt;p&gt;python上手应该很容易，如果有老师在身边督促指导，就用这15页的教程，恐怕快则一下午，慢则一周就可以自己写一些简单的应用了。&lt;/p&gt;
&lt;p&gt;但学python真的花费了我很长很长时间，我发现我从2003年就开始学习python，一直学到2017年才算学会了基础（因此万幸躲过了python 2）。用时14年，而不是7天。&lt;/p&gt;
&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;究其原因，我觉得是因为&lt;strong&gt;放弃太容易&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;成年人有稳定的收入，有常规的工作、生活。要维持这些，以前学会的东西已经够用了。学习新东西在短期内并不会对生活造成什么太大改善，如果放弃学习，短期内也不会产生什么不良后果。&lt;/p&gt;
&lt;p&gt;相比起来学生时代就非常不同，别说放弃一门课，就是一门课的成绩稍微下降一些，也会寝食难安。如果挂科了，简直是天塌下来一半。想起来我大一的时候每周40节课上满，必修加选修上了13门课。（没错，我翘了一门必修课在同一时间选了另一门选修课）。&lt;/p&gt;
&lt;p&gt;理论上，要把学习压力重新加在自己身上，成人也可以快速学习，大家都是学霸出身，没什么理由学不会。但实际上，虚拟的压力并不是压力，没有实质性的威胁算不上威胁。&lt;/p&gt;
&lt;h2&gt;解决方案：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;尽量平滑学习曲线：放弃的理由常常是一丝一毫的困难，一旦放下就很难再捡起来，或者很久以后才能捡起来。那么，就尽量不要制造额外的一丝一毫的困难吧，比如：&lt;/li&gt;
&lt;li&gt;用1500页的书去学python。天呐，1500页的小说我都要犹豫是不是去看，何况1500的教科书。&lt;a href="https://github.com/goldengrape/PartIA-Computing-Michaelmas-zh-CN"&gt;15页的python教程&lt;/a&gt;已经都觉得长了。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在本地电脑上用pip安装python库。类似可以推广到在本地电脑上安装开发环境学习某种语言。那绝对是可怕的拦路虎。&lt;a href="https://repl.it"&gt;REPL.it&lt;/a&gt;上已经做好了几乎所有语言，打开网页用就行了。或者用各种&lt;a href="https://goldengrape.github.io/posts/python/na-xie-zai-xian-de-jupyter/"&gt;在线的jupyter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;享受过程(process)，而不是追求结果(product)。这是从coursera课程&lt;a href="https://www.coursera.org/learn/learning-how-to-learn/home/welcome"&gt;“学习如何学习”&lt;/a&gt;上学来的一招。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;这一部分的视频&lt;a href="https://www.youtube.com/watch?v=gCKcqLVGnSg&amp;amp;list=PLievC1UeaSOD3EBaJaHstTKIXS51Sfjwo&amp;amp;index=20&amp;amp;t=0s"&gt;在此&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;就是说把学习作为日常消遣的一个选项，既然都是kill time，那么看电视剧和看公开课也是可能互换的。&lt;a href="https://www.coursera.org/learn/shiji"&gt;《史记》&lt;/a&gt;、&lt;a href="http://www.xuetangx.com/courses/course-v1:TsinghuaX+00612642X+sp/about"&gt;《资治通鉴》&lt;/a&gt;里，随便翻出个故事，不比现在电视剧里的情节狗血多了。&lt;ul&gt;
&lt;li&gt;市场环境不好，公司里能干的员工一个接一个辞职。有一天一个基层程序员刚跑，CFO就去追了，追回来以后还让CEO给提升到CTO的职位。CEO看了看简历，该程序员原来在竞争对手那边一直就是个小PM，没做过什么大项目，还曾经被拖库攻击过。但CFO坚持。现在如果你是CEO，该怎么办？剧情狗血吧，哪有这种公司会发生这种事情呢。这个故事又叫做“萧何月下追韩信”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;既然是享受过程，就不要问自己学了多少，学到什么水平了，练习慢慢做，经常做就可以。三天打鱼两天晒网是最佳，不要给自己太大压力，也不要有太大幻想。“无挂碍故，远离颠倒梦想，究竟涅槃”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，这是前一段练字的结果，写到开心就好。
&lt;img alt="未命名" src="https://i.loli.net/2019/08/03/AuevRE7mDhYxKaj.png"&gt;&lt;/p&gt;
&lt;p&gt;补充一下：&lt;/p&gt;
&lt;p&gt;享受学习的过程本身，享受学到的知识和技能，这种“自由而无用”的事情，只有成人才能体会到乐趣。儿童是很难从练琴、练字、练球、练拳……体会到乐趣的。能够把重复行为作为冥想过程来享受的，只能是衣食无忧的成人。&lt;/p&gt;
&lt;h2&gt;误解&lt;/h2&gt;
&lt;p&gt;贴出本文后，&lt;a href="https://twitter.com/eMuyi/status/1157559988799209472"&gt;eMuyi认为&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有明确 motivation 的学习就是很低效。如果有一个明确目标，比如建立个人网站，学编程就很简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有明确需求驱动的学习过程确实是高效的，但是这也是最容易被放弃的。对于成年人的学习，最容易质疑的就是需求本身。比如“建立个人网站”，是自己学成全栈，还是直接找个静态网站生成工具然后写写markdown？甚至找个外包花钱做一个。这样一比较，得出的结论很可能是“我这岁数再学习______实属浪费时间”。&lt;/p&gt;
&lt;p&gt;很可能在一定经济实力之后，各种明确的目标都是可以被购买的。而自身的时间价值如果又很高，两者比较就容易选择外包购买而不是自己学习。这和年轻学生又不一样，当学生的时候外包买不起，只好自己学。&lt;/p&gt;
&lt;p&gt;欲速则不达。&lt;/p&gt;
&lt;p&gt;所以前面我给出的解决方案中，就是要&lt;strong&gt;放弃&lt;/strong&gt;明确的学习目的，转而体会学习过程中的乐趣。这种乐趣才是持久的，可记忆的。&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/adult_self_study/</guid><pubDate>Sat, 03 Aug 2019 04:01:00 GMT</pubDate></item><item><title>公理设计笔记（1）</title><link>https://goldengrape.github.io/posts/bulabula/axiomatic_design_note_1/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;一个夏日的上午，我在图书馆里闲逛（据@cxqn 说这是有闲阶级才能做的事情），偶遇一本&lt;a href="https://book.douban.com/subject/1238993/"&gt;《公理设计》&lt;/a&gt;，看书名觉得好奇于是拿出来翻了翻，觉得内容不错。网上还可以找到一篇文献&lt;a href="http://blog.sciencenet.cn/home.php?mod=attachment&amp;amp;id=40989"&gt;《公理设计理论及其应用》&lt;/a&gt; 做了一些基本介绍。&lt;/p&gt;
&lt;p&gt;但看起来这是一门课了，所以估计会有公开课来讲解。于是上网搜了一下，还真是找到了&lt;a href="https://www.youtube.com/playlist?list=PLMDNnNJK3B1UlhdIfsFaezkHWbofX7Blj"&gt;MFE 594 An Introduction to Axiomatic Design&lt;/a&gt;，有4节课，大约一共4个多小时，花了两天看完，再回来翻翻书，有一些收获，决定写一点笔记。&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;首先从1862年11月13日的&lt;a href="https://www.history.com/this-day-in-history/u-s-s-monitor-battles-c-s-s-virginia"&gt;一场海战&lt;/a&gt;讲起。这场海战“标志着蒸汽动力铁甲舰新时代的到来。”&lt;/p&gt;
&lt;p&gt;南方C.S.S的Virginia号战舰，体型庞大，非常凶悍。已经击沉了两艘联邦军舰。北方U.S.S派出了Monitor号，一艘小得多的军舰。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.battlefields.org/sites/default/files/styles/gallery_item/public/thumbnails/image/comparison-of-the-css_0.jpg"&gt;
图片来自https://www.battlefields.org/learn/galleries/battle-hampton-roads&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&lt;/th&gt;
&lt;th align="left"&gt;USS Monitor&lt;/th&gt;
&lt;th align="left"&gt;CSS Virginia&lt;/th&gt;
&lt;th align="left"&gt;V : M&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;长度&lt;/td&gt;
&lt;td align="left"&gt;173.00ft&lt;/td&gt;
&lt;td align="left"&gt;262.75 ft&lt;/td&gt;
&lt;td align="left"&gt;1.52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;宽度&lt;/td&gt;
&lt;td align="left"&gt;41.33 ft&lt;/td&gt;
&lt;td align="left"&gt;51.16 ft&lt;/td&gt;
&lt;td align="left"&gt;1.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;排水量&lt;/td&gt;
&lt;td align="left"&gt;987 tons&lt;/td&gt;
&lt;td align="left"&gt;3,200 tons&lt;/td&gt;
&lt;td align="left"&gt;3.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;船员&lt;/td&gt;
&lt;td align="left"&gt;52&lt;/td&gt;
&lt;td align="left"&gt;350&lt;/td&gt;
&lt;td align="left"&gt;6.73&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;火炮&lt;/td&gt;
&lt;td align="left"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;12&lt;/td&gt;
&lt;td align="left"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这个比例看起来就是大雄vs胖虎之战。&lt;/p&gt;
&lt;p&gt;CSS Virginia的特点除了大，还有就是都是固定炮塔，两侧和首尾有很多门炮。而USS Monitor有一个可以旋转的炮台。&lt;/p&gt;
&lt;p&gt;一条战舰需要满足两个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调整航行方向&lt;/li&gt;
&lt;li&gt;调整炮击方向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于CSS Virginia，这两个功能需求是“耦合”couple 的，要改变炮击方向，就需要将船只转向。而对于USS Monitor，这两个功能需求则是“解耦合”decouple 的，航行方向与炮击方向无关，炮击方向可以独立调整。&lt;/p&gt;
&lt;p&gt;于是Monitor一直尽量守在Virginia的射击死角攻击，而Virginia则必须不断绕开，于是就不断绕圈。这两条船打了4个小时，Virginia撤退了。&lt;/p&gt;
&lt;p&gt;这是视频公开课上老师讲的一个有趣的例子。老师在课上讲解的时候说Virginia被Monitor给neutralize了，所谓&lt;a href="https://www.vocabulary.com/dictionary/neutralize"&gt;neutralize&lt;/a&gt;，军事上解释为 make incapable of military action，丧失军事能力。但按照history.com的记录，Virginia只是撤退了，毕竟Monitor只有两门炮，而Virginia还有很厚的铁甲。但大雄把胖虎打到先撤退跑了，如果再来一艘结果就不一定了。&lt;/p&gt;
&lt;p&gt;可以引出设计公理的第一条：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;满足功能需求（Functional Requirements, FRs)的参数设计（Design Parameter, DPs) 应当要解耦合（decouple）&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</description><category>公理设计</category><guid>https://goldengrape.github.io/posts/bulabula/axiomatic_design_note_1/</guid><pubDate>Wed, 17 Jul 2019 10:00:00 GMT</pubDate></item><item><title>有意义的批评是针对可变量的</title><link>https://goldengrape.github.io/posts/bulabula/Meaningful-criticism-is-for-variables/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;人有很多属性，&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有些是可变的，是变量，比如努力的程度、认真的程度，对待事情的态度……&lt;/li&gt;
&lt;li&gt;有些是不可变的，或者在可观测的短时间内无法改变，是常量，比如性别、种族、成年以后的身高、父母、出生地、信仰、国籍……&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果批评或者表扬的目的是为了让对象有所改变，那么至少是应该针对那些可以改变的&lt;strong&gt;变量&lt;/strong&gt;属性，而不要针对那些对方无法改变的&lt;strong&gt;常量&lt;/strong&gt;属性。&lt;/p&gt;
&lt;p&gt;也就是说，在批评或者表扬的时候，要将原因归结于人的可变属性。&lt;/p&gt;
&lt;p&gt;我觉得这个道理还是挺浅显的。&lt;/p&gt;
&lt;!-- TEASER_END --&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/Meaningful-criticism-is-for-variables/</guid><pubDate>Tue, 11 Jun 2019 17:00:00 GMT</pubDate></item><item><title>那些在线的jupyter</title><link>https://goldengrape.github.io/posts/python/na-xie-zai-xian-de-jupyter/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;h4&gt;update:&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Data School有一篇非常好的评测，写了6个在线的Jupyter服务，建议去看看。
&lt;a href="https://www.dataschool.io/cloud-services-for-jupyter-notebook/"&gt;Six easy ways to run your Jupyter Notebook in the cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里还有一个太长不看的&lt;a href="https://docs.google.com/spreadsheets/d/12thaaXg1Idr3iWST8QyASNDs08sjdPd6m9mbCGtHFn0"&gt;总结表格&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;以下部分写于2年前，部分内容与现实略有差异&lt;/strong&gt;&lt;/p&gt;
&lt;h2&gt;Jupyter&lt;/h2&gt;
&lt;p&gt;如果你是python的初学者, 非常推荐Jupyter.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://goldengrape.github.io/posts/python/na-xie-zai-xian-de-jupyter/Jupyter.org"&gt;Juypter&lt;/a&gt;是一个交互式的编程环境,  号称&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;The Notebook has support for over 40 programming languages,
including Python, R, Julia, and Scala.
&lt;/pre&gt;


&lt;p&gt;支持超过40种语言, 其中包括Python,  R,  Julia和Scala. 虽然除了Python, 目前提到的其他语言我还都不会, 但是看起来是很强大很有前途的样子.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;p&gt;Jupyter的编程环境我很喜欢, 你可以写一段markdown图文并茂的说明, 再写一段代码, 然后单独运行刚刚写过的这一段代码, 看到结果, 调试代码, 改好以后再进行下一段.&lt;/p&gt;
&lt;p&gt;最终完成的文本+代码, 是所谓的&lt;a href="https://zh.wikipedia.org/wiki/%E6%96%87%E5%AD%A6%E7%BC%96%E7%A8%8B"&gt;"文学编程"&lt;/a&gt;, 文字甚至图片说明作者的思路, 中间夹杂着代码, 来教导计算机进行操作. 这样带来了完美的可读性.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!不要! 相信什么"代码才是最好的注释".&lt;/span&gt;
那是穿格子衬衫背双肩背半夜三点还在写代码的专职程序员才相信的东西&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;如果你不是一个每天必须写代码十几个小时的专业程序员, 而是利用代码去完成自己专业的特殊需求, 可能一个程序要间断好多天才能写完, 那么这种方式能够帮你迅速找到前几天的思路. 继续完成之前的作品.&lt;/p&gt;
&lt;h2&gt;在本地安装Jupyter(跳过吧, 别看)&lt;/h2&gt;
&lt;p&gt;Jupyter当然可以安装在本地, 安装好&lt;a href="https://www.anaconda.com/"&gt;Anaconda&lt;/a&gt;以后, 相对比较容易安装jupyter了.  &lt;/p&gt;
&lt;p&gt;但如果你之前只在windows上安装过商业软件, 一路点next, 或者在mac上从dmg中把应用程序直接拖动到文件夹里就可以运行. 那么安装anaconda, jupyter, 以及在运行jupyter时再安装各种python的依赖包, 是非常痛苦的.&lt;/p&gt;
&lt;p&gt;完全不建议新手进行, 至于那些常年泡在&lt;a href="https://twitter.com/bgm38/status/932512531251216385"&gt;linux里面已经 "&lt;strong&gt;久病成医&lt;/strong&gt; "&lt;/a&gt;的病友, 推荐你们试试.&lt;/p&gt;
&lt;h2&gt;在线的Jupyter&lt;/h2&gt;
&lt;p&gt;如果你是python的初学者, 非常推荐使用在线的Jupyter.&lt;/p&gt;
&lt;p&gt;利用在线的Jupyter要轻松得多, 只需要有网络连接, 有浏览器就可以了. 我测试了mac版的Chrome, Safari, 甚至android上的Chrome和iOS上的Safari, Chrome, 都可以运行在线的Jupyter.&lt;/p&gt;
&lt;p&gt;目前已经有这些服务:&lt;/p&gt;
&lt;h3&gt;Cocalc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cocalc.com"&gt;https://cocalc.com&lt;/a&gt; ,
这是一个科学计算平台, 除了提供jupyter, 还提供了sagemath.
sagemath也是一个强大的数学计算工具, 可以当作一个开源的mathematica, 随手解个方程, 求个微分之列都很方便.&lt;/p&gt;
&lt;p&gt;CoCalc已经安装好了大量的python包, 比如numpy, tensorflow, keras, pytorch. . .&lt;/p&gt;
&lt;p&gt;Cocalc有免费版和付费版, 免费版没有额外的网络连接, 也就是说你无法在cocalc里面再访问其他网页, 比如你用jupyter写了一个网络服务程序, 那么是无法用在cocalc免费版里面的. 用git也会受限制. 没有网络连接最麻烦的是如果cocalc没有预装的包, 你是无法自行安装的. 不过如果确实是很常用有名的python包, 那么可以向cocalc网站的支持发个email, 他们的响应速度超级快, 很有可能就帮你装好了.&lt;/p&gt;
&lt;p&gt;我写过&lt;a href="https://goldengrape.github.io/Python-for-ophthalmologist/lesson_01_jupyter.html"&gt;CoCalc的使用教程&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Azure notebook&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://notebooks.azure.com"&gt;https://notebooks.azure.com&lt;/a&gt;
这是微软提供的在线jupyter服务, 财大气粗的微软提供的内存, cpu, 存储空间都不错.&lt;/p&gt;
&lt;p&gt;很有特色的功能有二:
1. 方便一键clone, 看好其他人的做得不错的东西, 可以方便clone一份自己研究.
2. 可以从github导入, 只需要将看中的github repo页面添加, 就可以自动clone, 如果对方更新了, 自己这边也可以方便使用git pull&lt;/p&gt;
&lt;p&gt;微软的这个服务是有网络连接的, 你可以远程下载数据或者导入其他的库. 因此如果出现没有预装的库, 可以自己手动安装. 但麻烦的是, 如果你的notebook停用1小时以后, 远程的server就会停止, 然后你之前安装的东西就会被清除(数据和文件不会), 所以如果有额外的库, 就需要在每次打开的时候预先再次安装一遍.&lt;/p&gt;
&lt;p&gt;好在会有脚本可以做, 你可以参照这个&lt;a href="https://github.com/Microsoft/AzureNotebooks/issues/201#issuecomment-338466615"&gt;帖子&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;到你的 library &amp;gt; settings &amp;gt; Environment
选择 ShellScript 然后选择 特定的脚本
保存
重启 server
&lt;/pre&gt;


&lt;p&gt;安装pytorch的脚本&lt;a href="https://github.com/Microsoft/AzureNotebooks/files/1404777/script.txt"&gt;例子&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;export PATH=~/anaconda3_410/bin:$PATH
conda install pytorch torchvision -c soumith --yes
&lt;/pre&gt;


&lt;p&gt;安装其他的库, 只需要在anaconda里面搜索一下conda的安装方法, 然后替换上面脚本中的conda install pytorch那一段.&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mybinder
&lt;a href="https://mybinder.org/"&gt;https://mybinder.org/&lt;/a&gt;
这个我也还没用过, 据说可以从github里面直接导入, 生成一个docker. 需要什么库的话, 好像也可以通过脚本预先声明, 不一定像azure notebook那样要反复安装.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Colaboratory
&lt;a href="https://colab.research.google.com/"&gt;https://colab.research.google.com/&lt;/a&gt;
这是Google的jupyter服务, 但目前还没有完全开放, 点击注册以后会有"您已成功加入到候补名单。一旦 Colaboratory 可供您使用，我们会立即发送电子邮件通知您。"&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;在移动设备上使用&lt;/h2&gt;
&lt;p&gt;主流的手机/平板浏览器, 上面的服务都可以访问, 编辑的时候稍微有点别扭, 特别是在小屏幕的时候, 操作也还是不够方便, 但如果外接键盘/蓝牙键盘也还是不错的.&lt;/p&gt;
&lt;p&gt;除了内置的浏览器, 我还发现了专用的iOS app, &lt;a href="https://juno.sh/"&gt;Juno&lt;/a&gt; 目前还处于testflight状态, 可以去他家网页上申请beta测试. Juno中还内置了Mybinder的demo. 如果你购买了cocalc付费版, 也可以开放出一个远程的jupyter server供Juno使用.&lt;/p&gt;
&lt;h2&gt;自己建立Jupyter在线服务&lt;/h2&gt;
&lt;p&gt;开源社区现在越来越友好了, 有可能的话, 你也可以在自己的服务器或者VPS上建立一个在线的Jupyter服务, 为自己/学生/客户服务. 但我这么怕麻烦的人, 本地电脑都懒得装, 所以我都没有测试过.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jupyter Hub: &lt;a href="https://github.com/jupyterhub/jupyterhub"&gt;https://github.com/jupyterhub/jupyterhub&lt;/a&gt; 这是jupyter官方的服务器安装程序.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Binder Hub:  &lt;a href="https://github.com/jupyterhub/binderhub"&gt;https://github.com/jupyterhub/binderhub&lt;/a&gt;也是从属与jupyter官方的, 但是用docker技术封装, 大概安装调试会方便一些吧.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cocalc/sagemath: &lt;a href="https://github.com/sagemathinc/cocalc"&gt;https://github.com/sagemathinc/cocalc&lt;/a&gt; 这个也是用docker的, 还带有sagemath.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps.
如果你在本地计算机上安装了jupyter, 非常推荐下面这个插件, 能够在保存jupyter文件的时候, 同时保存同名的 .html 和 .py 形式的文件. 这样在其他的python程序中导入自己写的函数会非常方便. 也很容易在github page上发布文档.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://protips.maxmasnick.com/ipython-notebooks-automatically-export-py-and-html"&gt;http://protips.maxmasnick.com/ipython-notebooks-automatically-export-py-and-html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EOF()&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>现代眼科医生知识扩展包</category><guid>https://goldengrape.github.io/posts/python/na-xie-zai-xian-de-jupyter/</guid><pubDate>Sat, 18 May 2019 04:00:00 GMT</pubDate></item><item><title>半自动录制幻灯片配音</title><link>https://goldengrape.github.io/posts/bulabula/semiautomatic_dubbing_slide/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;最近要做一批幻灯片的配音演讲. 之前用的&lt;a href="https://goldengrape.github.io/posts/bulabula/auto_keynote_presentation"&gt;自动生成keynote演讲&lt;/a&gt;方法突然不好用了, 因为似乎苹果偷偷更新了apple script的函数定义, 一大堆命令都无法识别了. &lt;/p&gt;
&lt;p&gt;但是自动生成配音演讲真的是很方便, 做网络课程的时候, 有什么地方需要更新改正时, 修改文字就好了. 即使是准备现场演讲, 提前生成配音听一遍, 也能够提前对演讲有一个预演, 知道哪些地方需要改进. &lt;/p&gt;
&lt;p&gt;虽然应该自己重新用python写一个, 但本着能拖一天是一天的拖延症思想, 先用现成的东西拼凑连接起来好了. &lt;/p&gt;
&lt;p&gt;于是有如下步骤:
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;h2&gt;材料:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iPhone/ iPad&lt;/li&gt;
&lt;li&gt;mac&lt;/li&gt;
&lt;li&gt;数据线&lt;/li&gt;
&lt;li&gt;MTCoreAudio的AudioMonitor, &lt;a href="http://mac.softpedia.com/get/Developer-Tools/MTCoreAudio.shtml"&gt;softpedia中下载&lt;/a&gt; 或mac自家的GarageBand &lt;/li&gt;
&lt;li&gt;讯飞阅读 app&lt;/li&gt;
&lt;li&gt;耳机&lt;/li&gt;
&lt;li&gt;作者本人&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;软硬件连接方法:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用数据线连接iPhone和mac, 解锁iPhone&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到mac上, 应用程序-&amp;gt;实用工具-&amp;gt;“音频MIDI设置”, 打开“音频MIDI设置”, 找到自己的iPhone, 点击“启用”
&lt;img alt="屏幕快照 2019-03-08 12.07.51" src="https://i.loli.net/2019/03/08/5c81eb5a0582d.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把下载下来的MTCoreAudio打开, 找到里面的AudioMonitor, 复制到应用程序中, 
&lt;img alt="" src="https://cdn.guidingtech.com/media/assets/WordPress-Import/2016/01/Screen_Shot_2016-01-25_at_8_00_20_PM.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(图片应用自guidingtech.com)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插上耳机, 然后运行 Audio Monitor, 将input改成iPhone, 点击Play Through&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="屏幕快照 2019-03-08 12.16.18" src="https://i.loli.net/2019/03/08/5c81eca50fd3f.png"&gt;&lt;/p&gt;
&lt;p&gt;以上步骤就可以将iPhone里发出的声音作为mac上的音频输入, 并且同时接通音频输入和音响输出, 使自己可以监听到音频过程. &lt;/p&gt;
&lt;p&gt;注意如果不是使用的iphone作为输入和耳机作为输出, 而是用了内建话筒和音箱, 那么可能会引起尖锐的哮鸣.&lt;/p&gt;
&lt;h3&gt;操作流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;撰写演讲脚本, 保存为txt文件.&lt;/li&gt;
&lt;li&gt;发送到iPhone上, 用讯飞阅读打开.&lt;/li&gt;
&lt;li&gt;打开做好的keynote, “录制幻灯片放映”&lt;/li&gt;
&lt;li&gt;点击红色的录音按钮, 倒数3秒后, 在讯飞阅读中播放朗读演讲脚本.&lt;/li&gt;
&lt;li&gt;自己听着朗读, 到该翻页的时候翻页. 是的, 这个过程是有人参与的, 所以说是半自动.&lt;/li&gt;
&lt;li&gt;播放完成后, 保存, keynote中文件-&amp;gt;导出到-&amp;gt;视频&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;结果与讨论&lt;/h2&gt;
&lt;p&gt;效果很好, 而且所有的动画也都可以流畅播放和录制, 如果再DJ一点, 还可以手动暂停语音朗读, 等着动画播放完成. &lt;/p&gt;
&lt;p&gt;建议先高速听一遍, 一边听一边把一些表达稍微修改, 比如数学公式的朗读可能有问题, 有些分词断句可能听起来很怪异, 必要时加个逗号或者空格. &lt;/p&gt;
&lt;p&gt;注意导出的视频文件是m4v后缀, 有些教学网站傻傻的只认mp4文件, 直接改后缀成mp4就行了. 不用再转码.&lt;/p&gt;
&lt;p&gt;没找到讯飞朗读里如何人为做一些停顿. 逗号, 句号之类都只是寻常间断, 多个标点也不能把停顿延长.&lt;/p&gt;
&lt;p&gt;把iphone作为mac的音频输入, 再同时监听真的很有趣. 好像可以玩很多东西&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/semiautomatic_dubbing_slide/</guid><pubDate>Fri, 08 Mar 2019 04:00:00 GMT</pubDate></item><item><title>拍摄开花过程</title><link>https://goldengrape.github.io/posts/bulabula/flower-blossom/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;自己养的栀子花好不容易要开花了. &lt;/p&gt;
&lt;p&gt;于是用相机记录下来:
&lt;img alt="" src="https://goldengrape.github.io/images/flower_blossom.gif"&gt;&lt;/p&gt;
&lt;p&gt;再记录一下拍摄过程:
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;h2&gt;材料与方法:&lt;/h2&gt;
&lt;h3&gt;工具:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;待开放栀子花,&lt;/li&gt;
&lt;li&gt;Nokia X6手机,&lt;/li&gt;
&lt;li&gt;三脚架, 手机夹子&lt;/li&gt;
&lt;li&gt;Android
上的&lt;a href="https://apkpure.com/cn/open-camera/net.sourceforge.opencamera"&gt;Open Camera App&lt;/a&gt;: 这是一个很强悍的相机app, 能够自定义很多参数.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://item.taobao.com/item.htm?id=574484611225"&gt;可外接电源的LED补光灯&lt;/a&gt;, 这几天在做另一个项目, 买了一堆网红主播用品.&lt;/li&gt;
&lt;li&gt;&lt;a href="https://www.ffmpeg.org/"&gt;FFmpeg&lt;/a&gt;, 这是一个开源命令行软件. 在mac上用homebrew完全安装ffmpeg要费些功夫, (开源软件嘛, 一步安装到位就太不矜持了), &lt;a href="https://trac.ffmpeg.org/wiki/CompilationGuide/macOS"&gt;要先brew tap&lt;/a&gt; 然后再&lt;a href="https://gist.github.com/Piasy/b5dfd5c048eb69d1b91719988c0325d8"&gt;安装各个options&lt;/a&gt; &lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;摆放&lt;/h3&gt;
&lt;p&gt;&lt;img alt="IMG_2273" src="https://i.loli.net/2019/03/05/5c7e87ec2fa1e.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;拍摄参数设定&lt;/h3&gt;
&lt;p&gt;&lt;img alt="Screenshot_20190305-223636" src="https://i.loli.net/2019/03/05/5c7e8ab0f22d9.png"&gt;
&lt;em&gt; 连拍模式: 无限
&lt;/em&gt; 连拍模式间隔: 目前我设定的是30秒&lt;/p&gt;
&lt;h3&gt;软件处理&lt;/h3&gt;
&lt;p&gt;使用ffmpeg合成图像.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;将目录里的所有jpg图像合成为视频, 帧速率=30&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -framerate 30 -pattern_type glob -i '*.jpg' flower.mp4&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实测发现画面太大, 于是只截取画面中的一部分(宽=2200, 高=2200, x起点=800, y起点=700)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -framerate 30 -pattern_type glob -i '*.jpg' -vf "crop=2200:2200:800:700" flower.mp4&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;微信朋友圈只有10秒, 所以提高速度, 其中setpts=10/实际时间&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;ffmpeg -i flower.mp4 -b:v 2000k -filter:v "setpts=0.05714286*PTS" output.mp4&lt;/code&gt;&lt;/p&gt;
&lt;h2&gt;结果与讨论&lt;/h2&gt;
&lt;h3&gt;结果:&lt;/h3&gt;
&lt;p&gt;未处理的拍摄样张:
&lt;img alt="IMG_20190305_065624_DRO" src="https://i.loli.net/2019/03/05/5c7e8fbfe5da4.jpg"&gt;&lt;/p&gt;
&lt;p&gt;处理后的视频:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/flower_blossom.gif"&gt;&lt;/p&gt;
&lt;h3&gt;讨论&lt;/h3&gt;
&lt;p&gt;花开过程大约是2天, 一共拍摄了5200多张, 照片总容量达到了12G, 原本担心ffmpeg处理这么大的量会吃力, 没想到还是很容易就完成了. &lt;/p&gt;
&lt;p&gt;平均来说, 每30秒拍摄一张有点短, 造成数据量很大, 不过反正ffmpeg处理起来也不吃力, 但如果使用常规的软件来处理, 比如photoshop之类, 有可能会吃不消. &lt;/p&gt;
&lt;p&gt;但花瓣并不是匀速打开的, 最外层的花瓣类似是弹开的样子, 特别是第4片花瓣, 30秒之内张开了60度以上. 所以如果拍摄间隔设定太久, 就可能捕捉不到. &lt;/p&gt;
&lt;p&gt;关于摆放位置, 现在觉得应该把镜头正对花的中心, 而不应该从侧面拍摄, 会有一半的花瓣看不见. 还是应该尽可能把镜头靠近, 使花占主体部分, 而不是后期剪裁, 感觉花朵本身的分辨率还是欠缺. &lt;/p&gt;
&lt;p&gt;背景颜色变化明显, 是因为日光的原因. 晚上由补光灯照明, 白天日光造成的影响很明显. 补光灯应该再亮一些, 噪点还是太明显. 我不知道如果完全遮蔽日光, 使用人造光源照明, 是否会对开花过程有影响. 毕竟LED的光谱与日光还是有很大不同. &lt;/p&gt;&lt;/div&gt;</description><category>lifescience</category><guid>https://goldengrape.github.io/posts/bulabula/flower-blossom/</guid><pubDate>Tue, 05 Mar 2019 14:00:00 GMT</pubDate></item><item><title>好好学6个月英语, 还是等半年看看机器翻译的水平?</title><link>https://goldengrape.github.io/posts/bulabula/Study-English-or-wait-for-machine-translation/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;如题.&lt;/p&gt;
&lt;p&gt;现在机器学习实在进步太快, 好用的工具层出不穷. 列举一下目前使用的工具:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;浏览网页:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;浏览的要求就是看起来快, 大概意思清楚就可以了, 所以我不使用那种查单词的. 而是直接翻译成中英对照的, 现在用的是&lt;a href="http://caiyunapp.com/"&gt;彩云小译&lt;/a&gt; , 浏览网页用量比较大, 所以付费订阅中, 每个月1$&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;看文献:&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当然主要是医学文献, 有sci-hub看全文非常方便, 只需要把sci-hub.tw/ 加在文献页面网址的前面即可, 这样就能够下载PDF了.&lt;/p&gt;
&lt;p&gt;(更新: 我发现很多人不理解把scihub加在文献页面前面的意思)&lt;/p&gt;
&lt;p&gt;比如: 在pubmed上查到一篇文献, 网址是:
&lt;code&gt;https://www.ncbi.nlm.nih.gov/pubmed/30651639/&lt;/code&gt; &lt;/p&gt;
&lt;p&gt;那么通过sci-hub找到的全文网址就是: 
 &lt;code&gt;sci-hub.tw/https://www.ncbi.nlm.nih.gov/pubmed/30651639/&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;此处要强力推荐这个&lt;a href="https://fanyi.transgod.cn/"&gt;TransGod体验版&lt;/a&gt; 专职的医学文献机器翻译, 机翻的可读性还是不错的. 能够机翻PDF, 然后转换成word文件, 不但维持原格式, 连表格都原位翻译, 连上标下标都按原位翻译.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;写作&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我的英语能力, 大概是听&amp;gt;说&amp;gt;&amp;gt;读&amp;gt;=写. 所以有两个辅助工具,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个是Google Translate, 写好中文看英文, 如果英文翻译得不好, 多半是中文表达不够清楚, 改中文.&lt;/li&gt;
&lt;li&gt;另一个是&lt;a href="https://app.grammarly.com/"&gt;grammarly&lt;/a&gt;, 这个有&lt;a href="https://chrome.google.com/webstore/detail/kbfnbcaeplbcioakkpcpgfkobkghlhen"&gt;Chrome的插件&lt;/a&gt;, 能够检查出一些语法和拼写错误. 很奇怪的, Google Translate得到的结果里还是时常会有语法错误, 最常见的是丢失冠词. 按说RNN生成的序列这种问题应该概率很低.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在还缺少比较好用的:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;专利机器翻译. 不过专利这种东西, 即使用中文写的, 也不是很好懂的. 我自己的发明, 看专利我也不是很明白. 所以, 最好有个“专利语”到“日常口语”, 哪怕是“工程师语”的机器翻译也行.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;语法检查工具. 每年全球各种英语考试那么多, 改错题也那么多, 不能拿来当语料库么.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以上这些工具, 配合&lt;a href="https://goldengrape.github.io/posts/bulabula/gollum-wiki"&gt;用Gollum建立的wiki笔记工具&lt;/a&gt;, 读文献吐槽文献很爽.&lt;/p&gt;
&lt;p&gt;补充一下医学文献的快速浏览过程:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;打开&lt;a href="https://pubmed.gov/"&gt;pubmed&lt;/a&gt;检索文献&lt;/li&gt;
&lt;li&gt;如果有html的全文, 则在文献的右侧有PMC Full Text(free)的图标&lt;img alt="图标" src="https://static.pubmed.gov/portal/portal3rc.fcgi/4183432/img/3977009"&gt;. 可以直接点击阅读, PMC的阅读器非常棒, 参考文献会放到相应段落旁边, 看综述时非常舒服. 此时可以点击&lt;a href="https://chrome.google.com/webstore/detail/lingocloud-interpreter/jmpepeebcbihafjjadogphmbgiffiajh?hl=zh-CN"&gt;彩云小译的插件按钮&lt;/a&gt;, 进行中英文对照翻译. 简要浏览, 遇到细节再看英文是具体怎么说的. 
  优选PMC的阅读器, 因为彩云小译有些网页解析有问题, 比如对于JAMA的网站只能翻译前几段, 后面的似乎就忘记了.&lt;/li&gt;
&lt;li&gt;如果没有html全文, 在pubmed的网址前面加入sci-hub.tw/ 下载PDF文件, 然后送进&lt;a href="https://fanyi.transgod.cn/"&gt;TransGod&lt;/a&gt;里面, 翻译完成后下载word文档浏览译文.&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/Study-English-or-wait-for-machine-translation/</guid><pubDate>Tue, 15 Jan 2019 13:00:00 GMT</pubDate></item></channel></rss>