<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GoldenGrape's Blog (关于文章 opensource)</title><link>https://goldengrape.github.io/</link><description></description><atom:link href="https://goldengrape.github.io/categories/opensource.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2019 &lt;a href="mailto:https://twitter.com/goldengrape"&gt;Golden Grape&lt;/a&gt; </copyright><lastBuildDate>Tue, 07 May 2019 09:20:56 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>自动添加Numba-jit修饰</title><link>https://goldengrape.github.io/posts/python/auto-numba-jit/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;今天拖延症犯了. 我的拖延症表现是狂做另一件以后可能用到, 但现在无关紧要的事情. 比如加速python的运行速度.&lt;/p&gt;
&lt;h2&gt;Numba&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://numba.pydata.org/"&gt;Numba&lt;/a&gt;是个很神奇的东西, 加上以后可以提高python的运行速度.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;p&gt;这里有一篇报道翻译, &lt;a href="http://www.infoq.com/cn/news/2017/08/NumPy0-Numba-Python"&gt;使用NumPy、Numba和Python异步编程的高性能大数据分析与对比&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;直接看我在自己电脑上测试的结果:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;行数&lt;/th&gt;
&lt;th align="left"&gt;numpy&lt;/th&gt;
&lt;th&gt;numpy+numba&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;10^7&lt;/td&gt;
&lt;td align="left"&gt;9.1&lt;/td&gt;
&lt;td&gt;1.2秒&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;10^8&lt;/td&gt;
&lt;td align="left"&gt;99.7&lt;/td&gt;
&lt;td&gt;4.9秒&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;报道里还有22. 6分钟对40.2秒的成绩, 我可不会去测试的.&lt;/p&gt;
&lt;p&gt;Numba在使用时几乎不用修改代码, 最简单的用法就是在每个函数之前加入@jit的修饰, 这篇报道里就是这么做的. 感觉是免费升级了电脑.&lt;/p&gt;
&lt;h2&gt;自动给每个函数加@jit&lt;/h2&gt;
&lt;p&gt;但我连给函数加@jit都懒得做, 既然是好像加错了也没有太多的坏处, 那干脆统一给所有的函数都加上这个修饰好了.&lt;/p&gt;
&lt;p&gt;所以, 就干脆写了一段代码, 把py文件/ipynb文件当作文本处理, 用正则表达式搜索出所有的函数定义, 在前面加一句@jit好了.&lt;/p&gt;
&lt;p&gt;复习了一下正则表达式. 之前写&lt;a href="https://goldengrape.github.io/posts/python/auto-numba-jit/"&gt;&amp;lt;序列一致性检验工具&amp;gt;&lt;/a&gt;的时候, 主要练习的是正则表达式中的查找, 这一次练习的是替换.&lt;/p&gt;
&lt;p&gt;此处请参考&lt;a href="https://python3-cookbook.readthedocs.io/zh_CN/latest/c02/p05_search_and_replace_text.html"&gt;Python3 cookbook&lt;/a&gt;, 需要小心的一个问题是, 如果用非转译的"\n"来替换字符串的时候, re.sub好像容易把\n给翻译了, 用\n也没有办法. 但用.replace还是可以的. 在处理ipynb文件的时候费了很大周折.&lt;/p&gt;
&lt;p&gt;代码在&lt;a href="https://github.com/goldengrape/decorate_with_numba_jit"&gt;这里&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;使用说明&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;对本路径下所有的py文件添加@jit修饰, 并存入outputpath中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;decorate_with_jit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;allpy&lt;/span&gt; &lt;span class="n"&gt;outputpath&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;对本路径下所有的ipynb文件添加@jit修饰, 并存入outputpath中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;decorate_with_jit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;allipynb&lt;/span&gt; &lt;span class="n"&gt;outputpath&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;对本路径下所有的py文件去除@jit修饰, 并存入outputpath中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;decorate_with_jit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;allpy&lt;/span&gt; &lt;span class="n"&gt;outputpath&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;对本路径下所有的ipynb文件去除@jit修饰, 并存入outputpath中&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;decorate_with_jit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;allipynb&lt;/span&gt; &lt;span class="n"&gt;outputpath&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;对文件A.py添加@jit修饰, 并保存为文件B.py&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;decorate_with_jit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;对文件A.py去除@jit修饰, 并保存为文件B.py&lt;/li&gt;
&lt;/ul&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;decorate_with_jit&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;--&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;A&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="n"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;EOF.&lt;/p&gt;&lt;/div&gt;</description><category>opensource</category><guid>https://goldengrape.github.io/posts/python/auto-numba-jit/</guid><pubDate>Thu, 28 Dec 2017 07:00:20 GMT</pubDate></item><item><title>序列一致性检验工具</title><link>https://goldengrape.github.io/posts/python/compare-seq/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;本程序用于检查专利文件中的蛋白质序列是否一致. 在专利撰写时, 发明人往往在技术交底书中使用Word文件来提交蛋白质序列. 而在USPTO的要求中, 需要使用PatentIn软件来生成标准的序列提交文件.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;专利代理人在撰写专利说明书时可能通过ctrl+C/ ctrl+V 等操作将技术交底书中的序列复制粘贴到PatentIn软件中, 在这一动作中有可能引起增加或减少字母, 造成说明书中的序列与发明人所期望的序列不一致.&lt;/p&gt;
&lt;h2&gt;适用文件形式&lt;/h2&gt;
&lt;p&gt;适用文件的样例在demo文件夹中. 其中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;技术交底书样例, AAA.docx,序列以word表格的形式出现&lt;/li&gt;
&lt;li&gt;PantentIn生成文件样例, BBB.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;安装&lt;/h2&gt;
&lt;p&gt;推荐使用Microsoft Azure Notebooks在云端运行.&lt;/p&gt;
&lt;h3&gt;Azure Notebooks安装&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;打开https://notebooks.azure.com 以注册或以MS账户登录.&lt;/li&gt;
&lt;li&gt;新建Lib: +New Library&lt;/li&gt;
&lt;li&gt;从Github中导入:&lt;ul&gt;
&lt;li&gt;在GitHub repository中填入: https://github.com/goldengrape/check_patentIn_sequence&lt;/li&gt;
&lt;li&gt;自行设定好Library Name和Library ID&lt;/li&gt;
&lt;li&gt;Import&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;设置:&lt;ul&gt;
&lt;li&gt;选择刚刚建立的Library, 点击Setting&lt;/li&gt;
&lt;li&gt;Infomation:  如果不想泄露数据, 请确认 Public library &lt;strong&gt;不&lt;/strong&gt;被选上&lt;/li&gt;
&lt;li&gt;Environment:  Shell scirpt-&amp;gt;script.txt&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;在本地电脑安装&lt;/h3&gt;
&lt;h4&gt;依赖包&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;python 3.5&lt;/li&gt;
&lt;li&gt;biopython&lt;/li&gt;
&lt;li&gt;python-docx&lt;/li&gt;
&lt;li&gt;numpy&lt;/li&gt;
&lt;li&gt;pandas&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;太麻烦了, 你不会真的打算本地运行吧. 实在要装的话推荐使用anaconda进行安装, 但anaconda装python-docx有坑, 最好调用anaconda下的pip进行安装python-docx.&lt;/p&gt;
&lt;h4&gt;安装&lt;/h4&gt;
&lt;p&gt;从github clone.&lt;/p&gt;
&lt;h2&gt;使用&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;上传或copy需要检查校对的文件到指定的目录.&lt;/li&gt;
&lt;li&gt;打开compare_seq.ipynb&lt;/li&gt;
&lt;li&gt;设定文件名:
    &lt;code&gt;input_path='demo'
    output_path='demo'
    docx_name='AAA.docx'
    txt_name='BBB.txt'&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;指定word文件中表格的属性
    &lt;code&gt;table_catalog_dict={
        0: {"head": 1, "seqtype":'chain', "chaintype":'HeavyChain'},
        1: {"head": 1, "seqtype":'chain', "chaintype":'LightChain'},
        2: {"head": 2, "seqtype":'CDR', "chaintype":'HC'},
        3: {"head": 2, "seqtype":'CDR', "chaintype":'LC'},
        4: {"head": 1, "seqtype":'chain', "chaintype":'HeavyChain'},
        5: {"head": 1, "seqtype":'chain', "chaintype":'LightChain'},&lt;/code&gt;
    其中:&lt;ul&gt;
&lt;li&gt;head: 表格中标题行的行数&lt;/li&gt;
&lt;li&gt;seqtype: 表格所描述的序列是长链chain或是CDR&lt;/li&gt;
&lt;li&gt;chaintype: 序列的类型, 是&lt;ul&gt;
&lt;li&gt;HeavyChain: 重链&lt;/li&gt;
&lt;li&gt;LightChain: 轻链&lt;/li&gt;
&lt;li&gt;HC: 重链CDR&lt;/li&gt;
&lt;li&gt;LC: 轻链CDR&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;完成设定后, 在菜单中选择Kernel-&amp;gt;restart&amp;amp;run all&lt;/li&gt;
&lt;li&gt;结果:&lt;ul&gt;
&lt;li&gt;结果首先会显示在程序页面中&lt;/li&gt;
&lt;li&gt;结果以report.txt文件存储在output_path所指定的路径中&lt;/li&gt;
&lt;li&gt;为方便进一步处理,&lt;ul&gt;
&lt;li&gt;PatnetIn生成的txt文件, 会被转换成同名的json文件和csv文件.&lt;/li&gt;
&lt;li&gt;word文件, 会被转换成同名的csv文件.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;更新&lt;/h2&gt;
&lt;p&gt;本程序还将不断更新.&lt;/p&gt;
&lt;h3&gt;在Azure Notebooks中更新&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;点击Terminal&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;cd Library&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;git checkout .&lt;/code&gt; 注意末尾有个点&lt;/li&gt;
&lt;li&gt;输入&lt;code&gt;git pull&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>opensource</category><category>python</category><guid>https://goldengrape.github.io/posts/python/compare-seq/</guid><pubDate>Thu, 28 Dec 2017 07:00:07 GMT</pubDate></item><item><title>将PatentIn文件转换成JSON文件的工具</title><link>https://goldengrape.github.io/posts/python/PatentIn-To-JSON/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;h3&gt;--兼论以自下而上的抽象应对不断改需求的PM&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/goldengrape/check_patentIn_sequence/blob/master/patentIn_to_json.ipynb"&gt;Jupyter版本:&lt;/a&gt;
或者更容易import的
&lt;a href="https://github.com/goldengrape/check_patentIn_sequence/blob/master/patentIn_to_json.py"&gt;python版本:&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只需要:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;patentIn_to_json&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patentIn_to_json&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;即可.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;p&gt;这是&lt;a href="https://github.com/goldengrape/check_patentIn_sequence"&gt;&amp;lt;序列一致性检验工具&amp;gt;&lt;/a&gt; 之中的一个组件. 很适合单独使用, 所以特别提出来说明一下.&lt;/p&gt;
&lt;p&gt;一个程序员或者一个Nerd, 通常不能够容忍重复手工操作, 所以当有检查序列需求的时候, 我显然会写程序. 这可以用下面的图来表示.
&lt;img alt="nerd.001" src="http://upload-images.jianshu.io/upload_images/29267-031eb2cdd79eba2d.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"&gt;&lt;/p&gt;
&lt;p&gt;然而在实际的生活工作中, 上图不一定总能实现, 特别是当你碰到一名反复多变的产品经理之时. (没错, 如果是在家编程, 提出需求的家属也就是产品经理).&lt;/p&gt;
&lt;p&gt;如果需求不断地更改, 比如检查序列一致性的问题, 每次送来的文件都有格式上的细微差别, 于是每次送来的新文件都能触发一轮bug, 于是每次都要详细地查错debug, 于是付出的努力远远比手工操作多得多, 完全没有实现初始时打算省时省力的愿望.
&lt;img alt="nerd.002" src="http://upload-images.jianshu.io/upload_images/29267-6dc0c384a93cccba.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"&gt;&lt;/p&gt;
&lt;p&gt;事情就会变得如同图2所示, 这会让一个人疯掉的.&lt;/p&gt;
&lt;p&gt;幸好前一段时间粗略地刷过一多半&lt;a href="https://mitpress.mit.edu/sicp/"&gt;SICP&lt;/a&gt;, 也读了一遍&lt;a href="https://book.douban.com/subject/6021440/"&gt;&amp;lt;黑客与画家&amp;gt;&lt;/a&gt;, 知道产品经理不断改需求这件事情早在1984年就被反复提及了.&lt;/p&gt;
&lt;p&gt;解决方案是自下而上地抽象, 这样打好了底层的基础, 一旦需求发生变化, 只需要在高层的抽象上进行灵活地改变, 而不必每次重头再来. 每一次debug或者重构的成本就会越来越低.&lt;/p&gt;
&lt;p&gt;&lt;img alt="nerd.003" src="http://upload-images.jianshu.io/upload_images/29267-ae858eeb2da30473.jpeg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"&gt;&lt;/p&gt;
&lt;p&gt;比如序列一致性的检验问题, 原来我是按照文本文件中的特征词, 用正则表达式进行切割, 分离, 然后分别找到序列的名称和序列字符串的列表, 再用字典将两者对应起来. 但文本文件中就是可能会出现错误, 比如关键词的变化, 比如关键项目的缺失, 一旦发生了就无法继续进行, 也很难找到问题所在.&lt;/p&gt;
&lt;p&gt;现在的方案是如程序中所展示的, 先用正则表达式把txt文件统一转换成json, 实际上只是做很多的字符串替换, 比如把一对括号变成引号和冒号, 立刻就完成了字典键值之间的对应.&lt;/p&gt;
&lt;p&gt;一旦完成了txt到json的转换, 就可以方便使用其他基于json的抽象工具, 比如pandas, 而处理缺项漏项在pandas中又有很多工具. 一下子就方便许多.&lt;/p&gt;
&lt;p&gt;学好SICP真的有帮助, 看待问题的方式都不一样了. 顺便推荐一下&lt;a href="https://github.com/sarabander"&gt;https://github.com/sarabander&lt;/a&gt; 这位做了各种版本的SICP电子书, 而且公式生成清晰. 大力推荐.&lt;/p&gt;&lt;/div&gt;</description><category>opensource</category><category>python</category><guid>https://goldengrape.github.io/posts/python/PatentIn-To-JSON/</guid><pubDate>Thu, 28 Dec 2017 07:00:03 GMT</pubDate></item></channel></rss>