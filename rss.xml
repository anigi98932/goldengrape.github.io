<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GoldenGrape's Blog</title><link>https://goldengrape.github.io/</link><description>This is a blog site for GoldenGrape.</description><atom:link href="https://goldengrape.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2018 &lt;a href="mailto:https://twitter.com/goldengrape"&gt;Golden Grape&lt;/a&gt; </copyright><lastBuildDate>Tue, 20 Mar 2018 05:33:02 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>iPad上的琴弦</title><link>https://goldengrape.github.io/posts/bulabula/string-on-pad/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;前一段时间玩Ukulele. 真不知道人类怎么想的, 用手指头去按又硬又粗的琴弦. 每次练琴都恨不得把手指勒出几个槽来. 实在是不爽, 于是放弃了, 吉他什么的也一并拉黑. 大约从小我就和弦乐或者半弦乐有仇.&lt;/p&gt;
&lt;p&gt;不过弄出有意思的声音还是我有兴趣做的事情. 于是就有了在iPad上做一把Ukulele的项目:
&lt;img alt="ipadminiukulele" src="https://i.loli.net/2018/03/20/5ab08921c906d.gif"&gt;&lt;/p&gt;
&lt;p&gt;这把琴是有琴弦的, 琴弦能够给人有触觉反馈, 在乐器演奏是还是很重要的. 琴弦使用的是鱼线, 线绷紧的力度可调. 这样不至于勒手. 仅仅按住琴弦还是不响的, 要在拨弦的时候iPad才会发出声音.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h2&gt;硬件部分&lt;/h2&gt;
&lt;p&gt;很简单的两个打印件, 可以卡住iPad两端.
&lt;img alt="手机琴新版 v15" src="https://i.loli.net/2018/03/20/5ab08b60e5759.png"&gt;&lt;/p&gt;
&lt;p&gt;从淘宝几块钱买来一个吉他调弦钮, 安在圆孔里. 把鱼线4个弦槽穿过, 然后绑在吉他调弦钮上, 线要从iPad前后绕过, 这样才能稳定. 线的长度要试试, 大约是iPad长度的7-9倍. 装上的时候可以很松, 然后通过调弦钮逐渐拉紧.&lt;/p&gt;
&lt;p&gt;如果喜欢Ukulele/吉他这类半弦乐中横隔的手感, 可以在鱼线上打结, 或者在基本调好线的松紧之后穿入几根牙签.&lt;/p&gt;
&lt;p&gt;琴弦应该放在iPad的右侧. 要和相应的app位置匹配.&lt;/p&gt;
&lt;p&gt;打印件已经&lt;a href="https://www.thingiverse.com/thing:2832687"&gt;存放在Thingiverse. &lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;软件部分&lt;/h2&gt;
&lt;p&gt;这部分代码是用的iPad上的&lt;a href="http://omz-software.com/pythonista/"&gt;Pythonista 3&lt;/a&gt;写的, 这大概是唯一能够在ipad上写出可执行python脚本的工具了.&lt;/p&gt;
&lt;p&gt;Pythonista自带里有个钢琴的demo, 演示多点触控, Ukulele是一样的, 只是要把按键和拨弦两件事情分开, 按键的时候把音高确定好, 拨弦的时候再调出该弦的声音进行播放.&lt;/p&gt;
&lt;p&gt;遗憾的是Pythonista里的sound库只有钢琴的声音, 音域的范围也很有限. 于是做出来的是一把拨弦钢琴了.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://goldengrape.github.io/code/iPad-Ukulele/Ukulele.py"&gt;代码在此&lt;/a&gt;&lt;/p&gt;
&lt;!-- EOF --&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href="https://press.one/file/v?s=3bf28f812a1c1308b7942dd424cf4114c7cd2241038b3df453038fcdde5f7561b345a77b2b9879b84cb6ab3601d1bce58f8e31dad3110e79912e1c179209f8811&amp;amp;h=01f31dd17b0af32cca3bc8cdb4c450b59c5c6812749b31c2e4632073cb14dcdb&amp;amp;a=79c1846bc532ec0cf61ad0f1f5604a80a1387aca&amp;amp;f=P1&amp;amp;v=2"&gt;press.one签名&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>https://goldengrape.github.io/posts/bulabula/string-on-pad/</guid><pubDate>Tue, 20 Mar 2018 04:00:00 GMT</pubDate></item><item><title>面向眼科医生的正则表达式(0)-简介</title><link>https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist-0/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;正则表达式是一种程序员用来在大量字符里进行定位的方法. 算得上是处理字符串时的解剖学了.&lt;/p&gt;
&lt;p&gt;最近解锁这个技能以后, 如同拿到了一把雷神之锤, 非常好用看什么都想砸一下. 
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;p&gt;有很多的眼科检查设备厂商, 以蔡司为代表, 非常邪恶. 不肯开放自己的数据接口, 只将数据以pdf的形式发送出来. 要想取得其中的数据, 很多医生恐怕是人眼OCR手动输入, 或者一部分自动化程度高一点的是把pdf转换成纯文本txt文件, 再从txt中复制粘贴. 再或者是类似同仁医院那样霸气地使用OCR处理整个pdf文件.&lt;/p&gt;
&lt;p&gt;用OCR处理整个pdf会有一些问题, 我现在还在尝试解决之中, 比如对于视野数据, 经常会出现-2 0这样的数字, 很容易就被识别成了-20, 还有可能把r识别成n之类. 这其中恐怕还有一些技巧.&lt;/p&gt;
&lt;p&gt;先把PDF转换成纯文本就不会有识别错误的问题, 但引入的问题是格式的混乱, 不知道txt中的文字是对应到pdf上的哪个位置, 这时候就需要正则表达式帮忙了.&lt;/p&gt;
&lt;p&gt;还是以视野数据为例, 我在提取视野数据时发现,&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;False POS Errors: False NEG Errors: Test Duration:
Blind Spot Central 1/13
15% XX 5%
GHT:
VFI:
MD: PSD:
Outside Normal Limits
76%
-8.33 dB P &amp;lt; 0.5% 10.06 dB P &amp;lt; 0.5%&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;实际上对应的关系是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;False NEG Errors: 15%&lt;/li&gt;
&lt;li&gt;False NEG Errors: 5%&lt;/li&gt;
&lt;li&gt;VFI: 76%&lt;/li&gt;
&lt;li&gt;MD: -8.33 dB P &amp;lt; 0.5%&lt;/li&gt;
&lt;li&gt;PSD: 10.06 dB P &amp;lt; 0.5%&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;每一个视野报告的pdf中, 这一段除了数字不同, 其他都是类似的. 那么要把这些数字提取出来, 就要先定位, 然后剪切出想要的片段. 这时候就需要正则表达式了&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;在python中, 处理正则表达式的工具包叫做re, 在其他语言中也有相应的工具包. 下面以python为例进行讲解.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"False POS Errors: False NEG Errors: Test Duration: Blind Spot Central 1/13 15&lt;/span&gt;&lt;span class="si"&gt;% X&lt;/span&gt;&lt;span class="s2"&gt;X 5&lt;/span&gt;&lt;span class="si"&gt;% G&lt;/span&gt;&lt;span class="s2"&gt;HT: VFI: MD: PSD: Outside Normal Limits 76% -8.33 dB P &amp;lt; 0.5% 10.06 dB P &amp;lt; 0.5%"&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;观察一下这些数据我们会发现一些pattern, 比如这些数据都跟%有关, MD和PSD的单位是dB.&lt;/p&gt;
&lt;p&gt;曹安民教授讲课时说过"眼科就是pattern recognition, 如果不能识别出pattern来, 你就hopeless了"&lt;/p&gt;
&lt;p&gt;False NEG Errors, False NEG Errors, VFI的pattern很明显, 数字然后紧跟着%. 
要描述这个pattern可以用以下规则:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;[0-9]&lt;/code&gt;, 表示这是一个字符, 取值可以选取从0到9的数字&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]+&lt;/code&gt;, 表示这里有数字, 至少有一位数, 可以有多位数&lt;/li&gt;
&lt;li&gt;&lt;code&gt;[0-9]+%&lt;/code&gt;, 表示这里有数字, 至少有一位数, 可以有多位数, 后面紧跟着一个%号. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们可以使用python re工具包里面的findall函数来测试一下:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"\d+%"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[5]:&lt;/div&gt;



&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;['15%', '5%', '76%', '5%', '5%']&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;很容易就把False NEG Errors, False NEG Errors, VFI的数据给分出来了.&lt;/p&gt;
&lt;p&gt;那么MD和PSD也类似, 都有以dB为结尾的特征,&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0-9]+ dB: 有至少一位数字, 可以有多位, 以空格和dB作为结尾&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"[0-9]+ dB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[6]:&lt;/div&gt;



&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;['33 dB', '06 dB']&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;这时候没有提取出-8.33, 只是提取出了33 dB, 需要考虑到数字中还可能有正负号和小数点. 所以会更复杂一些:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\-&lt;/code&gt; 表示-号, 因为-号在正则表达式中还有其他的含义, 所以要前面加一个\表示区分, 类似的还有&lt;code&gt;\.&lt;/code&gt;表示小数点&lt;/li&gt;
&lt;li&gt;&lt;code&gt;\-*&lt;/code&gt;表示-号这个字符可以出现0次, 也可以出现多次. &lt;ul&gt;
&lt;li&gt;用*来表示出现0次或多次, &lt;/li&gt;
&lt;li&gt;用+来表示出现1次或多次&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;那么-8.33 dB和10.06 dB的pattern是: 有或者没有-号, 然后跟0个或者多个数字, 再接着是0个或者1个小数点, 然后是一定会有的数字, 再后面是空格和dB. 用正则表达式写出来就是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;\-*[0-9]*\.*[0-9]+ dB&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"\-*[0-9]*\.*[0-9]+ dB"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[7]:&lt;/div&gt;



&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;['-8.33 dB', '10.06 dB']&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;现在已经可以提取出了数字和后面的单位, 但这还是字符, 要处理成数据还要再拆分, 也有简单的方案, 就是用()来给搜索的pattern分组: (-&lt;em&gt;[0-9]&lt;/em&gt;.*[0-9]+)描述的是数据部分, ( dB)描述的是单位部分.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"(\-*[0-9]*\.*[0-9]+)( dB)"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;string&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[8]:&lt;/div&gt;



&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[('-8.33', ' dB'), ('10.06', ' dB')]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;这样就容易进行后续的处理了.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="一些常用的正则表达式:"&gt;一些常用的正则表达式:&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist-0/#%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E7%9A%84%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F:"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;我处理了写文档, 觉得常用的也不多:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[0-9]或者\d表示数字&lt;/li&gt;
&lt;li&gt;[a-z]表示小写字母&lt;/li&gt;
&lt;li&gt;[A-Z]表示大写字母&lt;/li&gt;
&lt;li&gt;\n\t表示换行和tab&lt;/li&gt;
&lt;li&gt;&lt;code&gt;+和*&lt;/code&gt;表示前面的字符可以出现多次, 其中+是表示至少出现1次, *没有这个限制&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;在&lt;a href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist"&gt;下一篇的练习中&lt;/a&gt;, 还会再讲解一些更好用的技巧, 可以处理更为复杂的pattern.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>python</category><category>现代眼科医生知识扩展包</category><guid>https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist-0/</guid><pubDate>Mon, 12 Mar 2018 07:00:00 GMT</pubDate></item><item><title>面向眼科医生的正则表达式(1)-练习</title><link>https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;以从抗体序列中定位CDR来练习正则表达式.&lt;/p&gt;
&lt;p&gt;这个练习中, 我们将会使用这样一些正则表达式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[A-Z]: 任意字母&lt;/li&gt;
&lt;li&gt;[A-Z]{3}: 任意字母重复3次&lt;/li&gt;
&lt;li&gt;[A-Z]{3,5}: 任意字母重复至少3次, 至多5次&lt;/li&gt;
&lt;li&gt;[A-Z]*?C: 任意字母重复0次或多次直到第一次遇到字母C&lt;/li&gt;
&lt;li&gt;WYQ|WLQ|WFQ|WYL: 在WYQ, WLQ, WFQ, WYL之中选1个&lt;/li&gt;
&lt;li&gt;^A:  以字母A开头&lt;!-- TEASER_END --&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="定位抗体序列中的CDR"&gt;定位抗体序列中的CDR&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#%E5%AE%9A%E4%BD%8D%E6%8A%97%E4%BD%93%E5%BA%8F%E5%88%97%E4%B8%AD%E7%9A%84CDR"&gt;¶&lt;/a&gt;&lt;/h2&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;在设计抗体时, 如何找出抗体序列中的CDR是一个问题,&lt;/p&gt;
&lt;p&gt;按照&lt;a href="http://www.bioinf.org.uk/abs/#cdrdef"&gt;这个网页&lt;/a&gt;上所描述的方法, 也可以使用对序列进行分析&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="轻链的CDR-L"&gt;轻链的CDR-L&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#%E8%BD%BB%E9%93%BE%E7%9A%84CDR-L"&gt;¶&lt;/a&gt;&lt;/h3&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;ul&gt;
&lt;li&gt;CDR-L1&lt;ul&gt;
&lt;li&gt;Start Approx residue 24&lt;/li&gt;
&lt;li&gt;Residue before    always a Cys&lt;/li&gt;
&lt;li&gt;Residue after always a Trp. Typically Trp-Tyr-Gln, but also, Trp-Leu-Gln, Trp-Phe-Gln, Trp-Tyr-Leu&lt;/li&gt;
&lt;li&gt;Length    10 to 17 residues&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDR-L2&lt;ul&gt;
&lt;li&gt;Start always 16 residues after the end of L1&lt;/li&gt;
&lt;li&gt;Residues before   generally Ile-Tyr, but also, Val-Tyr, Ile-Lys, Ile-Phe&lt;/li&gt;
&lt;li&gt;Length    always 7 residues (except NEW (7FAB) which has a deletion in this region)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDR-L3&lt;ul&gt;
&lt;li&gt;Start always 33 residues after end of L2 (except NEW (7FAB) which has the deletion at the end of CDR-L2)&lt;/li&gt;
&lt;li&gt;Residue before    always Cys&lt;/li&gt;
&lt;li&gt;Residues after    always Phe-Gly-XXX-Gly&lt;/li&gt;
&lt;li&gt;Length    7 to 11 residues&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;以大名鼎鼎的&lt;a href="https://www.drugbank.ca/drugs/DB01270"&gt;Lucentis(Ranibizumab)序列&lt;/a&gt;为例&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;re&lt;/span&gt;
&lt;span class="n"&gt;VL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"DIQLTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPS&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;RFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPP&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;SDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLT&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;LSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC"&lt;/span&gt;
&lt;span class="n"&gt;VH&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"EVQLVESGGGLVQPGGSLRLSCAASGYDFTHYGMNWVRQAPGKGLEWVGWINTYTGEPTY&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;AADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPYYYGTSHWYFDVWGQGTLVT&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;VSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVL&lt;/span&gt;&lt;span class="se"&gt;\&lt;/span&gt;
&lt;span class="s2"&gt;QSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPKSCDKTHL"&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;Ranibizumab Light Chain&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"&amp;gt;Ranibizumab Heavy Chain&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;&amp;gt;Ranibizumab Light Chain
 DIQLTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC
&amp;gt;Ranibizumab Heavy Chain
 EVQLVESGGGLVQPGGSLRLSCAASGYDFTHYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPYYYGTSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPKSCDKTHL
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="CDR-L1"&gt;CDR-L1&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#CDR-L1"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;h5 id="CDR-L1之前的部分"&gt;CDR-L1之前的部分&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#CDR-L1%E4%B9%8B%E5%89%8D%E7%9A%84%E9%83%A8%E5%88%86"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;开始于第24个字母: &lt;ul&gt;
&lt;li&gt;正则表达式: &lt;code&gt;^[A-Z]{24}&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;^表示从字符串开始&lt;/li&gt;
&lt;li&gt;[A-Z]表示一个字母&lt;/li&gt;
&lt;li&gt;{24}, 表示该字母重复了24次.&lt;/li&gt;
&lt;li&gt;但其实CDR序列开始于第24个字母, 它前面应该是24-1=23个字母, 所以应当是^[A-Z]{23}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列之前总是Cys(单字母C): &lt;code&gt;(^([A-Z]{22})C)&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;也就是CDR之前的序列最后一个字母是C, 那么又用掉一个字母, 应当是23-1=22&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;python有个正则表达式的package叫re, 其中re.findall(表达式, 目标字符串), 可以从目标字符串中找到正则表达式所描述的子串, 用括号把正则表达式括起来的话, 就是说这是一个部分&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_before&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(^[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{22}&lt;/span&gt;&lt;span class="s2"&gt;C)"&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_before&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[2]:&lt;/div&gt;



&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;['DIQLTQSPSSLSASVGDRVTITC']&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="CDR-L1序列的部分"&gt;CDR-L1序列的部分&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#CDR-L1%E5%BA%8F%E5%88%97%E7%9A%84%E9%83%A8%E5%88%86"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;长度是10 to 17个字母: &lt;ul&gt;
&lt;li&gt;正则表达式: [A-Z]{10,17}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_itself&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{10,17})"&lt;/span&gt;
&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_before&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_itself&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="c1"&gt;# 注意现在还没有定义结尾部分, 所以会直接找到{10, 17}中最大的17这个值&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[3]:&lt;/div&gt;



&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;[('DIQLTQSPSSLSASVGDRVTITC', 'SASQDISNYLNWYQQKP')]&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h5 id="CDR-L1序列之后的部分"&gt;CDR-L1序列之后的部分&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#CDR-L1%E5%BA%8F%E5%88%97%E4%B9%8B%E5%90%8E%E7%9A%84%E9%83%A8%E5%88%86"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;ul&gt;
&lt;li&gt;序列之后总是Trp(单字母W). 典型的是Trp-Tyr-Gln(WYQ), 但也可能Trp-Leu-Gln(WLQ), Trp-Phe-Gln(WFQ), Trp-Tyr-Leu(WYL): &lt;ul&gt;
&lt;li&gt;正则表达式: &lt;code&gt;(WYQ|WLQ|WFQ|WYL)&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;用|表示或的关系, 考虑到可读性, 我还是把所有的W都写出来了&lt;/li&gt;
&lt;li&gt;如果不想记住语言的优先级, 加括号会更安全一些: &lt;code&gt;((WYQ)|(WLQ)|(WFQ)|(WYL))&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_after&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(WYQ|WLQ|WFQ|WYL)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_L1_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(^[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{22}&lt;/span&gt;&lt;span class="s2"&gt;C)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{10,17})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WYQ|WLQ|WFQ|WYL)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_L2_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="n"&gt;CDR_L3_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="n"&gt;CDR_L_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_L2_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_L3_pattern&lt;/span&gt;

&lt;span class="n"&gt;CDR_Ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_L_pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_Ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;[('DIQLTQSPSSLSASVGDRVTITC', 'SASQDISNYLN', 'WYQ')]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="CDR-L2"&gt;CDR-L2&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#CDR-L2"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;L1结束后16个字母: &lt;ul&gt;
&lt;li&gt;正则表达式: [A-Z]{16}&lt;/li&gt;
&lt;li&gt;但之前有WYQ已经用掉了3个字母, 又以1个字母开头, 所以应当是[A-Z]{12}&lt;/li&gt;
&lt;li&gt;实际操作中我发现这条好像很难匹配上, 不限定字母数字好像更好些, 用[A-Z]*?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列长度7个字母: &lt;ul&gt;
&lt;li&gt;正则表达式: [A-Z]{7}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列之后通常是Ile-Tyr(IY), but also, Val-Tyr(VY), Ile-Lys(IK), Ile-Phe(IF)&lt;ul&gt;
&lt;li&gt;正则表达式: (IY|VY|IK|IF)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(^[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{22}&lt;/span&gt;&lt;span class="s2"&gt;C)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{10,17})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WYQ|WLQ|WFQ|WYL)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_L2_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]&lt;/span&gt;&lt;span class="si"&gt;{7}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(IY|VY|IK|IF)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_L3_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="n"&gt;CDR_L_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_L2_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_L3_pattern&lt;/span&gt;

&lt;span class="n"&gt;CDR_Ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_L_pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_Ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;[('DIQLTQSPSSLSASVGDRVTITC', 'SASQDISNYLN', 'WYQ', 'QKP', 'GKAPKVL', 'IY')]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="CDR-L3"&gt;CDR-L3&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#CDR-L3"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;L2结束后第33个字母开始, 开始前总是Cys(C),&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式: [A-Z]{33}C&lt;/li&gt;
&lt;li&gt;但前面的IY用掉了2个, 开头用掉1个, C用掉1个, 所以是[A-Z]{29}C&lt;/li&gt;
&lt;li&gt;实际操作中我发现这条好像很难匹配上, 不限定字母数字好像更好些, 用[A-Z]*?C&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;序列长度7 to 11 字母:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正则表达式: [A-Z]{7, 11}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列之后总是Phe-Gly-XXX-Gly(FG?G)&lt;ul&gt;
&lt;li&gt;正则表达式: FG[A-Z]G&lt;/li&gt;
&lt;li&gt;XXX表示的是任意, 所以用[A-Z]表示&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(^[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{22}&lt;/span&gt;&lt;span class="s2"&gt;C)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{10,17})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WYQ|WLQ|WFQ|WYL)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_L2_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]&lt;/span&gt;&lt;span class="si"&gt;{7}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(IY|VY|IK|IF)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_L3_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?C)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{7,11})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(FG[A-Z]G)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_L_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_L1_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_L2_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_L3_pattern&lt;/span&gt;

&lt;span class="n"&gt;CDR_Ls&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_L_pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;CDR_L1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_Ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CDR_L2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_Ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CDR_L3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_Ls&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_Ls&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_L1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;CDR_L2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;CDR_L3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;[('DIQLTQSPSSLSASVGDRVTITC', 'SASQDISNYLN', 'WYQ', 'QKP', 'GKAPKVL', 'IY', 'FTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYC', 'QQYSTVPWT', 'FGQG')]
SASQDISNYLN GKAPKVL QQYSTVPWT
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="重链的CDR-H"&gt;重链的CDR-H&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#%E9%87%8D%E9%93%BE%E7%9A%84CDR-H"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;CDR-H1&lt;ul&gt;
&lt;li&gt;Start Approx residue 26 (always 4 after a Cys) [Chothia / AbM defintion]; Kabat definition starts 5 residues later&lt;/li&gt;
&lt;li&gt;Residues before   always Cys-XXX-XXX-XXX&lt;/li&gt;
&lt;li&gt;Residues after    always a Trp. Typically Trp-Val, but also, Trp-Ile, Trp-Ala&lt;/li&gt;
&lt;li&gt;Length    10 to 12 residues [AbM definition]; Chothia definition excludes the last 4 residues&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDR-H2&lt;ul&gt;
&lt;li&gt;Start always 15 residues after the end of Kabat / AbM definition) of CDR-H1&lt;/li&gt;
&lt;li&gt;Residues before   typically Leu-Glu-Trp-Ile-Gly, but a number of variations&lt;/li&gt;
&lt;li&gt;Residues after    Lys/Arg-Leu/Ile/Val/Phe/Thr/Ala-Thr/Ser/Ile/Ala&lt;/li&gt;
&lt;li&gt;Length    Kabat definition 16 to 19 residues; AbM (and recent Chothia) definition ends 7 residues earlier&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;CDR-H3&lt;ul&gt;
&lt;li&gt;Start always 33 residues after end of CDR-H2 (always 2 after a Cys)&lt;/li&gt;
&lt;li&gt;Residues before   always Cys-XXX-XXX (typically Cys-Ala-Arg)&lt;/li&gt;
&lt;li&gt;Residues after    always Trp-Gly-XXX-Gly&lt;/li&gt;
&lt;li&gt;Length    3 to 25(!) residues&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="CDR-H1"&gt;CDR-H1&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#CDR-H1"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;开始于26个字母后, 序列前总是 Cys-XXX-XXX-XXX: &lt;ul&gt;
&lt;li&gt;正则表达式: ^[A-Z]{21}C[A-Z]{3}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;长度10-12个字母: &lt;ul&gt;
&lt;li&gt;正则表达式: [A-Z]{10,12}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列后总是Trp(W). 典型Trp-Val(WV), 但也可能Trp-Ile(WI), Trp-Ala(WA)&lt;ul&gt;
&lt;li&gt;正则表达式: (WV|WI|WA)&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CDR_H1_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(^[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{21}&lt;/span&gt;&lt;span class="s2"&gt;C[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{3}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{10,12})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WV|WI|WA)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_H2_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="n"&gt;CDR_H3_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="n"&gt;CDR_H_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_H1_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_H2_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_H3_pattern&lt;/span&gt;

&lt;span class="n"&gt;CDR_Hs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_H_pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_Hs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;[('EVQLVESGGGLVQPGGSLRLSCAAS', 'GYDFTHYGMN', 'WV')]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="CDR-H2"&gt;CDR-H2&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#CDR-H2"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;开始总是在CDR-H1结束后15个字母, 序列开始前典型是Leu-Glu-Trp-Ile-Gly(LEWIG), 但也有一堆变化(WTF)&lt;ul&gt;
&lt;li&gt;正则表达式: [A-Z]*?LEWIG&lt;/li&gt;
&lt;li&gt;此处重重吐槽下, WTF表示what the fuck! 为什么生物学不找人待见, 别说生物学了, 连有机化学都是!说个什么规律, 结果反常情况比规律还多&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;长度16到19(Kabat定义), 或者7(AbM, Chothia定义)&lt;ul&gt;
&lt;li&gt;正则表达式: [A-Z]{7,19}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列之后Lys/Arg-Leu/Ile/Val/Phe/Thr/Ala-Thr/Ser/Ile/Ala, 看起来生物学家也使用某种正则表达式的雏形了, 这句话的意思是Lys或者Arg, 然后Leu/Ile/Val/Phe/Thr/Ala之中的1个, 然后Thr/Ser/Ile/Ala之中的一个&lt;ul&gt;
&lt;li&gt;正则表达式: &lt;code&gt;[K|R][L|I|V|F|T|A][T|S|I|A]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CDR_H1_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(^[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{21}&lt;/span&gt;&lt;span class="s2"&gt;C[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{3}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{10,12})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WV|WI|WA)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_H2_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{7,19})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([K|R][L|I|V|F|T|A][T|S|I|A])"&lt;/span&gt;
&lt;span class="n"&gt;CDR_H3_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
&lt;span class="n"&gt;CDR_H_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_H1_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_H2_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_H3_pattern&lt;/span&gt;

&lt;span class="n"&gt;CDR_Hs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_H_pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_Hs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;[('EVQLVESGGGLVQPGGSLRLSCAAS', 'GYDFTHYGMN', 'WV', 'RQAPGKGLEW', 'VGWINTYTGEPTYAADFKR', 'RFT')]
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h4 id="CDR-H3"&gt;CDR-H3&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#CDR-H3"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;开时于CDR-H2后33个字母, 序列前总是Cys-XXX-XXX (典型是 Cys-Ala-Arg): &lt;ul&gt;
&lt;li&gt;正则表达式: &lt;code&gt;[A-Z]*? C[A-Z]{2}&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;长度通常是3到25个字母: &lt;ul&gt;
&lt;li&gt;正则表达式: [A-Z]{3,25}&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;序列之后总是Trp-Gly-XXX-Gly&lt;ul&gt;
&lt;li&gt;正则表达式: WG[A-Z]G&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;CDR_H1_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(^[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{21}&lt;/span&gt;&lt;span class="s2"&gt;C[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{3}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{10,12})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WV|WI|WA)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_H2_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{7,19})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([K|R][L|I|V|F|T|A][T|S|I|A])"&lt;/span&gt;
&lt;span class="n"&gt;CDR_H3_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?C[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{2}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{3,25})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WG[A-Z]G)"&lt;/span&gt;
&lt;span class="n"&gt;CDR_H_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_H1_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_H2_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR_H3_pattern&lt;/span&gt;

&lt;span class="n"&gt;CDR_Hs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_H_pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;VH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_Hs&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;CDR_H1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_Hs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CDR_H2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_Hs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;CDR_H3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR_Hs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_H1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;CDR_H2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;CDR_H3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;[('EVQLVESGGGLVQPGGSLRLSCAAS', 'GYDFTHYGMN', 'WV', 'RQAPGKGLEW', 'VGWINTYTGEPTYAADFKR', 'RFT', 'FSLDTSKSTAYLQMNSLRAEDTAVYYCAK', 'YPYYYGTSHWYFDV', 'WGQG')]
GYDFTHYGMN VGWINTYTGEPTYAADFKR YPYYYGTSHWYFDV
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="识别CDR的函数"&gt;识别CDR的函数&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#%E8%AF%86%E5%88%ABCDR%E7%9A%84%E5%87%BD%E6%95%B0"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;综上, 可以整合成一组函数, 专门用来识别CDR&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_CDR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;CDRs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;re&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;findall&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; 
        &lt;span class="n"&gt;CDR1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDRs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;CDR2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDRs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;CDR3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDRs&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;CDR1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="n"&gt;CDR2&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
        &lt;span class="n"&gt;CDR3&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;CDR1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;CDR2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;CDR3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;LC_CDR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;CDR1_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(^[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{22}&lt;/span&gt;&lt;span class="s2"&gt;C)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{10,17})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WYQ|WLQ|WFQ|WYL)"&lt;/span&gt;
    &lt;span class="n"&gt;CDR2_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]&lt;/span&gt;&lt;span class="si"&gt;{7}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(IY|VY|IK|IF)"&lt;/span&gt;
    &lt;span class="n"&gt;CDR3_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?C)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{7,11})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(FG[A-Z]G)"&lt;/span&gt;
    &lt;span class="n"&gt;CDR_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR1_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR2_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR3_pattern&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_CDR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;HC_CDR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;CDR1_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"(^[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{21}&lt;/span&gt;&lt;span class="s2"&gt;C[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{3}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{10,12})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WV|WI|WA)"&lt;/span&gt;
    &lt;span class="n"&gt;CDR2_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{7,19})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([K|R][L|I|V|F|T|A][T|S|I|A])"&lt;/span&gt;
    &lt;span class="n"&gt;CDR3_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]*?C[A-Z]&lt;/span&gt;&lt;span class="si"&gt;{2}&lt;/span&gt;&lt;span class="s2"&gt;)"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"([A-Z]{3,25})"&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="s2"&gt;"(WG[A-Z]G)"&lt;/span&gt;
    &lt;span class="n"&gt;CDR_pattern&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;CDR1_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR2_pattern&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;&lt;span class="n"&gt;CDR3_pattern&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;get_CDR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;CDR_pattern&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;seq&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;还是用Lucentis测试一下&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VL&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;LC_CDR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VL&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;DIQLTQSPSSLSASVGDRVTITCSASQDISNYLNWYQQKPGKAPKVLIYFTSSLHSGVPSRFSGSGSGTDFTLTISSLQPEDFATYYCQQYSTVPWTFGQGTKVEIKRTVAAPSVFIFPPSDEQLKSGTASVVCLLNNFYPREAKVQWKVDNALQSGNSQESVTEQDSKDSTYSLSSTLTLSKADYEKHKVYACEVTHQGLSSPVTKSFNRGEC
['SASQDISNYLN', 'GKAPKVL', 'QQYSTVPWT']
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [12]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VH&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;HC_CDR&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;VH&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;EVQLVESGGGLVQPGGSLRLSCAASGYDFTHYGMNWVRQAPGKGLEWVGWINTYTGEPTYAADFKRRFTFSLDTSKSTAYLQMNSLRAEDTAVYYCAKYPYYYGTSHWYFDVWGQGTLVTVSSASTKGPSVFPLAPSSKSTSGGTAALGCLVKDYFPEPVTVSWNSGALTSGVHTFPAVLQSSGLYSLSSVVTVPSSSLGTQTYICNVNHKPSNTKVDKKVEPKSCDKTHL
['GYDFTHYGMN', 'VGWINTYTGEPTYAADFKR', 'YPYYYGTSHWYFDV']
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="总结"&gt;总结&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/#%E6%80%BB%E7%BB%93"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;在这个练习中使用了一些正则表达式:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;[A-Z]: 任意字母&lt;/li&gt;
&lt;li&gt;[A-Z]{3}: 任意字母重复3次&lt;/li&gt;
&lt;li&gt;[A-Z]{3,5}: 任意字母重复至少3次, 至多5次&lt;/li&gt;
&lt;li&gt;[A-Z]*?C: 任意字母重复0次或多次直到第一次遇到字母C&lt;/li&gt;
&lt;li&gt;WYQ|WLQ|WFQ|WYL: 在WYQ, WLQ, WFQ, WYL之中选1个&lt;/li&gt;
&lt;li&gt;^A:  以字母A开头&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;仅仅使用这些就已经可以从抗体序列中找到CDR了&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>python</category><category>现代眼科医生知识扩展包</category><guid>https://goldengrape.github.io/posts/python/reg101-for-ophthalmologist/</guid><pubDate>Sun, 11 Mar 2018 04:00:00 GMT</pubDate></item><item><title>Mac上双击打开jupyter文件</title><link>https://goldengrape.github.io/posts/bulabula/double-click-open-ipynb/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;jupyter的文件是.ipynb文件, 实际上是纯文本写的json, 但要按可编辑可运行的方式打开它, 有几种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在命令行运行jupyter notebook 文件名&lt;ul&gt;
&lt;li&gt;或者在命令行运行jupyter lab 文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用nteract打开&lt;/li&gt;
&lt;li&gt;在atom里安装jupyter notebook package, 然后用atom打开.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种最佳, 但不方便, 我不是常规打开终端的. 第二种有时候特慢, 而且如果没有设置好kernel的话, 运行jupyter文件总是容易报错. 第三种大概比第二种略差, 而且我每次装这个package的时候都会被杀毒软件拦下来.&lt;/p&gt;
&lt;p&gt;我很希望有个能够双击打开.ipynb文件的方式. 打开以后还能够正常编辑和运行. 上推一问. 果然在&lt;a href="https://twitter.com/xuanyuanzhiyuan/status/971321483896213504"&gt;@xuanyuanzhiyuan&lt;/a&gt;和&lt;a href="https://twitter.com/kyleehee/status/971317968822038528"&gt;@kyleehee&lt;/a&gt;的指导下成功了. 写blog以记录之.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开Automator(现在中文叫'自动操作')&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建-&amp;gt;应用程序
&lt;img alt="屏幕快照 2018-03-07 17.58.12" src="https://i.loli.net/2018/03/07/5a9fc9e347028.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;选取"资源库"-&amp;gt;"实用工具"-&amp;gt;"运行AppleScipt"
&lt;img alt="屏幕快照 2018-03-07 17.58.33" src="https://i.loli.net/2018/03/07/5a9fc9e2c3842.png"&gt;&lt;/li&gt;
&lt;li&gt;在右侧"运行AppleScipt"栏里写下:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;on run {input}
   set the_path to POSIX path of input
   set cmd to "jupyter notebook " &amp;amp; quoted form of the_path
   tell application "System Events" to set terminalIsRunning to exists application process "Terminal"
   tell application "Terminal"
      activate
      if terminalIsRunning is true then
         do script with command cmd
      else
         do script with command cmd in window 1
      end if
   end tell
end run
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="屏幕快照 2018-03-07 17.59.37" src="https://i.loli.net/2018/03/07/5a9fc9e29141c.png"&gt;
注意"jupyter notebook "末尾一定要有空格. 也可以使用jupyter lab, 看你喜欢. 但前提一定是在进入终端以后可以直接运行jupyter的状态, 如果你需要用anaconda先切换到某个环境下再用jupyter, 那么需要在前面加上另一条do script, 引号里是你需要先运行的命令, 比如要启动myenv这个环境, 平时可能需要输入的是&lt;code&gt;source activate myenv&lt;/code&gt;, 注意一条命令以后貌似需要delay一下, 后面的数字看情况.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;do script "source activate myenv"
deply 3
do script with command cmd
&lt;/pre&gt;


&lt;p&gt;加入以后完整的是这样的:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;on run {input}
   set the_path to POSIX path of input
   set cmd to "jupyter notebook " &amp;amp; quoted form of the_path
   tell application "System Events" to set terminalIsRunning to exists application process "Terminal"
   tell application "Terminal"
      activate
      if terminalIsRunning is true then
         do script "source activate myenv"
         deply 3
         do script with command cmd
      else
         do script "source activate myenv" in window 1
         deply 3
         do script with command cmd in window 1
      end if
   end tell
end run
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;保存成一个.app文件. 就成了一个应用程序了. 放进应用程序文件夹, 例如叫jupyter_launcher.app&lt;/li&gt;
&lt;li&gt;随便找个.ipynb文件, 右键-&amp;gt;显示简介-&amp;gt;打开方式-&amp;gt;其他, 在应用程序里找到jupyter_launcher,
&lt;img alt="屏幕快照 2018-03-07 18.50.54" src="https://i.loli.net/2018/03/07/5a9fc9e29a031.png"&gt;&lt;/li&gt;
&lt;li&gt;然后选择"全部更改"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全套完成, 以后就可以双击直接打开jupyter文件了. 会自动先打开一个终端, 然后用jupyter notebook运行, 文件在浏览器里可以显示和编辑并且运行.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考:
https://superuser.com/questions/139352/mac-os-x-how-to-open-vim-in-terminal-when-double-click-on-a-file&lt;/li&gt;
&lt;/ul&gt;
&lt;!--
.. title: Mac上双击打开jupyter文件
.. slug: double-click-open-ipynb
.. date: 2018-3-7 19:00 UTC+08:00
.. tags: python,
.. category:
.. link:
.. description:
.. type: text
--&gt;

&lt;p&gt;jupyter的文件是.ipynb文件, 实际上是纯文本写的json, 但要按可编辑可运行的方式打开它, 有几种方式:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在命令行运行jupyter notebook 文件名&lt;ul&gt;
&lt;li&gt;或者在命令行运行jupyter lab 文件名&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用nteract打开&lt;/li&gt;
&lt;li&gt;在atom里安装jupyter notebook package, 然后用atom打开.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;第一种最佳, 但不方便, 我不是常规打开终端的. 第二种有时候特慢, 而且如果没有设置好kernel的话, 运行jupyter文件总是容易报错. 第三种大概比第二种略差, 而且我每次装这个package的时候都会被杀毒软件拦下来.&lt;/p&gt;
&lt;p&gt;我很希望有个能够双击打开.ipynb文件的方式. 打开以后还能够正常编辑和运行. 上推一问. 果然在&lt;a href="https://twitter.com/xuanyuanzhiyuan/status/971321483896213504"&gt;@xuanyuanzhiyuan&lt;/a&gt;和&lt;a href="https://twitter.com/kyleehee/status/971317968822038528"&gt;@kyleehee&lt;/a&gt;的指导下成功了. 写blog以记录之.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;打开Automator(现在中文叫'自动操作')&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;新建-&amp;gt;应用程序
&lt;img alt="屏幕快照 2018-03-07 17.58.12" src="https://i.loli.net/2018/03/07/5a9fc9e347028.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;选取"资源库"-&amp;gt;"实用工具"-&amp;gt;"运行AppleScipt"
&lt;img alt="屏幕快照 2018-03-07 17.58.33" src="https://i.loli.net/2018/03/07/5a9fc9e2c3842.png"&gt;&lt;/li&gt;
&lt;li&gt;在右侧"运行AppleScipt"栏里写下:&lt;/li&gt;
&lt;/ol&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;on run {input}
   set the_path to POSIX path of input
   set cmd to "jupyter notebook " &amp;amp; quoted form of the_path
   tell application "System Events" to set terminalIsRunning to exists application process "Terminal"
   tell application "Terminal"
      activate
      if terminalIsRunning is true then
         do script with command cmd
      else
         do script with command cmd in window 1
      end if
   end tell
end run
&lt;/pre&gt;


&lt;p&gt;&lt;img alt="屏幕快照 2018-03-07 17.59.37" src="https://i.loli.net/2018/03/07/5a9fc9e29141c.png"&gt;
注意"jupyter notebook "末尾一定要有空格. 也可以使用jupyter lab, 看你喜欢. 但前提一定是在进入终端以后可以直接运行jupyter的状态, 如果你需要用anaconda先切换到某个环境下再用jupyter, 那么需要在前面加上另一条do script, 引号里是你需要先运行的命令, 比如要启动myenv这个环境, 平时可能需要输入的是&lt;code&gt;source activate myenv&lt;/code&gt;, 注意一条命令以后貌似需要delay一下, 后面的数字看情况.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;do script "source activate myenv"
deply 3
do script with command cmd
&lt;/pre&gt;


&lt;p&gt;加入以后完整的是这样的:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;on run {input}
   set the_path to POSIX path of input
   set cmd to "jupyter notebook " &amp;amp; quoted form of the_path
   tell application "System Events" to set terminalIsRunning to exists application process "Terminal"
   tell application "Terminal"
      activate
      if terminalIsRunning is true then
         do script "source activate myenv"
         deply 3
         do script with command cmd
      else
         do script "source activate myenv" in window 1
         deply 3
         do script with command cmd in window 1
      end if
   end tell
end run
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;保存成一个.app文件. 就成了一个应用程序了. 放进应用程序文件夹, 例如叫jupyter_launcher.app&lt;/li&gt;
&lt;li&gt;随便找个.ipynb文件, 右键-&amp;gt;显示简介-&amp;gt;打开方式-&amp;gt;其他, 在应用程序里找到jupyter_launcher,
&lt;img alt="屏幕快照 2018-03-07 18.50.54" src="https://i.loli.net/2018/03/07/5a9fc9e29a031.png"&gt;&lt;/li&gt;
&lt;li&gt;然后选择"全部更改"&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;全套完成, 以后就可以双击直接打开jupyter文件了. 会自动先打开一个终端, 然后用jupyter notebook运行, 文件在浏览器里可以显示和编辑并且运行.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考:
https://superuser.com/questions/139352/mac-os-x-how-to-open-vim-in-terminal-when-double-click-on-a-file&lt;/li&gt;
&lt;/ul&gt;
&lt;hr&gt;
&lt;p&gt;&lt;a href="https://press.one/file/v?s=4e99e642621a7c01ada7d1ab124068ff803c553cab40e30808c5509f20ef33c90658bb61c60e96af12374f5eb40b0719fdffef99c6627811b68d68a3c37b64890&amp;amp;h=a35b8dd4dbfb7e521c41eaa53d0875b3cf53a426f911ae666bcd0302ccd4721c&amp;amp;a=79c1846bc532ec0cf61ad0f1f5604a80a1387aca&amp;amp;f=P1&amp;amp;v=2"&gt;My Press.one Signature&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><category>python</category><guid>https://goldengrape.github.io/posts/bulabula/double-click-open-ipynb/</guid><pubDate>Wed, 07 Mar 2018 11:00:00 GMT</pubDate></item><item><title>magic leap VR/AR与眼科检查专利解读(0)</title><link>https://goldengrape.github.io/posts/bulabula/US20160270656A1-0/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;作为Magic leap的黑粉, 我又一次被它给惹到了. 这回是一个&lt;a href="https://patents.google.com/patent/US20160270656A1"&gt;专利US20160270656A1&lt;/a&gt; .&lt;/p&gt;
&lt;p&gt;题目是Methods and systems for diagnosing and treating health ailments, 在这个专利里足足有100项权利要求, 几乎覆盖了所有能够使用头戴显示器做的健康检查项目. 看起来Magic leap是铁了心要当专利流氓了.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于VR/AR/?R的从业者, 这个专利有助于提示你头戴显示器技术能够用在诊断检查的哪些项目上;&lt;/li&gt;
&lt;li&gt;对于临床医生, 有助于了解未来检查设备都有可能往哪些小型化方向进展.&lt;/li&gt;
&lt;li&gt;对于互联网医疗的从业者, 有助于理解数据应当如何获取.&lt;/li&gt;
&lt;li&gt;对于发明家和专利律师, 咱们一起给丫无效掉吧.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这份专利权利要求100个, 插图50张, PDF194页, 我将分几次来讲解其中所涉及到的技术与原理.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;独立权利要求为第1, 67, 70, 98项, 分别描述了头戴显示器的基本物理结构.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;第1. 一个头戴的增强现实显示器, 有光感受器去测量来自用户眼的反射光信号, 以及相应的处理器&lt;/li&gt;
&lt;li&gt;第67. 在头戴增强现实显示器基础上, 增加了声音发生器, 音频传感器, 以及相应的处理器&lt;/li&gt;
&lt;li&gt;第70. 这次是治疗系统了. 在增强现实显示器上, 用图像进行治疗.&lt;/li&gt;
&lt;li&gt;第98. 增加了远程连接医生的功能, 医生可以看病人的眼.&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;剩余的从属权利要求都是在这些物理结构上进行功能的添加.&lt;/p&gt;
&lt;h2&gt;第一部分&lt;/h2&gt;
&lt;p&gt;权利要求关系图:&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/magicleap_patent.png"&gt;&lt;/p&gt;
&lt;p&gt;权利要求2提到了用波导. (喂! 你家不是抖光纤的么). 权利要求3提到用堆叠的波导. 权利要求4说了光检测器就是要拍来自用户眼的反射光信号, 5提到了&lt;strong&gt;眼球运动追踪&lt;/strong&gt;, 6提到了有向用户眼的照明光, 7说照明光可以是&lt;strong&gt;不可见光&lt;/strong&gt;. 8说可以用红外光. 9说可以用&lt;strong&gt;多波长&lt;/strong&gt;.&lt;/p&gt;
&lt;p&gt;权利要求10到14, 把上面用波导的事情用抖光纤又说了一遍.&lt;/p&gt;
&lt;p&gt;注意多波长系统, 在14中再次提到可以用多波长光, 可以提供眼内组织的深度信息. 眼科有多波长眼底照相技术. 比如&lt;a href="http://bjnimo.com/upLoad/down/day_161024/201610241650249901.pdf"&gt;随手一篇&lt;/a&gt;, 多波长成像能够分出视网膜中不同层次的信息. 最近几年才开始应用到临床.&lt;/p&gt;
&lt;p&gt;未完待续&lt;/p&gt;
&lt;!-- EOF --&gt;&lt;/div&gt;</description><category>VR</category><guid>https://goldengrape.github.io/posts/bulabula/US20160270656A1-0/</guid><pubDate>Mon, 05 Mar 2018 15:30:00 GMT</pubDate></item><item><title>如何制作透明冰块</title><link>https://goldengrape.github.io/posts/bulabula/how-to-make-clear-ice/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;目的: 制作透明的冰块&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;结果: 成品是这样的
&lt;img alt="WechatIMG44" src="https://i.loli.net/2018/03/03/5a99f82bf22f8.jpeg"&gt;
冰是非常透明的, 冰的折射率是1.31, 水是1.33, 所以冰与水的分界仔细看的话还是可以看出来的.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;教程重新撰写中
&lt;!--
* 材料与方法:
&lt;!-- TEASER_END --&gt;
0. 材料:
&lt;em&gt; 塑料瓶
&lt;/em&gt; 塑料袋
&lt;em&gt; 气泡包装纸
&lt;/em&gt; 冰箱&lt;/p&gt;
&lt;p&gt;1.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;取塑料瓶一个, 瓶底剪掉.&lt;/li&gt;
&lt;li&gt;瓶盖钻孔.(并非必要)&lt;/li&gt;
&lt;li&gt;取塑料袋一只. (并非必要)
&lt;img alt="WechatIMG9" src="https://i.loli.net/2018/03/03/5a99f82c0735c.jpeg"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;2.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;塑料袋穿过瓶盖, 盖好. (并非必要)
&lt;img alt="WechatIMG10" src="https://i.loli.net/2018/03/03/5a99f82c2a3a4.jpeg"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;3.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;用包装气泡纸把瓶子裹起来. 注意把瓶盖一端裹好. 没有气泡纸的话下次收快递的时候记得留一些.
&lt;img alt="WechatIMG11" src="https://i.loli.net/2018/03/03/5a99f82c1c512.jpeg"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;4.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;塞进另一个大号的杯子&lt;/li&gt;
&lt;li&gt;倒水. 倒多少随便, 别溢出来就行.
&lt;img alt="WechatIMG12" src="https://i.loli.net/2018/03/03/5a99f82c2aad9.jpeg"&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;5.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;放入冰箱冷冻, 至少一晚上. 这一块是大约冻了10小时才有这么大, 要想把整瓶水都冻好, 我觉得要24小时吧.
&lt;img alt="WechatIMG13" src="https://i.loli.net/2018/03/03/5a99f82c06624.jpeg"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;讨论&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以就显得钻瓶盖的动作有些多余了, 除非特别有耐心, 把所有的水都冻成冰, 那么杂质就会被挤到塑料袋里去. 到时候拧下瓶盖就去除了.&lt;/p&gt;
&lt;p&gt;结冰的过程太普通了, 以至于容易忘了其实结冰就是晶体生长过程啊, 和单晶硅生长是一类的过程. --&amp;gt;&lt;/p&gt;&lt;/div&gt;</description><category>life science</category><guid>https://goldengrape.github.io/posts/bulabula/how-to-make-clear-ice/</guid><pubDate>Sat, 03 Mar 2018 01:20:00 GMT</pubDate></item><item><title>2018年刑侦推理试题解答</title><link>https://goldengrape.github.io/posts/python/CSI-exam/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;2018年刑侦推理试题: 
&lt;img src="https://i.loli.net/2018/03/01/5a982103b9db2.jpeg" alt="question.jpeg"&gt;
&lt;!-- TEASER_END --&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="解题思路"&gt;解题思路&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E8%A7%A3%E9%A2%98%E6%80%9D%E8%B7%AF"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;以此题为例, 做一个简单的python小教程.&lt;/p&gt;
&lt;h3 id='提取"第x题的答案"'&gt;提取"第x题的答案"&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E6%8F%90%E5%8F%96%22%E7%AC%ACx%E9%A2%98%E7%9A%84%E7%AD%94%E6%A1%88%22"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;首先, 观察题目中经常出现的说法是: "第x题的答案"怎样怎样, 那么常用的一个过程就是要提取第x题的答案&lt;/p&gt;
&lt;p&gt;在python中可以使用的一个数据结构叫做列表list, 列表使用方括号括起来的一些元素, 要提取其中的内容用列表名[序号]就可以提取了. 比如&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [1]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mf"&gt;0.1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;1.2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;2.3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;3.4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mf"&gt;4.5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# "#"号后面的部分是注释, 不会进入计算, 我后面会在程序中使用注释说明&lt;/span&gt;
&lt;span class="n"&gt;sample&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 注意python的计数是从第0项开始的, 所以第2项是2.3而不是1.2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[1]:&lt;/div&gt;



&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;2.3&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;如果用数字0, 1, 2, 3来表示ABCD的话, 就可以把所有的答案放进一个列表里, 提取某一题的答案就是提取列表中的第几项, 注意python的列表是从第0项开始计数的, 为了读题中不引起混淆, 我将列表的第0项设定成空项.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [2]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 举例, 假设第1题到第5题的答案分别是AABDC, 用0, 1, 2, 3来表示ABCD&lt;/span&gt;
&lt;span class="n"&gt;sample_answer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="c1"&gt;# 提取第3题的答案&lt;/span&gt;
&lt;span class="n"&gt;sample_answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[2]:&lt;/div&gt;



&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;1&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第1题"&gt;第1题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC1%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;这道题的答案是: A.A, B.B, C.C, D.C&lt;/p&gt;
&lt;p&gt;题目中没有给出限定, 所以暂时先不管它&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第2题"&gt;第2题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC2%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;第5题的答案是: A.C, B.D, C.A, D.B&lt;/p&gt;
&lt;p&gt;在第2题里, 如何描述A-&amp;gt;C,B-&amp;gt;D, C-&amp;gt;A, D-&amp;gt;B的映射关系呢? 可以用一个python一个数据结构叫做字典. 
字典是用{ }括起来的一组元素, 每一个元素里有一个key:value的数据对, 表示从key到value的映射&lt;/p&gt;
&lt;p&gt;那么要表示如何描述A-&amp;gt;C,B-&amp;gt;D, C-&amp;gt;A, D-&amp;gt;B的映射关系, 可以建立一个字典:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [3]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a2_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;# A.C&lt;/span&gt;
         &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;# B.D&lt;/span&gt;
         &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;# C.A&lt;/span&gt;
         &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;# D.B&lt;/span&gt;
&lt;span class="n"&gt;a2_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 字典内容的提取, 是使用字典名[key],就可以提取出value&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt output_prompt"&gt;Out[3]:&lt;/div&gt;



&lt;div class="output_text output_subarea output_execute_result"&gt;
&lt;pre&gt;3&lt;/pre&gt;
&lt;/div&gt;

&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;用0, 1, 2, 3代表ABCD&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果第二题选A, 那么就是说第5题的答案是C, 也就是a2_dict[0]的值2&lt;/li&gt;
&lt;li&gt;如果第二题选B, 那么就是说第5题的答案是D, 也就是a2_dict[1]的值3&lt;/li&gt;
&lt;li&gt;如果第二题选C, 那么就是说第5题的答案是A, 也就是a2_dict[2]的值0&lt;/li&gt;
&lt;li&gt;如果第二题选D, 那么就是说第5题的答案是B, 也就是a2_dict[3]的值2&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;假定我们已经知道了所有的答案, 放在answer这个列表里, 那么第2题的答案是answer[2], 第5题的答案是answer[5],&lt;/p&gt;
&lt;p&gt;那么第2题的答案所对应的值就是a2_dict[ answer[2] ], 判断第2题是不是做对了, 就要看&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a2_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;是真还是假&lt;/p&gt;
&lt;p&gt;我将这个判断过程写成一个"函数", 这个函数负责看第2题是否做对了. python的函数定义是用&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="err"&gt;函数名&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="err"&gt;参数表&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="err"&gt;空&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="err"&gt;格写函数内容&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="err"&gt;返回结果&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a2_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;# A.C&lt;/span&gt;
             &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;# B.D&lt;/span&gt;
             &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="c1"&gt;# C.A&lt;/span&gt;
             &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;&lt;span class="c1"&gt;# D.B&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a2_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c1"&gt;# 一般写好一个函数, 应当测试一下是否写对了. &lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为假&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为真, 假定第2题的答案是0, 对应第5题的答案是2&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;False
True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第3题"&gt;第3题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC3%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;以下选项中哪一题的答案与其他三项不同:
A. 第3题, B. 第6题, C. 第2题, D. 第4题&lt;/p&gt;
&lt;p&gt;当然我们可以去一个一个比对, 但python中对列表有一个简单的判断命令叫in,如果元素在这个列表中, 那么in命令就返回真, 否则为假.&lt;/p&gt;
&lt;p&gt;如果把第3题, 第6题, 第2题, 第4题的答案放在一个列表中, 那么有&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a3_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;如果选A, 那么就看answer[3] in [            answer[6], answer[2], answer[4] ]是否为假&lt;/li&gt;
&lt;li&gt;如果选B, 那么就看answer[6] in [ answer[3],            answer[2], answer[4] ]是否为假&lt;/li&gt;
&lt;li&gt;如果选C, 那么就看answer[2] in [ answer[3], answer[6],            answer[4] ]是否为假&lt;/li&gt;
&lt;li&gt;如果选D, 那么就看answer[4] in [ answer[3], answer[6], answer[2]            ]是否为假&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;为了产生一个没有某一项的列表, 我们可以将列表中的某一项pop出去, 剩下的a3_list. 所以:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a3_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
    &lt;span class="c1"&gt;# 先提取出来要检查的项&lt;/span&gt;
    &lt;span class="n"&gt;refer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;a3_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="c1"&gt;# 在把这一项从列表里pop掉&lt;/span&gt;
    &lt;span class="n"&gt;a3_list&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pop&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="c1"&gt;# 看看要检查的项是否在剩下的列表中&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;refer&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;a3_list&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test3&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当是真&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test3&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当是假&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;True
False
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第4题"&gt;第4题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC4%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;以下选项中哪两题的答案相同:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. 第1,5题 &lt;/li&gt;
&lt;li&gt;B. 第2,7题&lt;/li&gt;
&lt;li&gt;C. 第1,9题&lt;/li&gt;
&lt;li&gt;D. 第6,10题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这道题其实和第2题的思路一样, 建立一个映射关系的字典,&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;a4_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后验证题目中所说的东西即可.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果选A, 那么看a4_dict[0]中的两项[1, 5], &lt;ul&gt;
&lt;li&gt;其中1是a4_dict[0]这个列表的第0项, 第1题的答案就是&lt;code&gt;answer[ a4_dict[0][0] ]&lt;/code&gt; , &lt;/li&gt;
&lt;li&gt;其中5是a4_dict[0]这个列表的第1项, 第5题的答案就是&lt;code&gt;answer[ a4_dict[0][1] ]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;如果选B, 那么看a4_dict[1]中的两项[2, 7], &lt;ul&gt;
&lt;li&gt;其中2是a4_dict[0]这个列表的第0项, 第2题的答案就是&lt;code&gt;answer[ a4_dict[0][0] ]&lt;/code&gt; , &lt;/li&gt;
&lt;li&gt;其中7是a4_dict[0]这个列表的第1项, 第7题的答案就是&lt;code&gt;answer[ a4_dict[0][1] ]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a4_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;a4_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;a4_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [9]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;test4&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 应当为假&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;test4&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="c1"&gt;# 应当为真&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;False
True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第5题"&gt;第5题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC5%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;以下选项中哪一题的答案与本题相同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. 第8题,&lt;/li&gt;
&lt;li&gt;B. 第4题,&lt;/li&gt;
&lt;li&gt;C. 第9题,&lt;/li&gt;
&lt;li&gt;D. 第7题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;想必已经越来越熟练了, 先建立一个映射关系字典:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    a5_dict={0:8,
             1:4,
             2:9,
             3:7}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;本题的答案当然就是answer[5],&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果选A, 那么就是看第8题的答案, 也就是answer[ a5_dict[0] ]&lt;/li&gt;
&lt;li&gt;如果选B, 那么就是看第4题的答案, 也就是answer[ a5_dict[1] ]&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [10]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a5_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;a5_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test5&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为真, 第5题的答案与第8题都是A&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test5&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为假, 第5题的答案选的是B, 但与第4题的答案不同&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;True
False
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第6题"&gt;第6题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC6%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;以下选项中哪两题的答案与第8题相同&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. 第[2,4]题,&lt;/li&gt;
&lt;li&gt;B. 第[1,6]题,&lt;/li&gt;
&lt;li&gt;C. 第[3,10]题,&lt;/li&gt;
&lt;li&gt;D. 第[5,9]题. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;出题人已经开始重复自己了, 这道题和第4题区别不大.&lt;/p&gt;
&lt;p&gt;建立一个映射字典:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    a6_dict={0:[2,4],
             1:[1,6],
             2:[3,10],
             3:[5,9]}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;第8题的答案当然是answer[8],&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果选A, 那么answer[8]应当等于a6_dict[0]中的第2, 4题的答案, &lt;ul&gt;
&lt;li&gt;其中2是&lt;code&gt;a6_dict[0][0]&lt;/code&gt;, 第2题的答案也就是&lt;code&gt;answer[a6_dict[0][0]]&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;其中4是&lt;code&gt;a6_dict[0][1]&lt;/code&gt;, 第4题的答案也就是&lt;code&gt;answer[a6_dict[0][1]]&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [12]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a6_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;
             &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a6_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a6_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test6&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为真, 第6题选了A, 第8题的答案是A, 第2, 4题也选的是A&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test6&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为假, 第6题选了B, 第8题的答案是C, 第1, 6题选的不是C&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;True
False
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第7题"&gt;第7题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC7%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;此十道题中, 被选中次数最少的选项字母为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. C,&lt;/li&gt;
&lt;li&gt;B. B, &lt;/li&gt;
&lt;li&gt;C. A, &lt;/li&gt;
&lt;li&gt;D. D&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先建立个映射字典:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    a7_dict={0:2,
             1:1,
             2:0,
             3:3}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这道题开始有新花样了, "选中次数最少的字母", 那就要统计一下每个字母都被选中了多少次啊.&lt;/p&gt;
&lt;p&gt;列表里有个.count(value)方法, 可以统计出value在列表中出现了多少次. 所以:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;字母A在答案中出现的次数=answer.count(0)&lt;/li&gt;
&lt;li&gt;字母B在答案中出现的次数=answer.count(1)&lt;/li&gt;
&lt;li&gt;字母C在答案中出现的次数=answer.count(2)&lt;/li&gt;
&lt;li&gt;字母D在答案中出现的次数=answer.count(3)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;最少, 可以用min(列表)来表示, 那么各个字母出现次数中最少的数量: 
min( [answer.count(0),answer.count(1),answer.count(2),answer.count(3) ] )&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [14]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test7&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a7_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
             &lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;a7_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;]])&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test7&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为真, 这里面所有的字母都只出现了1次&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test7&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为假, 1出现了两次, 比其他都多&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;True
False
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第8题"&gt;第8题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC8%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;以下选项中, 哪一题的答案与第1题的答案在字母中不相邻:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. 第7题, &lt;/li&gt;
&lt;li&gt;B. 第5题, &lt;/li&gt;
&lt;li&gt;C. 第2题, &lt;/li&gt;
&lt;li&gt;D. 第10题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;先建个映射关系:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a8_dict={0:7,1:5,2:2,3:10}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这道题说的是字母不相邻, 我们已经用数字0123表示字母ABCD了, 那么相邻, 就是相差为+-1喽, 或者是减完以后平方=1. python用&lt;code&gt;**&lt;/code&gt;表示平方, 用&lt;code&gt;!=&lt;/code&gt;来表示不等于&lt;/p&gt;
&lt;p&gt;第一题的答案是answer[1],&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果选A, 那么有&lt;code&gt;(answer[1]-answer[7])**2 !=1&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果选B, 那么有&lt;code&gt;(answer[1]-answer[5])**2 !=1&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt; 
    &lt;span class="n"&gt;a8_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt; &lt;span class="n"&gt;a8_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt; &lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;**&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt; &lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [17]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test8&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;#应当为真, 第8题选了A, 第1题的答案是1, 与第7题的答案7不相邻&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test8&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;#应当为假, 第8题选了B, 第1题的答案是4, 与第5题的答案5相邻&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;True
False
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第9题"&gt;第9题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC9%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;已知"第1题与第6题的答案相同" 与 "第x题与第5题的答案相同" 的真假性相反, 那么X为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A. 第6题 &lt;/li&gt;
&lt;li&gt;B. 第10题 &lt;/li&gt;
&lt;li&gt;C. 第2题&lt;/li&gt;
&lt;li&gt;D. 第9题&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;建立映射关系:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a9_dict={0:6,1:10,2:2,3:9}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;"第1题与第6题的答案相同", 这句话的逻辑值是answer[1]==answer[6]&lt;/p&gt;
&lt;p&gt;真假性相反用not表示&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果选A, 那么X=6,  第6题与第5题的答案相同的逻辑值是answer[6]==answer[5],   那么not(answer[6]==answer[5])==(answer[1]==answer[6])&lt;/li&gt;
&lt;li&gt;如果选B, 那么X=10, 第10题与第5题的答案相同的逻辑值是answer[10]==answer[5], 那么not(answer[10]==answer[5])==(answer[1]==answer[6])&lt;/li&gt;
&lt;/ul&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [18]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test9&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a9_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="ow"&gt;not&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;a9_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;]]]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [19]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test9&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为假, 第9题选了A, 第1题与第6题不同, 那么第6题应该和第5题相同才是真假性相反, 这里不满足&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test9&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;_&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;# 应当为真, 第9题选了A, 第1题与第6题不同, 那么第6题应该和第5题相同才是真假性相反&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;False
True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h3 id="第10题"&gt;第10题&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AC%AC10%E9%A2%98"&gt;¶&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;在此10道题中, ABCD四个字母出现此处最多与最少者的差为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;A.3&lt;/li&gt;
&lt;li&gt;B.2&lt;/li&gt;
&lt;li&gt;C.4&lt;/li&gt;
&lt;li&gt;D.1&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们已经胜利在望, 发现出题人也没有太多花招了. 这题和前面第7题很相似, 只是第7题计算了最少, 这里要计算最多了.&lt;/p&gt;
&lt;p&gt;既然最少可以用min(列表)来表示, 那么各个字母出现次数中最少的数量: min( [answer.count(0),answer.count(1),answer.count(2),answer.count(3) ] )&lt;/p&gt;
&lt;p&gt;那么最多当然用max(列表)来表示, 于是各个字母出现次数中最多的数量: max( [answer.count(0),answer.count(1),answer.count(2),answer.count(3) ] )&lt;/p&gt;
&lt;p&gt;建立映射关系:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;a10_dict={0:3,1:2,2:4,3:1}&lt;/code&gt;&lt;/pre&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [20]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;test10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;a10_dict&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;answer_count_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;count&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="p"&gt;]&lt;/span&gt; 
    &lt;span class="n"&gt;diff&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;max&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;answer_count_list&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt; &lt;span class="nb"&gt;min&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt; &lt;span class="n"&gt;answer_count_list&lt;/span&gt; &lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;a10_dict&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="p"&gt;]]&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="n"&gt;diff&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [21]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test10&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;#应当为假, 第10题选了A, 最大最小要相差3, 但每个字母只出现了一次, 最大最小相差是0&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;test10&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt; &lt;span class="c1"&gt;#应当为真, 第10题选了A, 最大最小要相差3, 选1出现了3次, 选2, 3都没有, 最大最小相差是3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;False
True
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="穷举"&gt;穷举&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%A9%B7%E4%B8%BE"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;现在已经把上面10道题的判定函数都写好了. 要求解的答案就是要令上述10道题的判别函数都返回真的情况.&lt;/p&gt;
&lt;p&gt;10道单选题, 每道题可能有4种答案, 一共的可能性是
$$
4^{10}=1048576
$$&lt;/p&gt;
&lt;p&gt;看起来也不大, 所以就穷举好了. 最简单的方式就是for循环. 虽然也还有其他生成穷举序列的方法, 但本着"想到解法就先实现出来看看"的敏捷开发思路. 先用for循环吧.&lt;/p&gt;
&lt;p&gt;所谓for循环, 就是让一个变量依次取得列表中的所有值&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [22]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
&lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;
&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a1&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a2&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a3&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a4&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a5&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a6&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a7&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                            &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a8&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                                &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a9&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                                    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;a10&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;choice&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                                        &lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;""&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a5&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a6&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a7&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a8&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a9&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;a10&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
                                        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="kc"&gt;True&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test1&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test2&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test3&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test4&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test5&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test6&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test7&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test8&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test9&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;
                                            &lt;span class="n"&gt;test10&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
                                            &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;answer&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"That's all"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;
&lt;div class="prompt"&gt;&lt;/div&gt;

&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;['', 1, 2, 0, 2, 0, 2, 3, 0, 1, 0]
That's all
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;
&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="答案:"&gt;答案:&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/CSI-exam/#%E7%AD%94%E6%A1%88:"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;&lt;img src="https://i.loli.net/2018/03/01/5a9821ddb1dc7.jpg" alt="answer.jpg"&gt;&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>python</category><guid>https://goldengrape.github.io/posts/python/CSI-exam/</guid><pubDate>Thu, 01 Mar 2018 15:30:00 GMT</pubDate></item><item><title>看《甄嬛传》学实验设计</title><link>https://goldengrape.github.io/posts/bulabula/learn-exp-design-from-zhenhuan/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;这是以前发在&lt;a href="https://www.guokr.com/blog/234438/"&gt;果壳日志&lt;/a&gt;上的, 但果壳放弃了日志, 并且缺乏打理, 以至于原来的图片链接都出错了. 以为找不到了, 还挺可惜的. 今天查文件时突然发现了以前的图片, 还是放在自己这里踏实.&lt;/p&gt;
&lt;p&gt;下面, 请扶稳坐好, 系好安全带, 我们一起看《甄嬛传》学实验设计:
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p1.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p2.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p3.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p4.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p5.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p6.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p7.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p8.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p9.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p10.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p11.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p12.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p13.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p14.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p15.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p16.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p17.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p18.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p19.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p20.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p21.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p22.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p23.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p24.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p25.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;&lt;img alt="" src="https://goldengrape.github.io/images/zhenhuan/p26.jpg"&gt;&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;注：
本文依照电视剧中的情节假定滴血验亲是可靠的。
续：
如果更加严格的实验设计还需要有很多的步骤。
比如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实验器材中，用普通的水是不行的。需要用等渗等张的平衡盐作为溶液。&lt;/li&gt;
&lt;li&gt;考虑到六阿哥的血比较宝贵，测量滴血验亲的敏感性和特异性的预实验是要提前完成的。&lt;/li&gt;
&lt;li&gt;样本量的估计。&lt;/li&gt;
&lt;li&gt;相融还是不相融看起来是个定性试验，还需要一个独立的读片人。&lt;/li&gt;
&lt;li&gt;考虑到宫闱斗争重重，随机和双盲是必要的。&lt;/li&gt;
&lt;li&gt;继续考虑宫闱斗争重重，实验样品的防伪与认证也是必要的，其中可能配合随机双盲要用到HASH算法和/或RSA加密。&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/learn-exp-design-from-zhenhuan/</guid><pubDate>Thu, 01 Mar 2018 07:00:00 GMT</pubDate></item><item><title>VR／AR临床实验设计中的注意事项-太长不看版</title><link>https://goldengrape.github.io/posts/ophthalmology/vr-ar-exp-tldr/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;伴吐槽&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;前面那篇《&lt;a href="https://goldengrape.github.io/posts/ophthalmology/vr-ar-exp"&gt;VR／AR临床实验设计中的注意事项&lt;/a&gt;》文章太长了，以至于按照十五言的统计，“深读”率维持在10%以下，（那篇文章值一大笔顾问费的好么我为了国内的VR/AR社区就这么给捐了你们居然不仔细读）。因此作者推出了TL;DR版。&lt;/p&gt;
&lt;h3&gt;实验准备：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;伦理：不通过伦理委员会没签知情同意书，一告一个准；&lt;/li&gt;
&lt;li&gt;研究团队：就算企业出钱也得找些懂行的行家；&lt;/li&gt;
&lt;li&gt;实验设计：答辩叫defence，得尽量无懈可击才行；&lt;/li&gt;
&lt;li&gt;实验目的：一次一小步，题目太大就民科了；&lt;/li&gt;
&lt;li&gt;实验对象：纳入排除标准预先定，把搞不定的都排除在外&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;实验测量的指标：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;视力：用LogMAR&lt;/li&gt;
&lt;li&gt;CSF色觉能查就查一下&lt;/li&gt;
&lt;li&gt;屈光：电脑验光仪不准&lt;/li&gt;
&lt;li&gt;眼压：摊上青光眼就麻烦了&lt;/li&gt;
&lt;li&gt;干眼：用泪液分析仪&lt;/li&gt;
&lt;li&gt;双眼视、调节、斜视、AC/A、立体视：一般医生都搞不定，还是找专业人士玩&lt;/li&gt;
&lt;li&gt;问卷调查：青少年问卷调查你也信？&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;数据：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;别作弊；&lt;/li&gt;
&lt;li&gt;画图得有error bar；&lt;/li&gt;
&lt;li&gt;科研图不准用3D，别扯什么信息图示；&lt;/li&gt;
&lt;li&gt;连个P都没有，怎么让人相信&lt;/li&gt;
&lt;li&gt;统计方法不对有个P用&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;结果与讨论：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;garbage in garbage out ;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;眼科与视光学专业的注意事项:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;硬件限制：人类科技还很低下；&lt;/li&gt;
&lt;li&gt;软件限制：别撞上NP hard；&lt;/li&gt;
&lt;li&gt;商业限制：医生想的通常不赚钱没人愿意做&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/ophthalmology/vr-ar-exp-tldr/</guid><pubDate>Wed, 28 Feb 2018 07:15:00 GMT</pubDate></item><item><title>VR／AR临床实验设计中的注意事项</title><link>https://goldengrape.github.io/posts/ophthalmology/vr-ar-exp/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;alpha版&lt;/p&gt;
&lt;hr&gt;
&lt;h2&gt;声明&lt;/h2&gt;
&lt;p&gt;本文遵守创作共用-署名-非商用协议。&lt;/p&gt;
&lt;p&gt;本文不能作为临床研究的依据。&lt;/p&gt;
&lt;p&gt;本文不明确推荐具体商品。&lt;/p&gt;
&lt;p&gt;临床实验设计是一门独立的课程，有丰富的内容，本文仅能提供简单的介绍。&lt;/p&gt;
&lt;p&gt;觉得文章太长可以先看&lt;a href="https://goldengrape.github.io/posts/ophthalmology/vr-ar-exp-tldr/"&gt;《……太长不看版》&lt;/a&gt;&lt;/p&gt;
&lt;h2&gt;起因&lt;/h2&gt;
&lt;p&gt;看了未来影响高精尖创新中心的&lt;a href="https://mp.weixin.qq.com/s?__biz=MzIzODU5Mzk0OQ==&amp;amp;mid=2247484520&amp;amp;idx=1&amp;amp;sn=61d59675efbe7d3565f0761fbe8a6e2d"&gt;《长时间使用VR头戴显示设备对低年龄用户视力的影响测试报告》&lt;/a&gt; 。这个实验的目的是非常好的。游戏、教育都是VR/AR的重要应用领域，当前确实缺乏儿童使用VR/AR的临床研究，但该实验中仍然有很多需要改善的部分。&lt;/p&gt;
&lt;p&gt;VR/AR技术，特别是VR/AR显示技术与眼科学密切相关。除了对儿童视力影响的探索，2017年的ARVO会议上，孙兴怀教授团队也报告了利用video see-through技术进行弱视训练的研究（[^ARVO热点丨弱视治疗新进展：增强现实双眼分视训练]）。未来VR/AR有更多在眼科学上的应用。也会有更多的VR/AR企业需要进行医学相关的研究与实验。&lt;/p&gt;
&lt;p&gt;下面，我简单介绍下一个比较正规的VR/AR临床研究应该怎么做。&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h2&gt;伦理&lt;/h2&gt;
&lt;p&gt;临床研究中，很重要的是要遵守临床研究的伦理。一个正规的临床实验是应当按照《赫尔辛基宣言》的要求进行实验设计并交由伦理委员会审议批准的。对于VR/AR企业一方面是合法合规做事，一方面也有一定的自我保护。&lt;/p&gt;
&lt;p&gt;相关的内容请查阅《赫尔辛基宣言》，其中最重要的原则，一是要首先考虑受试者的健康，二是知情同意原则。&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;受试者的健康&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果VR/AR实验的实验对象是儿童，需要更严格的保护。已知的，可能对儿童的健康造成不利影响的事情都不应该做。例如：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;实验场地：应该有足够的防护，避免发生儿童磕碰的事故。&lt;/li&gt;
&lt;li&gt;实验软件设备：VR/AR游戏应选择与儿童年龄相称的游戏，避免血腥暴力恐怖等游戏。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;实验硬件：应当适合儿童使用。其中应当注意VR/AR头戴显示器的瞳距是否可以供儿童使用。硬件瞳距的范围与被试的瞳距不相符时，会产生不良的健康影响，应当避免。例如HTC Vive的最小瞳距是60mm，那么瞳距&amp;lt;60mm的儿童就应当排除在实验之外。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;知情同意&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;实验开始前，应当向实验对象讲解实验以及实验过程中可能出现的风险，取得实验对象的同意后，才可以进行实验。如果实验对象是儿童，除了向儿童本人讲解实验过程和注意事项，还需要向儿童的监护人，也就是家长和老师讲明，并且应当签署正式的知情同意书。&lt;/p&gt;
&lt;p&gt;所以在实验设计好以后，知情同意书也需要同时设计好，并且一并交给伦理委员会审议批准。&lt;/p&gt;
&lt;h2&gt;研究团队&lt;/h2&gt;
&lt;p&gt;研究团队中是可以有企业参与的，并且也可以由企业提供资金进行。但是需要在实验发表时公开披露。资金有企业来源的，往往会被解读为广告。&lt;/p&gt;
&lt;p&gt;由于实验数据的测量中会使用大量眼科专业设备，并需要专业测量技能，所以建议研究团队中应当有视光学背景的专业人士，例如眼科医生、验光师。&lt;/p&gt;
&lt;p&gt;实验数据的处理与解读可能也需要统计学或流行病学专业人士的协助。&lt;/p&gt;
&lt;h2&gt;实验设计&lt;/h2&gt;
&lt;p&gt;临床研究面向的对象都是人。与程序员面对的抽象对象、硬件工程师面对的硬件模块不同。人是非常复杂的，对人的测量往往具有极大的误差。与机械加工中的公差分析是不同的。&lt;/p&gt;
&lt;p&gt;对测量人体生理、心理指标的误差，工程师很可能是估计不足的。程序员大概无法想象每个unitTest的返回值都会先经过一个不一定是正态分布的随机数处理一遍的系统，这才是人类。&lt;/p&gt;
&lt;p&gt;临床实验设计就是要尽量排除人为的影响。需要设定对照组，可能需要设盲，实验对象的数量也有一定的要求。不同的实验设计，能够提供证据的强度也不一样。一般来说，一次实验最可信的是大规模多中心的随机双盲实验（RCT）。实验设计是一门课程，有很多书籍和公开课可供参考，也有专业的CRO公司提供相关的服务。&lt;/p&gt;
&lt;p&gt;简单的说，实验中一切的人类都是坏人，你的实验对象可能会有意无意说谎，可能突然就退出实验；你的助手可能有意无意记录错误的数据，在模棱两可的时候故意偏向错误；其中最坏的就是设计者你本人，有些事情如果被你预先知道，你就会压迫助手，欺负实验对象，使他们屈从于你，产生错误的结果。实验设计的目的就是向大家公布，我们都这么坏了，但由于严谨的实验设计，我们实在无法钻空子作假。&lt;/p&gt;
&lt;h2&gt;实验目的&lt;/h2&gt;
&lt;p&gt;做过科学研究的人知道，实验的目的不可求大，不要妄图在一个实验中解决庞大的问题。比如“对视力的影响”其实是个很庞大的范畴。实验目的需要尽量清晰明确地定义。当然在收集数据的时候可以尽量全一些，同一个临床实验可以产生很多不同目的的文章。&lt;/p&gt;
&lt;h2&gt;实验对象&lt;/h2&gt;
&lt;p&gt;实验对象是需要经过选择的，但是应当有明确合理的纳入标准和排除标准。&lt;/p&gt;
&lt;p&gt;纳入标准，应当是能够代表总体的样本标准。比如随机抽取某个学校一个年龄段的学生。但纳入标准如果不合适则可能造成“选择偏倚“。&lt;/p&gt;
&lt;p&gt;排除标准，至少应当把可能会因为VR/AR造成损伤的被试排除在外。&lt;/p&gt;
&lt;p&gt;比如有感染性眼病的患者可能因为共用VR/AR头戴显示器而传播疾病，斜视的患者在使用VR/AR后更容易产生疲劳，前庭功能障碍的患者可能在使用VR/AR时更容易眩晕，癫痫的患者也许会在VR/AR场景中被诱发等等。不过有些实验可能就是为了使用VR/AR来治疗某种疾病，那么就需要依照具体情况来确定排除标准了。&lt;/p&gt;
&lt;p&gt;即使是正常人，也需要有一定的限制，比如儿童的瞳距不同，对于硬件瞳距不能适应的儿童，瞳距不合适更容易加重视疲劳，影响实验的准确性。应当排除在实验之外。&lt;/p&gt;
&lt;p&gt;实验对象的数量，要根据所测量的指标来定。不同的测量指标分布是不同的，离散程度、误差等也不同，为了最终可以得到有意义的比较结果，需要高于一定的数量。但实验对象太多了，物资成本和时间成本又会飙升。具体的样本量估计的方法，请查阅相关的统计学教程。&lt;/p&gt;
&lt;p&gt;在选择儿童作为实验对象的时候，还应当考虑到儿童心理、生理发育的影响。比如年龄过小的儿童，很可能无法理解实验员的解说，或者要让儿童长时间保持注意力集中，难度极大。另外，儿童或青少年也许会以破坏规则作为乐趣。&lt;/p&gt;
&lt;p&gt;对于眼睛，不同年龄的儿童也是不同的。人眼睛8岁的时候才达到正常眼轴的长度。6岁的孩子可能还有+1.50D左右的远视，10岁的孩子也可能有+1.00D的远视。&lt;/p&gt;
&lt;h2&gt;实验测量的指标&lt;/h2&gt;
&lt;p&gt;视觉是一组互相关联的知觉，有物理成像的过程，有心理知觉的过程，有认知处理的过程，还有人体反馈的过程。测量的方式也有客观和主观测量的不同。需要根据实验目的和实验的实际情况来选择。&lt;/p&gt;
&lt;h3&gt;视力&lt;/h3&gt;
&lt;p&gt;检查的是人眼的角度分辨能力。看起来测量视力很简单，只要对着视力表指指点点，让被试指出方向即可。但其中仍然有很多需要注意的地方。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;视力表的选择。医院里检查常用的是Snellen视力表，或标准对数视力表。记录方式是1.5、1.0之类的小数记录。这种视力表使用方便，在临床中很常用，但并不适合科学研究。人类的感觉信号通常是对数编码的，还受到周围环境的影响，并不是简单的线性系统。使用Snellen视力表测量后很难进行统计分析，测量过程也容易受到干扰。所以真正发表科研论文时，应当使用LogMAR进行记录和分析，使用的是&lt;a href="https://en.wikipedia.org/wiki/LogMAR_chart"&gt;LogMAR视力表&lt;/a&gt;。&lt;/li&gt;
&lt;li&gt;检查环境。视力的测量对周围环境光、灯箱的背景光都是有严格要求的。需要按照视力表中所标注的要求进行设定。&lt;/li&gt;
&lt;li&gt;检查过程。恐怕很多实验设计者已经忘记了自己小时候体检测视力的过程，如果排成一队依次检查。实际过程是，很多孩子在看视力表之前已经将下面几行熟记于心了。或者后面的孩子会在被检查者的后背上画出结果来。即使是使用了新的LogMAR视力表，如果检查后的孩子回到未检查的队伍中，信息也会很快传开。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;对比敏感度（CSF）&lt;/h3&gt;
&lt;p&gt;视力测量只测量了黑白分明时候的角分辨能力。但日常生活中这种情况并不是常规。有些人视力检查结果很好，但却在黄昏不敢走楼梯，因为在暗环境下的分辨力下降了。这就要用对比敏感度来测了。不严格地用工科概念的类比，相当于在测量系统的调制传递函数MTF。（CSF近似于成像的MTF乘以神经系统处理的MTF）&lt;/p&gt;
&lt;p&gt;对比敏感度的测量比测量视力要时间长一些。可以用灯箱，也有更为紧凑的仪器可供使用。&lt;/p&gt;
&lt;h3&gt;色觉&lt;/h3&gt;
&lt;p&gt;色觉的检查一般是使用印刷的色盲本。这种检查只能对色觉作出粗略的定性分析。但对于VR/AR实验可能不够。如果使用计算机屏幕进行色觉的模拟，需要注意不同的屏幕对颜色的显示能力是不同的，要看屏幕对与CIE颜色空间的覆盖程度。&lt;/p&gt;
&lt;h3&gt;屈光状态&lt;/h3&gt;
&lt;p&gt;电脑验光仪可以迅速检查被试的屈光状态，是近视、远视以及是否有散光，散光的轴位。但是电脑验光仪的重复性稍差，容易受到调节的影响，其中球镜部分（也就是近视远视）的可信度低，散光稍好。更好的测量方式是使用综合验光仪进行显然验光，但显然验光的过程较长，如果需要在短时间内测量大量的被试，需要在准确性和时间之间作出选择。&lt;/p&gt;
&lt;p&gt;标准的屈光状态记录方式是：&lt;/p&gt;
&lt;p&gt;OD: 裸眼视力，近视／远视度数 DS≎散光度数DC X 散光角度，矫正视力&lt;/p&gt;
&lt;p&gt;OS: 裸眼视力，近视／远视度数 DS≎散光度数DC X 散光角度，矫正视力&lt;/p&gt;
&lt;p&gt;右眼、左眼、双眼的缩写分别是OD、OS、OU。&lt;/p&gt;
&lt;p&gt;例如，右眼裸眼视力0.6，有100度近视，75度近视散光，轴位在70度，戴镜矫正后视力可以达到1.0，&lt;/p&gt;
&lt;p&gt;可以记录为：VOD: 0.6 -1.00DS≎ -0.75DC X 70° → 1.0&lt;/p&gt;
&lt;h3&gt;眼压&lt;/h3&gt;
&lt;p&gt;眼球是一个有弹性的球体，里面填充的是液体。内部是有压力的。眼压是由房水动态调节的，一部分人眼压调节能力失调，产生了青光眼，其中闭角型青光眼应当避免暗环境，以免瞳孔扩张后引起眼压突然升高。&lt;/p&gt;
&lt;p&gt;测量眼压可以用气动眼压或接触眼压计来测量。&lt;/p&gt;
&lt;h3&gt;泪液&lt;/h3&gt;
&lt;p&gt;眼泪的多寡常常会影响到视觉疲劳状态和视觉质量。比如视疲劳中常见的描述往往会有眼睛"干涩"，就是与泪液分泌有关。&lt;/p&gt;
&lt;p&gt;泪液常用的测量是Schimmer实验和BUT实验。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Schimmer实验是在下眼睑边缘挂一个滤纸，给定时间以后测量泪液浸润的距离。但这个实验对操作要求高，误差大。&lt;/li&gt;
&lt;li&gt;BUT实验是测量泪膜破裂时间，在眼内点上荧光素，在裂隙灯下观察泪膜上第一个暗区出现的时间。要注意的是荧光素试纸容易污染。也有人使用电脑验光仪进行粗略的估计。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;现在有眼表分析仪可以测量BUT、泪河宽度、睑板腺状态等。&lt;/p&gt;
&lt;h3&gt;双眼视觉&lt;/h3&gt;
&lt;p&gt;人的眼睛有一双，有很多功能是双眼协调使用时才表现出来。双眼视觉的功能测量，例如：调节幅度、调节灵敏度、聚散储备、调节集合比等也需要测量，可能需要使用综合验光仪进行。&lt;/p&gt;
&lt;h3&gt;调节&lt;/h3&gt;
&lt;p&gt;在进行视疲劳的研究时，应当测量被试的调节。这是一个客观的指标。在给予不同刺激后，调节的变化过程可以提示很多信息。眼内睫状肌的疲劳程度也可以以此反应。当前已经有测量调节的仪器，相当于高速连续进行电脑验光。&lt;/p&gt;
&lt;p&gt;调节的测量中还应当使用综合验光仪测量被试的调节幅度。&lt;/p&gt;
&lt;h3&gt;眼球运动&lt;/h3&gt;
&lt;p&gt;斜视的患者应当排除在实验之外，简单的遮盖去遮盖查实验可以发现一部分斜视患者。但如果没有检查，隐斜的患者可能不容易发现，这部分人能够用肌肉控制住斜视，在注视目标时并不会表现出来，但容易出现视疲劳。&lt;/p&gt;
&lt;p&gt;人眼在看近处物体双眼向内聚的动作为集合，集合有一定的限度，集合广度、聚散力，聚散储备也可能需要测量。&lt;/p&gt;
&lt;h3&gt;AC/A&lt;/h3&gt;
&lt;p&gt;人眼在看近处物体双眼向内聚，这个动作称为集合（Accommodative convergence，AC），同时会动用调节（accommodation，A）改变眼球焦距，使人眼能够清晰对焦。进化使这两个动作是联动的，一旦双眼向内看，会自动启动调节。&lt;a href="https://www.aao.org/bcscsnippetdetail.aspx?id=16eb0f96-fa78-436b-8841-e4a5fc8a622c"&gt;AC/A&lt;/a&gt;可近似视为常数。（会有随年龄的变化，但短时间内可视为不变量）&lt;/p&gt;
&lt;p&gt;在当前的VR/AR设备中，仅仅使用一个平面上的显示器来显示物体，所以人眼在看时AC是有的，A则不一定变化，调节集合反射被破坏了。这是当前VR/AR设备中未能解决的技术困难，有可能未来通过光场显示、高速变焦显示等方法来解决。&lt;/p&gt;
&lt;p&gt;AC/A数值是可以测量的，AC/A自身异常的人可能也需要排除在实验对象之外。&lt;/p&gt;
&lt;h3&gt;立体视&lt;/h3&gt;
&lt;p&gt;VR/AR由于显示时区分了左右眼，所以能够产生双眼立体视觉。已经比眼科常用的立体视检测手段更高级了。但当前VR/AR头戴式显示器与人眼的视野范围还不一致。人眼的视野范围一般是内侧60度，外侧90度，VR头戴显示器常常会标出一个对角线视角，比如100度，但当前的硬件设备中，双眼内侧常见是使用挡板隔开的，内侧视野不足60度，那么可能对于立体视觉的感知区域就与实景中是不同的。&lt;/p&gt;
&lt;p&gt;VR之外还有AR／MR，在与实景交互时，需要知道人感觉到物体空间位置和真实位置之间是否一致，差异有多少。这部分并没有现成的眼科测量手段可用。但也有很多文献做了探索，比如移动实物去对齐虚拟场景中的物体。&lt;/p&gt;
&lt;p&gt;注意，当VR/AR技术进步到复杂的光场技术甚至全息技术时，测量的可能就是“单眼的立体视”了，也就是所谓的调节线索，物体远近不同时，人眼对焦到一处时另一处可能是模糊的。如何判定系统真的表现出了这种调节线索，如何客观测量，如何定性、定量分析，需要进一步的研究。&lt;/p&gt;
&lt;h3&gt;问卷调查&lt;/h3&gt;
&lt;p&gt;视觉是个知觉过程，其中必然还要涉及到很多人脑分析的部分，会得出许多主观、客观混合的指标，比如“舒服“、"疲劳"、"不适"等等，其中一部分客观指标可以测量，但也有可能需要通过问卷进行调查。&lt;/p&gt;
&lt;p&gt;问卷调查之中有很多学问，问卷应尽量使用成熟的量表。&lt;/p&gt;
&lt;p&gt;在VR/AR实验中，有一些需要注意的地方：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;如果被试是儿童或者青少年，要注意儿童的认知理解能力，是否可以使用特定的问卷。&lt;/li&gt;
&lt;li&gt;被试的配合程度。儿童和青少年是否愿意如实回答问卷中的问题。&lt;/li&gt;
&lt;li&gt;问卷是使用笔试还是口头测试？笔试的好处是速度快，可以同时多线程处理很多被试。但如果是被试自己阅读答题，这一过程本身也是一次视近操作的过程。测量过程也会影响视疲劳的程度。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;数据的记录、处理、统计分析与展示&lt;/h2&gt;
&lt;p&gt;这些都是统计学里讲到的内容，请查阅相关的统计学教程或者公开课。或者请专门的统计学老师进行指导。&lt;/p&gt;
&lt;p&gt;基本的原则是：正心诚意。坦然接受客观的实验结果。特别是对于企业，实验结果对于未来多年的研发有指导意义，操纵数据无异于拿着坏掉的罗盘指路。&lt;/p&gt;
&lt;p&gt;由于一切都是采样，一切都有误差，将两组数据的平均值直接比较，说谁比谁大，谁比谁好，是完全没有意义的。&lt;/p&gt;
&lt;p&gt;由于一切都是采样，一切都有误差，画柱状图不标出error bar，直接比较谁比谁高，是完全没有意义的。&lt;/p&gt;
&lt;p&gt;使用3D统计图容易使读者产生误判，不应出现在正规的临床研究中。&lt;/p&gt;
&lt;p&gt;漂亮的信息图示，比如用人物剪影的大小代表数量的多少，容易使读者产生误判，不应出现在正规的临床研究中。&lt;/p&gt;
&lt;p&gt;虽然很多新闻报道中在批判科学家们对P&amp;lt;0.05的迷思，但假设检验仍然是得出结论的必由之路。没有经过统计学的假设检验，就声明两组数据谁比谁好，是没有意义的。与理工科的文章不同，生物医学文章里如果连个P都没有出现，读者是不会相信文章内容的。&lt;/p&gt;
&lt;p&gt;即使使用了统计学假设检验，要注意假设检验的方法是有不同的适用条件的，不满足适用条件而使用是错误的，得出的结论也是没有意义的。&lt;/p&gt;
&lt;p&gt;很多假设检验的方法要求数据来自于正态分布的总体，但不是所有的数据都是正态分布的，比如用小数记录的视力，就不一定是正态分布。不是正态分布的数据，平均值和标准差并不能反映数据的特征。&lt;/p&gt;
&lt;h2&gt;结果与讨论&lt;/h2&gt;
&lt;p&gt;实验的结果只能由经过统计学假设检验后的结果给出。&lt;/p&gt;
&lt;p&gt;比如说实验对象使用VR/AR以后，视力有改变。不是说实验对象使用VR/AR前的平均视力是多少，使用后的平均视力是多少，两者一减，发现平均视力提高了，就是视力变好，平均视力降低了，就是视力变差。&lt;/p&gt;
&lt;p&gt;如前所述：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;是否有足够多数量的被试？只有几个人是没意义的。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视力表用的是什么视力表，记录方式是不是LogMAR直接导致了是否可以用“平均“数来比较。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;检查视力的手段是否可靠，使用前查完视力以后，孩子们聚在一起编了个视力表歌谣，把视力表背得滚瓜烂熟，不管用不用VR/AR，第二次检查肯定提高了。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;视力检查的数据是否是正态分布，是否满足正态分布的检验。如果不满足，可能要经过处理，比如取log之类，使偏态分布转变成正态分布。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;如果数据是正态分布，被试眼数量有50，比较使用VR/AR之前和之后的视力，通常是应该使用配对t检验。如果此时选择非参数检验，个人认为可能有作弊之嫌。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;当看到配对t检验的结果表明差异有显著性以后，才能说明在多大的错误概率内，使用VR/AR会改变视力。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;使用二维的柱状图展示使用VR/AR前后的数据，并且每个柱状图上应当用error bar标记出标准差。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;上述环节中某一个步骤出错或者不够严谨，都不能够得出有效的结论。&lt;/p&gt;
&lt;h2&gt;眼科与视光学专业的注意事项&lt;/h2&gt;
&lt;p&gt;以上是针对软件硬件工程师提出的一些注意事项。反过来，对于眼科学、视光学专业的医生、研究生，在设计实验时也有一些注意事项&lt;/p&gt;
&lt;p&gt;如果没有软件和硬件开发的经验，眼科与视光学专业人士可能也很难理解VR/AR开发中的困难。如果你在跟工程师或者程序员交流时使用了“……就行了“，"只要……了呗"这样的句式，通常你的想法是错的。&lt;/p&gt;
&lt;h3&gt;硬件的限制：&lt;/h3&gt;
&lt;p&gt;现阶段（2017年中），VR/AR所能呈现的视觉效果距离真实或者说人眼能够区别的极限，还有相当远的距离。工程师所制造的产品是在性能与成本中尽量取得平衡。超越当前技术水平的硬件，有些理论上有、新闻上有，但由于未进入主流市场生产量小，价格极高。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;透镜像差：这一点无需赘述。出于重量考虑，VR设备还有可能使用菲涅耳透镜，其像差估计和计算可能会更复杂。&lt;/li&gt;
&lt;li&gt;分辨率：常见的屏幕分辨率大约是400-600ppi，也就是每英寸25.4mm上有400-600个点。如果通过透镜成虚像在2M之外，角分辨率远远不能满足1.0视力的要求。(索尼另算)&lt;/li&gt;
&lt;li&gt;采样定理：屏幕像素是一格一格的，屏幕能够满足1.0视力的要求，不一定能够显示出0.9和1.2的视标。至少要满足最高频率的2倍。&lt;/li&gt;
&lt;li&gt;刷新率：屏幕的显示图像的速度，一般是每秒钟60幅，也就是60FPS，近期可以达到90FPS&lt;/li&gt;
&lt;li&gt;颜色：液晶显示器使用RGB三种颜色来组合产生色觉，显示器所能够产生的颜色要比人眼在真实生活中感知到的颜色少很多。&lt;/li&gt;
&lt;li&gt;亮度：液晶显示器在屏幕背面使用LED经过匀光板产生照明，照明的亮度是有限的。匀光板不一定能够产生均一的照明，也就是说屏幕一侧与屏幕另一侧的亮度可能是不一致的，差距需要实际测量。&lt;/li&gt;
&lt;li&gt;Gamma校正：屏幕的亮度不一定是与像素的数值是成正比的，比如屏幕像素上黑色=0，白色=255，那么灰色128和密集排列黑白从远处看可能是不相同的。&lt;/li&gt;
&lt;li&gt;衍射：透明的液晶屏相当于密集的光栅，会产生明显的衍射效应。&lt;/li&gt;
&lt;li&gt;可视角度：从不同的角度去观察液晶屏幕，颜色和亮度可能不一样。&lt;/li&gt;
&lt;li&gt;公差：制造有误差。降低误差成本会迅速提高。&lt;/li&gt;
&lt;li&gt;良品率：一种东西实验室作出了可用的一件，不等于工厂里能够生产出高质量的成千上万件。&lt;/li&gt;
&lt;li&gt;遮光：市售AR设备没有能够遮挡自然光的能力。在外界实景上只能加图像，不能减图像。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;软件限制：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;软件很贵，购买软件和生产软件都很贵。&lt;/li&gt;
&lt;li&gt;程序员不一定会修电脑。&lt;/li&gt;
&lt;li&gt;程序运算需要时间，屏幕上像素越多，需要的时间越多。有可能无法达到需要的要求。&lt;/li&gt;
&lt;li&gt;计算一个事情花的时间，可能跟处理的数据量成正比，复杂度叫O(N)，也可能需要处理的数据量的平方成正比，O(N^2)，甚至复杂度是非多项式时间，例如$ 2^{O(N)} -&amp;gt; O(N!)$，这种难度与抢银行相当。&lt;/li&gt;
&lt;li&gt;计算机的内存有限制。比如要计算一个1k屏幕上点与另一个屏幕上点的两两组合，需要$(10^3 \times 10^3)^2 \times 4 = 4 \times 10^{12} =4TB $&lt;/li&gt;
&lt;li&gt;不同语言写出的程序运算速度不同。&lt;/li&gt;
&lt;li&gt;深度学习很贵。&lt;/li&gt;
&lt;li&gt;人月神话：3个人干3个月的事情，9个人可能要干2.5个月。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;商业限制：&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;疾病发生率常以万分之几、十万分之几计算，玩游戏的人口则安百分之几计算，中间差很多数量级。玩游戏的人才是推动硬件进步的力量，玩游戏的人多了才有VR/AR治病。&lt;/li&gt;
&lt;li&gt;全国眼科医生不超过2-3万名。&lt;/li&gt;
&lt;li&gt;并不是所有人都花钱买软件。&lt;/li&gt;
&lt;li&gt;产品经理答应的事情，程序员和硬件工程师不一定能做出来。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;参考&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href="https://mp.weixin.qq.com/s?timestamp=1494925011&amp;amp;amp;src=3&amp;amp;amp;ver=1&amp;amp;amp;signature=Aqr44BaRoB3kb12tDXee8w3VbWbQbwLIFTcE32CLFShBua9Y2AZKSCll67lIKyP-4Jg11gHUTB8lRnSiNmHIhSrL2j3v66BCOVW6u9P3LJo3KaWt1jPnGf31SPKO1YnOm-zuWfQ2vB*Gsv2lKQeBxZWvVqQTzZxQhRbtvCbqGCI="&gt;ARVO热点丨弱视治疗新进展：增强现实双眼分视训练&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;统计分析： https://zh.coursera.org/specializations/jhu-data-science&lt;a href="https://zh.coursera.org/specializations/jhu-data-science"&gt; 第 6 门课程 Statistical Inference&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;《双眼视觉学》，ISBN 978-7-117-14654-8/R*14655&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/ophthalmology/vr-ar-exp/</guid><pubDate>Wed, 28 Feb 2018 07:00:00 GMT</pubDate></item></channel></rss>