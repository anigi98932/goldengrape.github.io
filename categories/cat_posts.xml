<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GoldenGrape's Blog (关于文章 posts)</title><link>https://goldengrape.github.io/</link><description></description><atom:link href="https://goldengrape.github.io/categories/cat_posts.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2019 &lt;a href="mailto:https://twitter.com/goldengrape"&gt;Golden Grape&lt;/a&gt; </copyright><lastBuildDate>Tue, 10 Dec 2019 03:21:57 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>文献分析一则: 查文献找医院</title><link>https://goldengrape.github.io/posts/bulabula/paper_analysis/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;一个有趣的文献分析案例, 有人在朋友圈问质子射线治疗肺癌在中国哪家医院比较好. &lt;/p&gt;
&lt;p&gt;最近正在研究&lt;a href="http://lens.org"&gt;Lens&lt;/a&gt;这个搜索引擎, 是一个文献和专利的分析引擎, 所以拿来测试一下. &lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h3&gt;假设&lt;/h3&gt;
&lt;p&gt;某个疾病治疗得比较好, 某项治疗方法应用得比较好, 处于国内领先地位的医院, 发文章也会多. &lt;/p&gt;
&lt;h3&gt;方法&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;检索关键词: (proton ( lung cancer ))&lt;/li&gt;
&lt;li&gt;检索范围: &lt;a href="https://www.lens.org/lens/new-search?type=SCHOLAR"&gt;学术文献检索&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;限制条件: Institution Country/Region 限定在China.&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;结果&lt;/h3&gt;
&lt;p&gt;于是得到了330篇&lt;a href="https://link.lens.org/ips07WpBLog"&gt;检索结果&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="屏幕快照 2019-12-10 10.42.47" src="https://i.loli.net/2019/12/10/iIr9n6aGdyCROBz.png"&gt;&lt;/p&gt;
&lt;p&gt;点击Analysis, 可以进入到Lens的分析工具中. &lt;/p&gt;
&lt;p&gt;按照发文章的机构分类, 最多的是中科院, 其次是复旦, 第三位是得克萨斯大学的一个癌症研究中心, 看起来可能是常见的合作单位, 然后是中国药科大学跟香港大学. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.loli.net/2019/12/10/ykEneFPJVQgMY1j.png"&gt;&lt;/p&gt;
&lt;p&gt;但似乎没听说过中科院有临床医院, 再往下看看不同的研究领域和机构之间的细分关系. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.loli.net/2019/12/10/qrj3XonNp6ksVFI.png"&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;药物: 复旦, 得克萨斯大学&lt;/li&gt;
&lt;li&gt;生物: 中科院, 香港大学&lt;/li&gt;
&lt;li&gt;癌症: 复旦, 上海交大&lt;/li&gt;
&lt;li&gt;化学: 中科院, 中国药科大学&lt;/li&gt;
&lt;li&gt;生物化学: 中科院, 香港大学&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以比较明显了, 复旦、上海交大可能在临床治疗上做得比较好, 而中科院、中国药科大学、香港大学可能更多偏向的是基础研究. &lt;/p&gt;
&lt;h3&gt;讨论&lt;/h3&gt;
&lt;p&gt;文献检索要看查全率和查准率. 这里都没有统计. &lt;/p&gt;
&lt;p&gt;数据没有仔细进行清洗, 有可能需要排除综述、meta分析之类的文章类型. 但这类文章数量不会太多, 可能对结果影响不大. &lt;/p&gt;
&lt;p&gt;对于临床治疗的医生, 特别是手术治疗的医生, 开始的假设有可能不成立. 有些医生手巧, 手术做得干净漂亮, 但口拙, 不会写文章. 这是有可能的. 不过对于国内比较大的医学院/教学医院, 医教研是互相关联的评价指标. 所以以科室或者医院为单位进行考虑, 文章数量与临床水平正相关的假设还是很大概率能成立的. 而且看病看的不仅仅是一个医生, 还是整个医疗团队如何, 医生手再巧护理一团糟的话术后感染风险也很高了. &lt;/p&gt;
&lt;p&gt;对于作者的统计可能不可靠, 除了上面说的原因, 科学论文里一作是干活的, 通讯作者是老板, 临床治疗的文章, 一作可能是整理收集数据撰写的, 出门诊做手术的可能是通讯作者, 所以要区别对待. 目前看Lens对作者的统计没有明确区分. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://i.loli.net/2019/12/10/S6RuaOoC7jYMtZf.png"&gt;&lt;/p&gt;
&lt;p&gt;关于治疗方法是否真的好, 还是要看临床实验和临床经验, 从数据上可以看出一些端倪, 但具体是否适合于某个病人可能要单独分析.&lt;/p&gt;
&lt;p&gt;例如限定中国时, 看文章发表数量与时间的关系
&lt;img alt="" src="https://i.loli.net/2019/12/10/NPfIJqjh5CToVvp.png"&gt;
不限定中国时, 看全世界的文章发表数量与时间的关系:
&lt;img alt="" src="https://i.loli.net/2019/12/10/zTJDd654oL7aAX3.png"&gt;&lt;/p&gt;
&lt;p&gt;两者的趋势很一致, 都是在2016年达到了高峰, 然后迅速回落. 如果是专利分析, 因为公开时间的关系, 会有两年左右的滞后时间, 但科学文献还算是比较及时的. 2016年后的快速回落值得注意. &lt;/p&gt;
&lt;p&gt;这个数据的解读就需要分析具体的原因了, 有可能是出现了更好的替代治疗手段, 有可能是回顾研究发现效果不如预期的好, 有可能是其他什么原因. 需要看看近期的综述或者看看&lt;a href="https://www.uptodate.com"&gt;uptodate&lt;/a&gt;上的循证医学证据. &lt;/p&gt;
&lt;h3&gt;结论&lt;/h3&gt;
&lt;p&gt;这个检索只是粗略给出了大致方向, 具体的信息可能还是需要有业内人士的建议. 不过动动鼠标就有了大致方向已经很不错了, 这时候就可以考虑问问在复旦学医的同学, 哪个医院更好, 哪个医生更好, 不用全国到处找. &lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/paper_analysis/</guid><pubDate>Tue, 10 Dec 2019 02:00:00 GMT</pubDate></item><item><title>看好和弦学音乐和sonic-pi</title><link>https://goldengrape.github.io/posts/bulabula/learn_sonic_pi_and_music_with_nicechord/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;&lt;a href="https://sonic-pi.net/"&gt;Sonic-Pi&lt;/a&gt;是一个用Ruby语言写的音乐编程工具, 可以使用代码来即兴“演奏”音乐. 所谓演奏,live coding music,  是可以在程序中修改代码, 随时更新, 使音乐发生变化. 有点像是用命令行的DJ. 比如&lt;a href="http://player.bilibili.com/player.html?aid=74702936&amp;amp;cid=127783914&amp;amp;page=1"&gt;这个演出&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;不过学习Sonic-Pi就有两个内容要学习了, 一个是Ruby语言, 一个是音乐语言. &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Ruby语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Sonic-Pi本身使用的是Ruby语言, 用来编写音乐的也是Ruby的一个子集, Sonic-Pi自带的mehackit上有个快速上手的&lt;a href="http://sonic-pi.mehackit.org/index_chs.html"&gt;中文教程&lt;/a&gt;, 文字阅读困难的, 这里也有&lt;a href="https://www.bilibili.com/video/av47554214"&gt;视频教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;如果需要更复杂的功能, 可能需要加强Ruby语言的学习, 引入更多数据结构、函数定义之类. Ruby是个很流行的语言, 有大量的教程可以参考, 比如&lt;a href="https://www.yiibai.com/ruby/quick-start.html"&gt;30分钟的快速入门&lt;/a&gt; 或者更完全一些的&lt;a href="https://www.runoob.com/ruby/ruby-tutorial.html"&gt;教程&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;对于Sonic-Pi, 简单的音乐或者midi处理, 似乎还用不到面向对象编程, 多数是面向过程的, 如果会其他的编程语言, 很容易学会.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;音乐语言&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;音乐语言就要复杂多了, 概括地说音乐只是模式涌现. 但为了让人类的大脑觉得好听, 还有很多的规律. &lt;/li&gt;
&lt;li&gt;很多“学习音乐”的人, 比如我小时候学琴, 只是学习了乐器的演奏, 并没有学习用音乐来表达. 学习演奏类似于学习写字, 高等一点的类似于学习书法. 音乐则是类似文学, 至少要有一些写作的训练才行, 也就是乐理的学习.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;好和弦(&lt;a href="https://nicechord.com/"&gt;NiceChord&lt;/a&gt;)是一个台湾作曲家做的“作曲、編曲、即興和電腦音樂的 YouTube 教學頻道”, 从2014年到现在已经更新了200多集了. 每一集5-10分钟, 轻松有趣. 是很好的乐理课程. &lt;/p&gt;
&lt;p&gt;既然我同时在学习这两者, 我就干脆结合在一起学. 所以我对着好和弦的课程, 尽量给每一集写一段对应的Sonic-Pi代码. 目前写了10集左右, 如果我不太懒的话, 就持续更新. &lt;/p&gt;
&lt;p&gt;您可以将代码贴到sonic-pi的编辑器里然后运行, 就可以听到结果了. 推荐顺手改改其中的代码, 也许能够产生更好的效果. &lt;/p&gt;
&lt;p&gt;其中也有很多比较固定的音乐表达方式, 比如常用的和弦琶音生成、12小节蓝调. 我还可能会加入一些自己会的编程技巧, 比如马尔可夫链、状态转移之类. &lt;/p&gt;
&lt;p&gt;这些代码供抛砖引玉, 您可以直接拿到自己的sonic-pi音乐中.&lt;/p&gt;
&lt;p&gt;项目地址: 
&lt;a href="https://github.com/goldengrape/sonic_pi_for_nice_chord"&gt;https://github.com/goldengrape/sonic_pi_for_nice_chord&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/learn_sonic_pi_and_music_with_nicechord/</guid><pubDate>Wed, 20 Nov 2019 05:00:00 GMT</pubDate></item><item><title>音乐编程</title><link>https://goldengrape.github.io/posts/bulabula/music_coding/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;一个月前我买了一件电子乐器&lt;a href="https://artiphon.com/"&gt;artiphon instrument1&lt;/a&gt;, 然后就沉迷于音乐不能自拔. &lt;/p&gt;
&lt;h3&gt;sonic-pi&lt;/h3&gt;
&lt;p&gt;前几天重新翻看&lt;a href="https://nicechord.com/"&gt;好和弦&lt;/a&gt;, 其中&lt;a href="https://youtu.be/8nmSsjQgO7s?t=593"&gt;有一集&lt;/a&gt;说到用各种开源或者免费的软件制作音乐, 里面提到了&lt;a href="https://sonic-pi.net/"&gt;sonic-pi&lt;/a&gt;, 说可以用写程序的方法做现场音乐演出. &lt;/p&gt;
&lt;p&gt;于是我就去下载了&lt;a href="https://sonic-pi.net/"&gt;sonic-pi&lt;/a&gt;来玩, 确实很有趣. 可以play音符, 可以播放采样(sample), 也就是事先录制好的声音, 可以循环播放一组音符或者声音, 于是就有节拍、和弦, 还可以引入随机数, 可以产生变化的旋律. 还可以和midi硬件交互. &lt;/p&gt;
&lt;p&gt;我写了一段代码, 可以将我的&lt;a href="https://artiphon.com/"&gt;artiphon instrument1&lt;/a&gt; 中的特别低的低音(反正平时很少用到), 映射到和弦上, 于是我就可以用一个键来演奏需要好几个手指扭来扭去才能弹出的和弦了.&lt;a href="https://github.com/goldengrape/artiphon_gadget"&gt;代码&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://cdn.shopify.com/s/files/1/0229/7157/products/06_Connectivity_2eb1d183-14a2-48f3-98c0-ad7821be2f63_928x896.jpg?v=1569094989"&gt;&lt;/p&gt;
&lt;p&gt;我开始以为这只是一个专门用来写音乐的语言, 随着学习的深入. 怎么看到了越来越多的编程内容, 数组、分支、循环甚至函数. 看完了基础教程以后, 感觉这就是个图灵完备的计算机语言啊. 搜索了一下sonic-pi的来历, 果然, 其实sonic-pi是Ruby语言的一个方言. 没想到我为了弹吉他偷懒, 居然顺手学了一多半Ruby.&lt;/p&gt;
&lt;h3&gt;Live Coding Music&lt;/h3&gt;
&lt;p&gt;我对音乐编程更有兴趣了. 在github上搜了一下, 发现这个&lt;a href="https://github.com/pjagielski/awesome-live-coding-music"&gt;Awesome Live Coding Music&lt;/a&gt;的列表.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://github.com/supercollider/supercollider/"&gt;SuperCollider&lt;/a&gt;  Smalltalk-like (SClang)&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/samaaron/sonic-pi"&gt;Sonic Pi&lt;/a&gt;   Ruby&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/overtone/overtone"&gt;Overtone&lt;/a&gt;  Clojure&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/tidalcycles/Tidal"&gt;Tidal&lt;/a&gt;  Haskell&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/alda-lang/alda"&gt;Alda&lt;/a&gt;  Alda/Clojure&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/charlieroberts/Gibber"&gt;Gibber&lt;/a&gt; Javascript&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/digego/extempore"&gt;Extempore&lt;/a&gt;  Scheme-like&lt;/li&gt;
&lt;li&gt;&lt;a href="https://github.com/Qirky/FoxDot"&gt;FoxDot&lt;/a&gt; Python&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;大名鼎鼎的潮流解释型语言一网打尽呐, 艺术家们果然是技术先行者. &lt;/p&gt;
&lt;p&gt;感觉Live Coding Music非常适合儿童(/中老年)编程教育, &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;语法循序渐进,&lt;/li&gt;
&lt;li&gt;从语法上, play声音的命令远远比print、cout要有趣得多, 又比画个GUI简单得多. &lt;/li&gt;
&lt;li&gt;变量命名时, 音符本来就有do/re/mi,CDE, 123, 几类名字混在一起, 所以对变量应该比较容易理解.&lt;/li&gt;
&lt;li&gt;loop和循环天然对应.&lt;/li&gt;
&lt;li&gt;函数/块完全是复用性出发. &lt;/li&gt;
&lt;li&gt;多乐器、多音轨天然对应多线程.&lt;/li&gt;
&lt;li&gt;还有众多midi硬件、通讯问题&lt;/li&gt;
&lt;li&gt;写出来的东西很容易出成就感&lt;/li&gt;
&lt;li&gt;sonic-pi的口号是“没有错误, 只有机会”, 用在编程学习上, 不容易出现挫折感. 音乐这种东西, 规律出现了就不会太难听. &lt;/li&gt;
&lt;li&gt;编程的结果是产生音乐, 可以录制成wav、mp3文件, 很容易分享. 即使在别人没有安装什么额外软件的条件下, 也可以播放成果. 当然也可以放在soundcloud这样的音乐作品分享网站上. 比如我按照好和弦的指导做的&lt;a href="https://soundcloud.com/user-544914923/continuum-with-ghost-note"&gt;这首伴奏&lt;/a&gt;. 炫耀是互联网第一生产力, 也可以用来督促学习.&lt;/li&gt;
&lt;li&gt;编程技巧上, live coding对程序需求的修改又是大量、即时的, 演奏者自己就是个不断改需求的甲方, 所以慢慢各种编程技巧都会自然加入. 为了快速切换风格, 很可能要准备上各种设计模式. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以等我学完了Ruby(sonic-pi), 考虑把Clojure和一直没啃下来的JavaScript通过音乐来搞定. &lt;/p&gt;
&lt;h3&gt;对冲式学习&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;我最近学习弹吉他, 为了偷懒学会了Ruby, &lt;/li&gt;
&lt;li&gt;我之前想研究书法的用笔, 虽然没搞定写书法的机械臂, 却好好练习了书法.&lt;/li&gt;
&lt;li&gt;再往远想, 我高中时就是用Mathematica(那时候还是4.0, 现在都12了)写数学和物理作业. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以可以引入“对冲式学习”的概念: 同时学习两个东西, 互补没学好的风险, 其中:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一个是古老的对技巧要求很高的技艺, 比如乐器、书法、解数学物理题;&lt;/li&gt;
&lt;li&gt;一个是现代的可自动重复的工具, 有可能降低前者的难度, 比如音乐编程、CNC、mathematica. &lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;两者同时学习, 反正学会其中一个就很有收获, 也可能慢慢两者都会了. &lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/music_coding/</guid><pubDate>Wed, 20 Nov 2019 04:00:00 GMT</pubDate></item><item><title>纸牌加密</title><link>https://goldengrape.github.io/posts/bulabula/Solitaire_Encryption/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;这是记录在&lt;a href="https://book.douban.com/subject/27077159/"&gt;《编码宝典》&lt;/a&gt;附录里的一个手工加密方法.&lt;/p&gt;
&lt;p&gt;所谓手工加密, 就是完全不依赖于计算机, 靠一副纸牌就可以产生连续的加密用密钥. 纸牌的顺序就是密码, 所以密码的可能数量=54的阶乘, 大致是2.31 后面跟上71个0.&lt;/p&gt;
&lt;p&gt;军用级.&lt;/p&gt;
&lt;p&gt;很可惜, 这个加密方法并不是RSA那样的公私钥加密系统. 所以, 密码必须事先传递好. 加密/ 解密的双方, 必须知道同一副纸牌的顺序. 可以是双方把牌的顺序背下来, 也可以是双方各自持有一副同样顺序的纸牌. 我觉得背下来更保险, 貌似也是可以做到的.&lt;/p&gt;
&lt;p&gt;产生连续密钥的方法是这样的:
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;拿出纸牌, 面向上. 下面的讲解中, 我以一副新的纸牌为例, 起始纸牌的顺序如下, 这也是牌面的数值, 从1-52,53,54:
♣️A, ♣2...♣️K, ♦️A...♦️K, ♥️A...♥️K ♠️A...♠️K, 小王, 大王&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到小王, 向下移动一张, 如果小王已经是最后一张牌, 则挪到第一张. 
♣️A, ♣2...♣️K, ♦️A...♦️K, ♥️A...♥️K ♠️A...♠️K, 大王, 小王&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到大王, 向下移动两张. 
♣️A, 大王, ♣2...♣️K, ♦️A...♦️K, ♥️A...♥️K ♠️A...♠️K, 小王&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;做一次三切牌. 将两个王和其之间的牌作为B组, 从第一张到上面的王前一张是A组, 从下面的王后一张到最后一张牌是C组. 交换A组和C组的牌, 从A-B-C,变换成C-B-A.
大王, ♣2...♣️K, ♦️A...♦️K, ♥️A...♥️K ♠️A...♠️K, 小王, ♣️A&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;找到最后一张牌, 看其数字N(大小王都按照53来计数), 从第一张开始数N张牌, 作为A组, 第N+1张牌到倒数第2张牌为B组, 交换A组和B组,
♣2...♣️K, ♦️A...♦️K, ♥️A...♥️K ♠️A...♠️K, 小王, 大王, ♣️A&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;看第一张牌的数字N, 数N张牌, 找到第N+1张牌, 就是一个输出的密钥了. 这个例子中是♣4. 
♣2, ♣3, [♣4]...♣️K, ♦️A...♦️K, ♥️A...♥️K ♠️A...♠️K, 小王, 大王, ♣️A&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;重复上面步骤1-5, 连续产生新的密钥. &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对于每一个密钥, 用法就是简单的移位密码, 比如♣4的数值就是4, 如果比26大, 那么就除以26求余数, 比如30 mod 26=4. 那么如果要加密字母A, 就是从A+4, 数B,C,D,E, 得到字母E. &lt;/p&gt;
&lt;p&gt;如果是解密, 则只是做减法, 比如得到的密文是E, 减去4, 得到原文A. &lt;/p&gt;
&lt;p&gt;操作要练习几次, 自己容易乱, 特别是数数的时候.&lt;/p&gt;
&lt;p&gt;按照作者的说明, 如果从一副新牌开始, 则连续输出的密钥是:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;49&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="mi"&gt;24&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="mi"&gt;51&lt;/span&gt; &lt;span class="mi"&gt;44&lt;/span&gt; &lt;span class="mi"&gt;6&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt; &lt;span class="mi"&gt;33&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;其中遇到大王小王则跳过. &lt;/p&gt;
&lt;p&gt;如果对AAAAA AAAAA加密, 得到的密文结果应当是EXKYI  ZSGEH.&lt;/p&gt;
&lt;p&gt;注意:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不可以用同一个密码去加密两个不同的信息!&lt;/li&gt;
&lt;li&gt;不可以用同一个密码去加密两个不同的信息!&lt;/li&gt;
&lt;li&gt;不可以用同一个密码去加密两个不同的信息!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为将两个密文相减, 密钥的作用就消除了, 然后大概可以通过统计学的方式进行解密. &lt;/p&gt;
&lt;p&gt;我这段时间正在学习C++, 所以也用C++实现了一遍纸牌加密的算法. 代码在&lt;a href="https://github.com/goldengrape/SolitaireEncryption"&gt;https://github.com/goldengrape/SolitaireEncryption&lt;/a&gt; 还在调试中, 暂时和作者的结果有一点点区别(应该得到51的那个数, 我得到了54, 前后都一样, 很诡异). &lt;/p&gt;
&lt;p&gt;参考资料:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://www.schneier.com/academic/solitaire/"&gt;https://www.schneier.com/academic/solitaire/&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/Solitaire_Encryption/</guid><pubDate>Tue, 01 Oct 2019 04:00:00 GMT</pubDate></item><item><title>理解的含义</title><link>https://goldengrape.github.io/posts/bulabula/%20meaning_of_understanding/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;理解: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我知道这道题我做对了&lt;/li&gt;
&lt;li&gt;我知道你做错了&lt;/li&gt;
&lt;li&gt;我知道你错在哪里了&lt;/li&gt;
&lt;li&gt;甚至我知道你为什么会出这个错误&lt;ul&gt;
&lt;li&gt;我知道你错在哪里, 并不意味我认为你这道题做对了.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;或者&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;我看到你的答案与我的不同&lt;/li&gt;
&lt;li&gt;我认真分析你的解题过程和我的解题过程的差异&lt;/li&gt;
&lt;li&gt;我发现我做错了&lt;/li&gt;
&lt;li&gt;于是我改了过来&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/%20meaning_of_understanding/</guid><pubDate>Wed, 04 Sep 2019 16:00:00 GMT</pubDate></item><item><title>以电视剧的方式工业化生产MOOC</title><link>https://goldengrape.github.io/posts/bulabula/Industrial_production_of_MOOC_as_TV_series/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;在2013年的时候, 我写过《以电视剧的方式工业化生产MOOC》, 提出&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;网络课程可以『电视剧化』的。
完！全！可！以！雇！佣！演！员！ 来！表！演！讲！课！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;昨天发现一个Socratica做的抽象代数课程(&lt;a href="https://www.youtube.com/playlist?list=PLi01XoE8jYoi3SgnnGorR_XOW3IcK-TP6"&gt;Youtube链接&lt;/a&gt;, &lt;a href="https://www.bilibili.com/video/av16765924"&gt;国内Bilibili搬运&lt;/a&gt; ), 课程浅显易懂, 而且老师非常漂亮, 甚至有一点魅惑(参考第5节习题课), 一口气就看了20多节课, 把以前在看&lt;a href="http://www.xuetangx.com/courses/course-v1:TsinghuaX+60240013X+sp/about"&gt;《组合数学》&lt;/a&gt;时留下的群论补充了不少. &lt;/p&gt;
&lt;p&gt;&lt;img alt="21-Simple Groups - Abstract Algebra-0001" src="https://i.loli.net/2019/09/01/uxNL68KgnkvZBFO.png"&gt;&lt;/p&gt;
&lt;p&gt;今天经&lt;a href="https://twitter.com/goophile/status/1168011061825425409"&gt;@goophile&lt;/a&gt; 提示, 原来讲课老师是&lt;a href="https://en.wikipedia.org/wiki/Liliana_Castro"&gt;Liliana Castro&lt;/a&gt; 一位巴西女演员, 演过不少电影和电视剧. &lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://upload.wikimedia.org/wikipedia/commons/thumb/9/9e/Liliana_Castro01.jpg/640px-Liliana_Castro01.jpg"&gt;&lt;/p&gt;
&lt;p&gt;真是表演与公开课结合的典范. 想到其实是一位女演员在讲解李群, 有一种&lt;a href="https://zh.wikipedia.org/zh-hans/%E4%B8%AD%E6%96%87%E6%88%BF%E9%97%B4"&gt;中文屋&lt;/a&gt; 的实验戏剧之感.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;hr&gt;
&lt;p&gt;以下是2013年写的blog&lt;/p&gt;
&lt;p&gt;MOOC有一个好处，就是非实时交流，很多人把这个当成弊端，但其实非实时交流可以使课程制作过程工业化，也就是将老师从一个人拆分成：知识顾问、编剧、导演、演员、配音、配乐、多媒体制作等很多个互相独立的工种。
在此之前课堂上必须由一个人完成，于是会有很多人学问很好但是讲不出来；会讲，但是形象不佳；形象尚可但情绪不到位；情绪有了，却口头语、小动作多；课堂表演不错PPT配色则一塌糊涂；干脆不用PPT了板书的字却拿不出手……所以出一个讲课很好的老师很难。&lt;/p&gt;
&lt;p&gt;网络课程可以『电视剧化』的。&lt;/p&gt;
&lt;p&gt;完！全！可！以！雇！佣！演！员！ 来！表！演！讲！课！&lt;/p&gt;
&lt;p&gt;《生活大爆炸》这个美剧表明，理论物理学博士是可以由一个不懂物理的演员演出来的。
http://tv.sohu.com/s2013/4402/s383695385/
http://tv.sohu.com/s2013/4402/s383695385/&lt;/p&gt;
&lt;p&gt;TBBT表明人们可以相信一个演员演出来的理论物理博士是一个理论物理博士。&lt;/p&gt;
&lt;p&gt;同理，讲课也是。&lt;/p&gt;
&lt;p&gt;去表演系请专业演员，把他/她按照学术明星那样包装，幕后由一批顶尖的专业教授为他来写讲稿、教案，由编剧组织情节，甚至还应该埋下一些悬念。讲课的时候用分镜头，每一句台词在导演的监督下，情绪饱满的演很多遍，不断的喊cut，直到精确的把知识通过情绪传达给观众以后才罢休。&lt;/p&gt;
&lt;p&gt;网络课程制作起来并不困难，要点是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;每15分钟一个视频，&lt;/li&gt;
&lt;li&gt;只讲一个知识点，&lt;/li&gt;
&lt;li&gt;不要用PPT!!! 最好是写板书，&lt;/li&gt;
&lt;li&gt;要有真人的活动&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;家用摄像机在办公室录制都可以，很多coursera、edx上的课程都是在教授的办公室里录制的，直接在课堂上录制也可以，但要注意声音应该单独用话筒采集。&lt;/p&gt;
&lt;p&gt;由于老师的站位一般活动范围不大，甚至用单反录制效果还会更好。(2019年补充, 使用DJI的OSMO mobile 3, 接手机拍摄, 可以自动跟踪, 效果不错.)&lt;/p&gt;
&lt;p&gt;这是几门老师表演不错的课程：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;model thinking：
    *（人物活动与板书/ppt之间的关系）&lt;/li&gt;
&lt;li&gt;生物学导论：
    *（情绪！讲课是要有激情的）&lt;/li&gt;
&lt;li&gt;台湾大学的几门课也还不错
https://www.coursera.org/taiwan&lt;/li&gt;
&lt;li&gt;沃顿的《市场导论》：https://www.coursera.org/course/marketing
已经可以看出是团队制作的样子了：&lt;ul&gt;
&lt;li&gt;讲产品的时候就到商场里面去取外景；&lt;/li&gt;
&lt;li&gt;摄像的用光、虚化之类是专业人士所为；&lt;/li&gt;
&lt;li&gt;老师从头到尾讲话一个错误和停顿都没有，大概是反复录制剪辑过……确实是市场部的人做事的风格。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;以电视剧的方式制作出来的课程，也可以按照电视剧的方式来定价、出售和盈利，前后也可以插播广告，捧出来的明星也可以代言产品，没有长出锥子脸的演员也不必自怨自艾。&lt;/p&gt;
&lt;p&gt;康庄大道&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/Industrial_production_of_MOOC_as_TV_series/</guid><pubDate>Sun, 01 Sep 2019 04:00:00 GMT</pubDate></item><item><title>如何快速进入工作学习状态</title><link>https://goldengrape.github.io/posts/bulabula/How_to_get_into_work_or_study_quickly/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;h3&gt;工作日前的准备:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;前一天晚上睡前确保在微信“发现页”中已经关闭了朋友圈. &lt;/li&gt;
&lt;li&gt;前一天晚上或之前, 订阅好“无忧公主的数学时间”, 微信号是 wuyoushuxue .&lt;/li&gt;
&lt;li&gt;前一天晚上或之前, 将“无忧公主的数学时间” “添加到桌面”.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;工作日当日早上:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;工作日当天早起, 不要打开微信, 先点击桌面上的“无忧公主的数学时间”快捷方式.&lt;/li&gt;
&lt;li&gt;看一道数学题, 如果一眼就能看出答案, 另外找一道. &lt;/li&gt;
&lt;li&gt;开始日常的洗漱、吃早饭、通勤……, 开始工作.&lt;/li&gt;
&lt;li&gt;注意, 通勤时不要看朋友圈以及其他社交网络, 不要看新闻, 可以通过“讯飞有声”听电子书.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;工作开始后:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;首先进行输出工作, 至少一个番茄时间段(25分钟). 所谓输出就是自己写东西, 比如写代码、写email、写文章、做ppt等.&lt;/li&gt;
&lt;li&gt;休息时可以拿出一张草稿纸, 试着解决无忧公主出的数学题. &lt;/li&gt;
&lt;li&gt;第一个输出时间段之后才可以摸鱼.&lt;/li&gt;
&lt;li&gt;如果刷微信朋友圈, 可以临时开启“发现页”中的朋友圈, 看完后及时关闭.&lt;/li&gt;
&lt;li&gt;刷其他社交网络类似, 尽快及时关闭. &lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;以上流程的关键是:&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;在早起后第一时间, 先往脑子里装一道数学题. 并使之保持悬而未决的状态.&lt;/li&gt;
&lt;li&gt;第一组输出之后才开始允许输入. &lt;/li&gt;
&lt;li&gt;为浏览新闻、社交网络造成一定的困难.&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;以上流程对我自己有一定的作用.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h2&gt;可能的原理&lt;/h2&gt;
&lt;p&gt;工作记忆内存一般只有4个扩展槽, 早起装一道数学题, 并且暂时不准使用草稿纸, 导致这道数学题一直占据一个工作内存槽. &lt;/p&gt;
&lt;p&gt;在保持思考数学题的时候, 更容易以客观视角看待问题, 不容易被情绪左右. 而新闻与社交网络中的信息主要以强烈情绪争夺注意力. 因此在第一时间植入数学题后, 能够增强一点免疫. 也就是说, 看到刷屏标题后第一反应不是好奇, 而是“关我屁事”. &lt;/p&gt;
&lt;p&gt;如果要加强效果, 可以将手机放在包里, 不取出, 不放在手边, 反正有信息也会响, 或者手环会提醒.&lt;/p&gt;
&lt;p&gt;如果要更增强效果, 在第一个工作输出时, 使用笔和纸, 不打开电脑.&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/How_to_get_into_work_or_study_quickly/</guid><pubDate>Sat, 17 Aug 2019 04:00:00 GMT</pubDate></item><item><title>金葡流简报术</title><link>https://goldengrape.github.io/posts/bulabula/goldengrape_style_ppt/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;h3&gt;简报两大困难&lt;/h3&gt;
&lt;p&gt;根据我多年来做简报，包括但不限于PPT/ Keynote的经验，做简报有两大困难：&lt;strong&gt;一不做二不休&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;所谓“一不做”，是不开始做，严重的拖延症发作，几张PPT可能要做上一个星期。只要打开电脑就不可避免会被其他的网站所影响，即使在查阅与简报相关的资料，也可能在维基百科甚至是在pubmed中迷失方向，看了一大堆不相干的文件，学会了许多不相干的知识，但PPT还是没有动。&lt;/p&gt;
&lt;p&gt;另一大困难是“二不休”，可能直到deadline绕颈，被逼不得不动手以后，又在PPT中塞入了太多的内容，写下了太多的文字，加入了太多的动画，在真正演讲的时候排练不足，时间控制不好，讲着讲着发觉时间不够用了，于是不断的“过、过、下一张、下一张”，之前的辛苦制作，给浪费了许多，还给人留下了准备仓促的坏印象。&lt;/p&gt;
&lt;h3&gt;金葡流简报术&lt;/h3&gt;
&lt;p&gt;综上，我根据自己平时的工作特点，开发了一种做简报的新流程，被网友&lt;a href="https://twitter.com/octw"&gt;@octw&lt;/a&gt; 赐名为“金葡流简报术”。&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;这个简报术很容易，分为以下几个步骤：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用笔和纸先写下演讲时要说的讲稿，&lt;/li&gt;
&lt;li&gt;用语音输入的软件将写好的讲稿输入电脑，分段粘贴进幻灯片的备注中，&lt;/li&gt;
&lt;li&gt;根据每页的讲稿，来选择图片图表，或书写文字，&lt;/li&gt;
&lt;li&gt;其中，如果是书写文字，推荐使用毛笔来写。写完后用Adobe Capture转换成svg，再转换成PPT或者Keynote中的“形状”。&lt;/li&gt;
&lt;li&gt;​然后是利用自己写好的程序，将带有备注的PPT生成由TTS转换语音后的视频，然后自己看看，再作少许修改、排练。也可以简单使用朗读软件，将讲稿文本朗读出来，记录个时间。甚至可以自己去充当朗读软件，只要对着讲稿念出来，进行幻灯片录制即可。​&lt;/li&gt;
&lt;li&gt;录好的语音幻灯可以导出成视频，既可以存档又可以传到网上分享，还可以给听众或学生作为课后复习&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;这个简报术的特点就是&lt;strong&gt;慢&lt;/strong&gt;，&lt;strong&gt;目的也是慢&lt;/strong&gt;，通过缓慢的过程是进入使自己进入工作流、心流的状态。&lt;/p&gt;
&lt;h3&gt;免拖延&lt;/h3&gt;
&lt;p&gt;在写讲稿的时候最好选择一个安静不受干扰的环境，比如图书馆，给自己留出一定的工作时间，比如上一个25分钟的倒计时，还可以给自己准备一点小小的奖励，比如一块巧克力，但只能在连续工作25分钟以后才可以吃一小块，&lt;/p&gt;
&lt;p&gt;最后也是最重要的准备，将电脑和手机放到够不着的地方，比如图书馆的储物柜里锁上，连续工作25分钟以后才能去查看一下微信和邮件之类。&lt;/p&gt;
&lt;p&gt;这些都是避免被干扰避免触发拖延行为的好方法，更详细的步骤，请参考coursera上面的一门课叫做&lt;a href="https://www.coursera.org/learn/learning-how-to-learn"&gt;learning how to learn&lt;/a&gt;，学习如何学习。其中关于拖延症的治疗讲得很好，我拖延了几个星期以后学完了，受益匪浅。&lt;/p&gt;
&lt;h3&gt;写作文&lt;/h3&gt;
&lt;p&gt;撰写演讲讲稿的过程，其实我们自己已经受了很多年的训练了，就是&lt;strong&gt;写作文&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;一切均按照写作文的流程来，首先给自己出一个作文题，根据简报内容，根据简报要讲的目的写出一个作文题，然后估计出字数。&lt;/p&gt;
&lt;p&gt;常见的演讲学术会议发言通常是5到10分钟，商业演讲、小讲座可能是15到20分钟，一堂课一般是30到40分钟。通过时间来估计字数，播音员的语速可能会达到每分钟300字以上。但是作为演讲，是要让台下能够听清楚，并理解。因此每分钟最好控制在150到200字。&lt;/p&gt;
&lt;p&gt;那么一个10分钟的小演讲小讲座大约是1500字到2000字，高考作文是要求800字以上，写作时间一般至少留出40分钟，于是你大约需要工作1到2个小时可以写完讲稿。&lt;/p&gt;
&lt;p&gt;写讲稿的时候，如果有什么需要查询的细节内容，可以先画出空格，空着。等完全写完了之后再去打开电脑查找，很多人常年不写字了，可能提笔忘字，正好借此机会多多练习写字，龙飞凤舞即可，是供自己阅读的草稿，不必太工整。&lt;/p&gt;
&lt;p&gt;一旦开始动笔写，恐怕自己会很惊讶于自己的速度。因为通常要准备的简报都是自己熟悉的东西。之前的拖延其实也常常在心中想着草稿，只是没有将其记录下来，所以一旦动笔开始，就写得飞快。&lt;/p&gt;
&lt;p&gt;对了，在行云流水写的时候要有一支好写的笔，就给钢笔灌好墨水或者使用舒服的自动铅笔之类。&lt;/p&gt;
&lt;p&gt;手写讲稿，令我对演讲内容非常熟悉，自己手写的要比输入的印象更深刻，不大可能出现讲着讲着忘词或者卡壳的情况，手写的速度大约是每分钟20字，演讲时说话的速度是每分钟200字，有着10倍的差距，因此我有充足的时间来组织语言。更因为手写慢，所以我这样懒散的人，必定尽量言简意赅。&lt;/p&gt;
&lt;p&gt;用纸和笔还有一大好处是，要增加一倍的显示面积，只需要再添加一张纸就好了。我可以随时调用出之前写的部分或者提纲，也可以随手圈出一段，画个箭头指向另一处。如果临时想到什么，比如所需插图的样子，或者示意图的画法就可以直接在纸上潦草画出讲稿。&lt;/p&gt;
&lt;p&gt;写完之后我的工作就算完成一大半了，有一份手写稿，甚至不必做PPT，我也应该可以在现场写板书的，要知道写板书才是讲课最高境界，PPT什么的都是下等。&lt;/p&gt;
&lt;h3&gt;后处理&lt;/h3&gt;
&lt;p&gt;将手写稿变成电子版，理论上可以用OCR软件，但实际用起来效果并不好，倒是用语音输入软件，念一遍，又快又好。有些过于书面的表达或者容易引起听觉错误的表达方式，在语音输入的时候也比较容易发现。&lt;/p&gt;
&lt;p&gt;录入完成后又是语文课的基本功：分段摘出重点作为每一张幻灯片的展示内容。尽量避免在幻灯片上留下一堆文字，其实留下太多文字是不自信的表现，幻灯片上的大段文字往往是给自己照着念做准备的。现在有了手写稿，应当有充分的信心，所以尽量少写文字。&lt;/p&gt;
&lt;p&gt;能够用图片表达的搜索出图片，需要图表的放入图表，关键数据怕观众听不清才可以打字的方式写出来，最后多多少少还是会有些标题什么的，我建议找比手写更慢的方式：用毛笔来写。&lt;/p&gt;
&lt;p&gt;比起钢笔每分钟20字的速度，我估计毛笔还要再慢一个数量级，每分钟两个字吧，这是最具有个性化的艺术字了，孙过庭说过“书则一字可见其心”。&lt;/p&gt;
&lt;p&gt;​毛笔字可以加工成幻灯片中的“形状”，我&lt;a href="https://goldengrape.github.io/posts/bulabula/import_calligraphy_to_keynote_as_shape"&gt;另外写过教程&lt;/a&gt;，不再详述。转换成形状以后可以有很多华丽的处理。现代的平面展示媒介是投影仪，而不再是宣纸，书法当然也可以与时俱进，&lt;/p&gt;
&lt;p&gt;一切都完成后，可以再把文字转换成语音，这我也做好了&lt;a href="https://goldengrape.github.io/posts/bulabula/fullautomatic_dubbing_slide"&gt;现成的程序&lt;/a&gt;，转好后自己可以听听效果。修改完成后导出成视频可以供大家分享，&lt;/p&gt;
&lt;p&gt;以上就是金葡流简报术的基本方法，驽马十驾功在不舍，输出慢一点完成更快。&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/goldengrape_style_ppt/</guid><pubDate>Tue, 13 Aug 2019 10:00:00 GMT</pubDate></item><item><title>成人自学的困难</title><link>https://goldengrape.github.io/posts/bulabula/adult_self_study/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;昨天翻译完了&lt;a href="https://goldengrape.github.io/posts/python/15_pages_python_tutorial_translated/"&gt;15页的python教程&lt;/a&gt;，想就成人自学再说说。&lt;/p&gt;
&lt;h2&gt;现象&lt;/h2&gt;
&lt;p&gt;python上手应该很容易，如果有老师在身边督促指导，就用这15页的教程，恐怕快则一下午，慢则一周就可以自己写一些简单的应用了。&lt;/p&gt;
&lt;p&gt;但学python真的花费了我很长很长时间，我发现我从2003年就开始学习python，一直学到2017年才算学会了基础（因此万幸躲过了python 2）。用时14年，而不是7天。&lt;/p&gt;
&lt;h2&gt;原因&lt;/h2&gt;
&lt;p&gt;究其原因，我觉得是因为&lt;strong&gt;放弃太容易&lt;/strong&gt;。&lt;/p&gt;
&lt;p&gt;成年人有稳定的收入，有常规的工作、生活。要维持这些，以前学会的东西已经够用了。学习新东西在短期内并不会对生活造成什么太大改善，如果放弃学习，短期内也不会产生什么不良后果。&lt;/p&gt;
&lt;p&gt;相比起来学生时代就非常不同，别说放弃一门课，就是一门课的成绩稍微下降一些，也会寝食难安。如果挂科了，简直是天塌下来一半。想起来我大一的时候每周40节课上满，必修加选修上了13门课。（没错，我翘了一门必修课在同一时间选了另一门选修课）。&lt;/p&gt;
&lt;p&gt;理论上，要把学习压力重新加在自己身上，成人也可以快速学习，大家都是学霸出身，没什么理由学不会。但实际上，虚拟的压力并不是压力，没有实质性的威胁算不上威胁。&lt;/p&gt;
&lt;h2&gt;解决方案：&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;尽量平滑学习曲线：放弃的理由常常是一丝一毫的困难，一旦放下就很难再捡起来，或者很久以后才能捡起来。那么，就尽量不要制造额外的一丝一毫的困难吧，比如：&lt;/li&gt;
&lt;li&gt;用1500页的书去学python。天呐，1500页的小说我都要犹豫是不是去看，何况1500的教科书。&lt;a href="https://github.com/goldengrape/PartIA-Computing-Michaelmas-zh-CN"&gt;15页的python教程&lt;/a&gt;已经都觉得长了。&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;在本地电脑上用pip安装python库。类似可以推广到在本地电脑上安装开发环境学习某种语言。那绝对是可怕的拦路虎。&lt;a href="https://repl.it"&gt;REPL.it&lt;/a&gt;上已经做好了几乎所有语言，打开网页用就行了。或者用各种&lt;a href="https://goldengrape.github.io/posts/python/na-xie-zai-xian-de-jupyter/"&gt;在线的jupyter&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;享受过程(process)，而不是追求结果(product)。这是从coursera课程&lt;a href="https://www.coursera.org/learn/learning-how-to-learn/home/welcome"&gt;“学习如何学习”&lt;/a&gt;上学来的一招。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;这一部分的视频&lt;a href="https://www.youtube.com/watch?v=gCKcqLVGnSg&amp;amp;list=PLievC1UeaSOD3EBaJaHstTKIXS51Sfjwo&amp;amp;index=20&amp;amp;t=0s"&gt;在此&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;就是说把学习作为日常消遣的一个选项，既然都是kill time，那么看电视剧和看公开课也是可能互换的。&lt;a href="https://www.coursera.org/learn/shiji"&gt;《史记》&lt;/a&gt;、&lt;a href="http://www.xuetangx.com/courses/course-v1:TsinghuaX+00612642X+sp/about"&gt;《资治通鉴》&lt;/a&gt;里，随便翻出个故事，不比现在电视剧里的情节狗血多了。&lt;ul&gt;
&lt;li&gt;市场环境不好，公司里能干的员工一个接一个辞职。有一天一个基层程序员刚跑，CFO就去追了，追回来以后还让CEO给提升到CTO的职位。CEO看了看简历，该程序员原来在竞争对手那边一直就是个小PM，没做过什么大项目，还曾经被拖库攻击过。但CFO坚持。现在如果你是CEO，该怎么办？剧情狗血吧，哪有这种公司会发生这种事情呢。这个故事又叫做“萧何月下追韩信”。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;既然是享受过程，就不要问自己学了多少，学到什么水平了，练习慢慢做，经常做就可以。三天打鱼两天晒网是最佳，不要给自己太大压力，也不要有太大幻想。“无挂碍故，远离颠倒梦想，究竟涅槃”。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;比如，这是前一段练字的结果，写到开心就好。
&lt;img alt="未命名" src="https://i.loli.net/2019/08/03/AuevRE7mDhYxKaj.png"&gt;&lt;/p&gt;
&lt;p&gt;补充一下：&lt;/p&gt;
&lt;p&gt;享受学习的过程本身，享受学到的知识和技能，这种“自由而无用”的事情，只有成人才能体会到乐趣。儿童是很难从练琴、练字、练球、练拳……体会到乐趣的。能够把重复行为作为冥想过程来享受的，只能是衣食无忧的成人。&lt;/p&gt;
&lt;h2&gt;误解&lt;/h2&gt;
&lt;p&gt;贴出本文后，&lt;a href="https://twitter.com/eMuyi/status/1157559988799209472"&gt;eMuyi认为&lt;/a&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;没有明确 motivation 的学习就是很低效。如果有一个明确目标，比如建立个人网站，学编程就很简单。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;有明确需求驱动的学习过程确实是高效的，但是这也是最容易被放弃的。对于成年人的学习，最容易质疑的就是需求本身。比如“建立个人网站”，是自己学成全栈，还是直接找个静态网站生成工具然后写写markdown？甚至找个外包花钱做一个。这样一比较，得出的结论很可能是“我这岁数再学习______实属浪费时间”。&lt;/p&gt;
&lt;p&gt;很可能在一定经济实力之后，各种明确的目标都是可以被购买的。而自身的时间价值如果又很高，两者比较就容易选择外包购买而不是自己学习。这和年轻学生又不一样，当学生的时候外包买不起，只好自己学。&lt;/p&gt;
&lt;p&gt;欲速则不达。&lt;/p&gt;
&lt;p&gt;所以前面我给出的解决方案中，就是要&lt;strong&gt;放弃&lt;/strong&gt;明确的学习目的，转而体会学习过程中的乐趣。这种乐趣才是持久的，可记忆的。&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/adult_self_study/</guid><pubDate>Sat, 03 Aug 2019 04:01:00 GMT</pubDate></item><item><title>公理设计笔记（1）</title><link>https://goldengrape.github.io/posts/bulabula/axiomatic_design_note_1/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;一个夏日的上午，我在图书馆里闲逛（据@cxqn 说这是有闲阶级才能做的事情），偶遇一本&lt;a href="https://book.douban.com/subject/1238993/"&gt;《公理设计》&lt;/a&gt;，看书名觉得好奇于是拿出来翻了翻，觉得内容不错。网上还可以找到一篇文献&lt;a href="http://blog.sciencenet.cn/home.php?mod=attachment&amp;amp;id=40989"&gt;《公理设计理论及其应用》&lt;/a&gt; 做了一些基本介绍。&lt;/p&gt;
&lt;p&gt;但看起来这是一门课了，所以估计会有公开课来讲解。于是上网搜了一下，还真是找到了&lt;a href="https://www.youtube.com/playlist?list=PLMDNnNJK3B1UlhdIfsFaezkHWbofX7Blj"&gt;MFE 594 An Introduction to Axiomatic Design&lt;/a&gt;，有4节课，大约一共4个多小时，花了两天看完，再回来翻翻书，有一些收获，决定写一点笔记。&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;首先从1862年11月13日的&lt;a href="https://www.history.com/this-day-in-history/u-s-s-monitor-battles-c-s-s-virginia"&gt;一场海战&lt;/a&gt;讲起。这场海战“标志着蒸汽动力铁甲舰新时代的到来。”&lt;/p&gt;
&lt;p&gt;南方C.S.S的Virginia号战舰，体型庞大，非常凶悍。已经击沉了两艘联邦军舰。北方U.S.S派出了Monitor号，一艘小得多的军舰。&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://www.battlefields.org/sites/default/files/styles/gallery_item/public/thumbnails/image/comparison-of-the-css_0.jpg"&gt;
图片来自https://www.battlefields.org/learn/galleries/battle-hampton-roads&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align="left"&gt;&lt;/th&gt;
&lt;th align="left"&gt;USS Monitor&lt;/th&gt;
&lt;th align="left"&gt;CSS Virginia&lt;/th&gt;
&lt;th align="left"&gt;V : M&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td align="left"&gt;长度&lt;/td&gt;
&lt;td align="left"&gt;173.00ft&lt;/td&gt;
&lt;td align="left"&gt;262.75 ft&lt;/td&gt;
&lt;td align="left"&gt;1.52&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;宽度&lt;/td&gt;
&lt;td align="left"&gt;41.33 ft&lt;/td&gt;
&lt;td align="left"&gt;51.16 ft&lt;/td&gt;
&lt;td align="left"&gt;1.24&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;排水量&lt;/td&gt;
&lt;td align="left"&gt;987 tons&lt;/td&gt;
&lt;td align="left"&gt;3,200 tons&lt;/td&gt;
&lt;td align="left"&gt;3.25&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;船员&lt;/td&gt;
&lt;td align="left"&gt;52&lt;/td&gt;
&lt;td align="left"&gt;350&lt;/td&gt;
&lt;td align="left"&gt;6.73&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td align="left"&gt;火炮&lt;/td&gt;
&lt;td align="left"&gt;2&lt;/td&gt;
&lt;td align="left"&gt;12&lt;/td&gt;
&lt;td align="left"&gt;6&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;这个比例看起来就是大雄vs胖虎之战。&lt;/p&gt;
&lt;p&gt;CSS Virginia的特点除了大，还有就是都是固定炮塔，两侧和首尾有很多门炮。而USS Monitor有一个可以旋转的炮台。&lt;/p&gt;
&lt;p&gt;一条战舰需要满足两个功能：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;调整航行方向&lt;/li&gt;
&lt;li&gt;调整炮击方向&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;对于CSS Virginia，这两个功能需求是“耦合”couple 的，要改变炮击方向，就需要将船只转向。而对于USS Monitor，这两个功能需求则是“解耦合”decouple 的，航行方向与炮击方向无关，炮击方向可以独立调整。&lt;/p&gt;
&lt;p&gt;于是Monitor一直尽量守在Virginia的射击死角攻击，而Virginia则必须不断绕开，于是就不断绕圈。这两条船打了4个小时，Virginia撤退了。&lt;/p&gt;
&lt;p&gt;这是视频公开课上老师讲的一个有趣的例子。老师在课上讲解的时候说Virginia被Monitor给neutralize了，所谓&lt;a href="https://www.vocabulary.com/dictionary/neutralize"&gt;neutralize&lt;/a&gt;，军事上解释为 make incapable of military action，丧失军事能力。但按照history.com的记录，Virginia只是撤退了，毕竟Monitor只有两门炮，而Virginia还有很厚的铁甲。但大雄把胖虎打到先撤退跑了，如果再来一艘结果就不一定了。&lt;/p&gt;
&lt;p&gt;可以引出设计公理的第一条：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;满足功能需求（Functional Requirements, FRs)的参数设计（Design Parameter, DPs) 应当要解耦合（decouple）&lt;/p&gt;
&lt;/blockquote&gt;&lt;/div&gt;</description><category>公理设计</category><guid>https://goldengrape.github.io/posts/bulabula/axiomatic_design_note_1/</guid><pubDate>Wed, 17 Jul 2019 10:00:00 GMT</pubDate></item></channel></rss>