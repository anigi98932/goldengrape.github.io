<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:dc="http://purl.org/dc/elements/1.1/"><channel><title>GoldenGrape's Blog</title><link>https://goldengrape.github.io/</link><description>This is a blog for GoldenGrape</description><atom:link href="https://goldengrape.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><lastBuildDate>Thu, 28 Dec 2017 09:03:20 GMT</lastBuildDate><generator>https://getnikola.com/</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>ResNet编写注意事项</title><link>https://goldengrape.github.io/blog/Machine_Learning/ResNet-note/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;Deeplearning.ai 第4门课程&amp;lt;&lt;a href="https://www.coursera.org/learn/convolutional-neural-networks/home/welcome"&gt;卷积神经网络&lt;/a&gt;&amp;gt;,  终于开始讲解"现代"的深度神经网络了. 第二周也迅速开始使用Keras进行神经网络的编写.&lt;/p&gt;
&lt;p&gt;虽然Keras已经抽象程度很高了, 只需要设定基本的参数, 就可以建立网络层, 不至于在实现细节中迷失,  但是仍然会有些小坑容易踩.&lt;/p&gt;
&lt;p&gt;下面是一些经验:
&lt;/p&gt;&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/Machine_Learning/ResNet-note/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/Machine_Learning/ResNet-note/</guid><pubDate>Thu, 28 Dec 2017 07:00:22 GMT</pubDate></item><item><title>自动添加Numba-jit修饰</title><link>https://goldengrape.github.io/blog/python/auto-numba-jit/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;今天拖延症犯了. 我的拖延症表现是狂做另一件以后可能用到, 但现在无关紧要的事情. 比如加速python的运行速度.&lt;/p&gt;
&lt;h2&gt;Numba&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://numba.pydata.org/"&gt;Numba&lt;/a&gt;是个很神奇的东西, 加上以后可以提高python的运行速度.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/python/auto-numba-jit/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/python/auto-numba-jit/</guid><pubDate>Thu, 28 Dec 2017 07:00:20 GMT</pubDate></item><item><title>中国古代数学算法的Python实现</title><link>https://goldengrape.github.io/blog/python/python-old-chinese/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;看了这篇《&lt;a href="https://mp.weixin.qq.com/s?__biz=MzA5NDkzNjIwMg==&amp;amp;mid=2651662431&amp;amp;idx=1&amp;amp;sn=21ae67f8ed94ea960d92734afc384fc1&amp;amp;chksm=8bbe85babcc90cac200fabd65d5494bbbec81792420ba8771ad02bc324257495cffdcd57afcd"&gt;没有定理的中国古代数学，如何站在世界之巅？&lt;/a&gt;》。虽然我觉得题目很标题党，不过里面的内容很有趣啊，讲解了中国古代数学里的几个算法。由于我正在学Python，所以自然就拿来练手了。&lt;/p&gt;
&lt;p&gt;可以运行的代码&lt;a href="https://repl.it/HgCF/30"&gt;在这里&lt;/a&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/python/python-old-chinese/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/python/python-old-chinese/</guid><pubDate>Thu, 28 Dec 2017 07:00:15 GMT</pubDate></item><item><title>治疗近视的三个iPad游戏</title><link>https://goldengrape.github.io/blog/ophthalmology/3-ipad-games-for-myopia/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;h2&gt;当然并没有!&lt;/h2&gt;
&lt;p&gt;近视, 通常(不通常的那些更麻烦, 不要幻想)是眼球(眼轴)变长, 变长的眼轴是不可能再缩短回来的. 不久前发现一个不错的比喻: "孩子长高了还能再变矮么? "
&lt;/p&gt;&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/ophthalmology/3-ipad-games-for-myopia/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/ophthalmology/3-ipad-games-for-myopia/</guid><pubDate>Thu, 28 Dec 2017 07:00:12 GMT</pubDate></item><item><title>雨伞与自拍杆</title><link>https://goldengrape.github.io/blog/Invention/umbrella-selfie/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;虽然看似一把雨伞，但它实际上是自拍杆。
虽然看似一自拍杆，但它实际上是把雨伞。&lt;/p&gt;
&lt;p&gt;&lt;img alt="雨伞自拍杆" src="http://upload-images.jianshu.io/upload_images/29267-06fa598be8eacd21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240"&gt;
&lt;/p&gt;&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/Invention/umbrella-selfie/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/Invention/umbrella-selfie/</guid><pubDate>Thu, 28 Dec 2017 07:00:10 GMT</pubDate></item><item><title>序列一致性检验工具</title><link>https://goldengrape.github.io/blog/python/compare-seq/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;本程序用于检查专利文件中的蛋白质序列是否一致. 在专利撰写时, 发明人往往在技术交底书中使用Word文件来提交蛋白质序列. 而在USPTO的要求中, 需要使用PatentIn软件来生成标准的序列提交文件.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/python/compare-seq/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/python/compare-seq/</guid><pubDate>Thu, 28 Dec 2017 07:00:07 GMT</pubDate></item><item><title>是否点开一个链接的标准</title><link>https://goldengrape.github.io/blog/if-open-an-url/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;每天我们看很多东西，微博/twitter，微信朋友圈/facebook，网站，甚至还可能有新闻联播。容易进入所谓“信息过载”的状态，那么在点开一个链接之前，是否就可以作出判断是否值得一读呢？&lt;/p&gt;
&lt;p&gt;最近我发现了一个重要的判别标准： _ 考试又不考，看这些没用的干啥！ _
&lt;/p&gt;&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/if-open-an-url/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/if-open-an-url/</guid><pubDate>Thu, 28 Dec 2017 07:00:06 GMT</pubDate></item><item><title>人脸识别算法的小改进</title><link>https://goldengrape.github.io/blog/Machine_Learning/facenet-modify/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;Deeplearning.ai课程中第4门卷积神经网络里, 第4周的作业是做一个人脸识别的小应用.&lt;/p&gt;
&lt;p&gt;这门课的作业设计都有些问题. 因为需要的数据量很大, 需要的算力也很高, 所以不大可能让学生从头做一个深度神经网络然后训练出结果. 所以作业基本是两头的, 一头是教如何建立这个深度神经网络, 一头是教如何应用这个建好的网络, 中间的部分就一笔带过说我们已经帮各位训练好了, 大家load就行了.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/Machine_Learning/facenet-modify/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/Machine_Learning/facenet-modify/</guid><pubDate>Thu, 28 Dec 2017 07:00:05 GMT</pubDate></item><item><title>蓝光的故事</title><link>https://goldengrape.github.io/blog/ophthalmology/story-of-blue-light/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;1949年人工晶状体IOL发明，( &lt;a href="https://en.wikipedia.org/wiki/Harold_Ridley_(ophthalmologist)"&gt;1949年11月29日首次植入&lt;/a&gt;)
1970s超声乳化手术phaco发明，(&lt;a href="https://www.google.com/patents/US3589363"&gt;专利US3589363&lt;/a&gt;)白内障手术迅速发展成熟，植入IOL以替换浑浊的天然晶状体，（&lt;a href="http://finance.sina.com.cn/stock/gujiayidong/2017-12-04/doc-ifypikwt6218758.shtml"&gt;顺便说莎普爱思没用&lt;/a&gt;）
1990sHOYA公司发现术后一部分病人抱怨周围太亮，于是模拟天然晶状体的颜色，推出黄色IOL。是的，年轻人的晶体就发黄，随年龄颜色加深
&lt;/p&gt;&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/ophthalmology/story-of-blue-light/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/ophthalmology/story-of-blue-light/</guid><pubDate>Thu, 28 Dec 2017 07:00:04 GMT</pubDate></item><item><title>将PatentIn文件转换成JSON文件的工具</title><link>https://goldengrape.github.io/blog/python/PatentIn-To-JSON/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;h3&gt;--兼论以自下而上的抽象应对不断改需求的PM&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://github.com/goldengrape/check_patentIn_sequence/blob/master/patentIn_to_json.ipynb"&gt;Jupyter版本:&lt;/a&gt;
或者更容易import的
&lt;a href="https://github.com/goldengrape/check_patentIn_sequence/blob/master/patentIn_to_json.py"&gt;python版本:&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;只需要:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;patentIn_to_json&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;patentIn_to_json&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;即可.
&lt;/p&gt;&lt;p&gt;&lt;a href="https://goldengrape.github.io/blog/python/PatentIn-To-JSON/"&gt;更多…&lt;/a&gt; (1 min remaining to read)&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/blog/python/PatentIn-To-JSON/</guid><pubDate>Thu, 28 Dec 2017 07:00:03 GMT</pubDate></item></channel></rss>