<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>GoldenGrape's Blog</title><link>https://goldengrape.github.io/</link><description>This is a blog site for GoldenGrape.</description><atom:link href="https://goldengrape.github.io/rss.xml" rel="self" type="application/rss+xml"></atom:link><language>zh_cn</language><copyright>Contents © 2019 &lt;a href="mailto:https://twitter.com/goldengrape"&gt;Golden Grape&lt;/a&gt; </copyright><lastBuildDate>Sat, 18 May 2019 14:45:01 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>那些在线的jupyter</title><link>https://goldengrape.github.io/posts/python/na-xie-zai-xian-de-jupyter/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;h4&gt;update:&lt;/h4&gt;
&lt;blockquote&gt;
&lt;p&gt;Data School有一篇非常好的评测，写了6个在线的Jupyter服务，建议去看看。
&lt;a href="https://www.dataschool.io/cloud-services-for-jupyter-notebook/"&gt;Six easy ways to run your Jupyter Notebook in the cloud&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;这里还有一个太长不看的&lt;a href="https://docs.google.com/spreadsheets/d/12thaaXg1Idr3iWST8QyASNDs08sjdPd6m9mbCGtHFn0"&gt;总结表格&lt;/a&gt;。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2&gt;Jupyter&lt;/h2&gt;
&lt;p&gt;如果你是python的初学者, 非常推荐Jupyter.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://goldengrape.github.io/posts/python/na-xie-zai-xian-de-jupyter/Jupyter.org"&gt;Juypter&lt;/a&gt;是一个交互式的编程环境,  号称&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;The Notebook has support for over 40 programming languages,
including Python, R, Julia, and Scala.
&lt;/pre&gt;


&lt;p&gt;支持超过40种语言, 其中包括Python,  R,  Julia和Scala. 虽然除了Python, 目前提到的其他语言我还都不会, 但是看起来是很强大很有前途的样子.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;p&gt;Jupyter的编程环境我很喜欢, 你可以写一段markdown图文并茂的说明, 再写一段代码, 然后单独运行刚刚写过的这一段代码, 看到结果, 调试代码, 改好以后再进行下一段.&lt;/p&gt;
&lt;p&gt;最终完成的文本+代码, 是所谓的&lt;a href="https://zh.wikipedia.org/wiki/%E6%96%87%E5%AD%A6%E7%BC%96%E7%A8%8B"&gt;"文学编程"&lt;/a&gt;, 文字甚至图片说明作者的思路, 中间夹杂着代码, 来教导计算机进行操作. 这样带来了完美的可读性.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="sx"&gt;!不要! 相信什么"代码才是最好的注释".&lt;/span&gt;
那是穿格子衬衫背双肩背半夜三点还在写代码的专职程序员才相信的东西&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;如果你不是一个每天必须写代码十几个小时的专业程序员, 而是利用代码去完成自己专业的特殊需求, 可能一个程序要间断好多天才能写完, 那么这种方式能够帮你迅速找到前几天的思路. 继续完成之前的作品.&lt;/p&gt;
&lt;h2&gt;在本地安装Jupyter(跳过吧, 别看)&lt;/h2&gt;
&lt;p&gt;Jupyter当然可以安装在本地, 安装好&lt;a href="https://www.anaconda.com/"&gt;Anaconda&lt;/a&gt;以后, 相对比较容易安装jupyter了.  &lt;/p&gt;
&lt;p&gt;但如果你之前只在windows上安装过商业软件, 一路点next, 或者在mac上从dmg中把应用程序直接拖动到文件夹里就可以运行. 那么安装anaconda, jupyter, 以及在运行jupyter时再安装各种python的依赖包, 是非常痛苦的.&lt;/p&gt;
&lt;p&gt;完全不建议新手进行, 至于那些常年泡在&lt;a href="https://twitter.com/bgm38/status/932512531251216385"&gt;linux里面已经 "&lt;strong&gt;久病成医&lt;/strong&gt; "&lt;/a&gt;的病友, 推荐你们试试.&lt;/p&gt;
&lt;h2&gt;在线的Jupyter&lt;/h2&gt;
&lt;p&gt;如果你是python的初学者, 非常推荐使用在线的Jupyter.&lt;/p&gt;
&lt;p&gt;利用在线的Jupyter要轻松得多, 只需要有网络连接, 有浏览器就可以了. 我测试了mac版的Chrome, Safari, 甚至android上的Chrome和iOS上的Safari, Chrome, 都可以运行在线的Jupyter.&lt;/p&gt;
&lt;p&gt;目前已经有这些服务:&lt;/p&gt;
&lt;h3&gt;Cocalc&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://cocalc.com"&gt;https://cocalc.com&lt;/a&gt; ,
这是一个科学计算平台, 除了提供jupyter, 还提供了sagemath.
sagemath也是一个强大的数学计算工具, 可以当作一个开源的mathematica, 随手解个方程, 求个微分之列都很方便.&lt;/p&gt;
&lt;p&gt;CoCalc已经安装好了大量的python包, 比如numpy, tensorflow, keras, pytorch. . .&lt;/p&gt;
&lt;p&gt;Cocalc有免费版和付费版, 免费版没有额外的网络连接, 也就是说你无法在cocalc里面再访问其他网页, 比如你用jupyter写了一个网络服务程序, 那么是无法用在cocalc免费版里面的. 用git也会受限制. 没有网络连接最麻烦的是如果cocalc没有预装的包, 你是无法自行安装的. 不过如果确实是很常用有名的python包, 那么可以向cocalc网站的支持发个email, 他们的响应速度超级快, 很有可能就帮你装好了.&lt;/p&gt;
&lt;p&gt;我写过&lt;a href="https://goldengrape.github.io/Python-for-ophthalmologist/lesson_01_jupyter.html"&gt;CoCalc的使用教程&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;Azure notebook&lt;/h3&gt;
&lt;p&gt;&lt;a href="https://notebooks.azure.com"&gt;https://notebooks.azure.com&lt;/a&gt;
这是微软提供的在线jupyter服务, 财大气粗的微软提供的内存, cpu, 存储空间都不错.&lt;/p&gt;
&lt;p&gt;很有特色的功能有二:
1. 方便一键clone, 看好其他人的做得不错的东西, 可以方便clone一份自己研究.
2. 可以从github导入, 只需要将看中的github repo页面添加, 就可以自动clone, 如果对方更新了, 自己这边也可以方便使用git pull&lt;/p&gt;
&lt;p&gt;微软的这个服务是有网络连接的, 你可以远程下载数据或者导入其他的库. 因此如果出现没有预装的库, 可以自己手动安装. 但麻烦的是, 如果你的notebook停用1小时以后, 远程的server就会停止, 然后你之前安装的东西就会被清除(数据和文件不会), 所以如果有额外的库, 就需要在每次打开的时候预先再次安装一遍.&lt;/p&gt;
&lt;p&gt;好在会有脚本可以做, 你可以参照这个&lt;a href="https://github.com/Microsoft/AzureNotebooks/issues/201#issuecomment-338466615"&gt;帖子&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;到你的 library &amp;gt; settings &amp;gt; Environment
选择 ShellScript 然后选择 特定的脚本
保存
重启 server
&lt;/pre&gt;


&lt;p&gt;安装pytorch的脚本&lt;a href="https://github.com/Microsoft/AzureNotebooks/files/1404777/script.txt"&gt;例子&lt;/a&gt;:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;export PATH=~/anaconda3_410/bin:$PATH
conda install pytorch torchvision -c soumith --yes
&lt;/pre&gt;


&lt;p&gt;安装其他的库, 只需要在anaconda里面搜索一下conda的安装方法, 然后替换上面脚本中的conda install pytorch那一段.&lt;/p&gt;
&lt;h3&gt;其他&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Mybinder
&lt;a href="https://mybinder.org/"&gt;https://mybinder.org/&lt;/a&gt;
这个我也还没用过, 据说可以从github里面直接导入, 生成一个docker. 需要什么库的话, 好像也可以通过脚本预先声明, 不一定像azure notebook那样要反复安装.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Google Colaboratory
&lt;a href="https://colab.research.google.com/"&gt;https://colab.research.google.com/&lt;/a&gt;
这是Google的jupyter服务, 但目前还没有完全开放, 点击注册以后会有"您已成功加入到候补名单。一旦 Colaboratory 可供您使用，我们会立即发送电子邮件通知您。"&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;在移动设备上使用&lt;/h2&gt;
&lt;p&gt;主流的手机/平板浏览器, 上面的服务都可以访问, 编辑的时候稍微有点别扭, 特别是在小屏幕的时候, 操作也还是不够方便, 但如果外接键盘/蓝牙键盘也还是不错的.&lt;/p&gt;
&lt;p&gt;除了内置的浏览器, 我还发现了专用的iOS app, &lt;a href="https://juno.sh/"&gt;Juno&lt;/a&gt; 目前还处于testflight状态, 可以去他家网页上申请beta测试. Juno中还内置了Mybinder的demo. 如果你购买了cocalc付费版, 也可以开放出一个远程的jupyter server供Juno使用.&lt;/p&gt;
&lt;h2&gt;自己建立Jupyter在线服务&lt;/h2&gt;
&lt;p&gt;开源社区现在越来越友好了, 有可能的话, 你也可以在自己的服务器或者VPS上建立一个在线的Jupyter服务, 为自己/学生/客户服务. 但我这么怕麻烦的人, 本地电脑都懒得装, 所以我都没有测试过.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Jupyter Hub: &lt;a href="https://github.com/jupyterhub/jupyterhub"&gt;https://github.com/jupyterhub/jupyterhub&lt;/a&gt; 这是jupyter官方的服务器安装程序.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Binder Hub:  &lt;a href="https://github.com/jupyterhub/binderhub"&gt;https://github.com/jupyterhub/binderhub&lt;/a&gt;也是从属与jupyter官方的, 但是用docker技术封装, 大概安装调试会方便一些吧.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Cocalc/sagemath: &lt;a href="https://github.com/sagemathinc/cocalc"&gt;https://github.com/sagemathinc/cocalc&lt;/a&gt; 这个也是用docker的, 还带有sagemath.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;ps.
如果你在本地计算机上安装了jupyter, 非常推荐下面这个插件, 能够在保存jupyter文件的时候, 同时保存同名的 .html 和 .py 形式的文件. 这样在其他的python程序中导入自己写的函数会非常方便. 也很容易在github page上发布文档.&lt;/p&gt;
&lt;p&gt;&lt;a href="http://protips.maxmasnick.com/ipython-notebooks-automatically-export-py-and-html"&gt;http://protips.maxmasnick.com/ipython-notebooks-automatically-export-py-and-html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;EOF()&lt;/p&gt;&lt;/div&gt;</description><category>python</category><category>现代眼科医生知识扩展包</category><guid>https://goldengrape.github.io/posts/python/na-xie-zai-xian-de-jupyter/</guid><pubDate>Sat, 18 May 2019 04:00:00 GMT</pubDate></item><item><title>齿条绘制</title><link>https://goldengrape.github.io/posts/bulabula/rack_by_fusion360/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;学会了绘制齿条rack。就是和齿轮配合，将圆周运动变换成直线运动的结构。&lt;/p&gt;
&lt;p&gt;&lt;img alt="rack" src="https://i.loli.net/2019/05/12/5cd767b4bdd0f.jpg"&gt;&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;有一个&lt;a href="https://knowledge.autodesk.com/support/fusion-360/learn-explore/caas/screencast/Main/Details/a7992d99-5d4d-48c2-b971-a86ba3014608.html"&gt;fusion360官方制作教程参考&lt;/a&gt;，但是我觉得绘制过程太麻烦。而且在实际使用中，要真实确定齿条和齿轮的具体位置，否则其他支架不好安装。&lt;/p&gt;
&lt;p&gt;所以自己学习了一下齿轮的知识，齿轮的主要参数有3个：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;module：模数，这个描述了齿的大小&lt;/li&gt;
&lt;li&gt;齿数：很好理解，一圈有多少个齿&lt;/li&gt;
&lt;li&gt;压力角：也就是齿轮上每个齿的斜边角度。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;module x 齿数 = 齿轮的“分度圆”直径&lt;/p&gt;
&lt;p&gt;关于齿轮和齿条的知识，强烈推荐小原齿轮工业株式会社(暨KHK株式会社)制作的&lt;a href="https://khkgears.net/china/gearknowledge/index.html"&gt;《齿轮设计所需的齿轮基础知识》&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;这种在日常生活中无处不在，却又隐藏在后台，完全不懂也不影响工作学习生活的，无比有用又非常无用的知识，非常酷。&lt;/p&gt;
&lt;p&gt;画齿条的原理：&lt;/p&gt;
&lt;p&gt;两个齿轮之间的是按齿轮的“分度圆”来接触的，比如两个完全相等的齿轮互相咬合时，圆心相当于在分度圆的切线上是对称的。&lt;/p&gt;
&lt;p&gt;如果把齿条看作一个直径无穷大的齿轮，那么也是以分度圆的切线作为对称线，将一个齿镜像即可。这就是画图的原理。&lt;/p&gt;
&lt;p&gt;详细步骤请参考我放在SlideShare上的&lt;a href="https://www.slideshare.net/goldengrape/draw-a-rack-with-fusion-360"&gt;幻灯&lt;/a&gt;。&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/rack_by_fusion360/</guid><pubDate>Sun, 12 May 2019 00:00:00 GMT</pubDate></item><item><title>3D打印盔甲</title><link>https://goldengrape.github.io/posts/bulabula/3D_printed_armor/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;咏春拳里有大量用前臂进行格挡的动作，尺骨上也没什么肉，所以很疼啊。小腿上吃了亏，以后对练时肯定要戴上护腿板，但手臂上没有找到现成的护具。&lt;/p&gt;
&lt;p&gt;遇到困难，我当然是选择投机取巧而不是勤学苦练。我只是想健身强体，没打算去打比赛和实战。&lt;/p&gt;
&lt;p&gt;所以，按照这个&lt;a href="https://www.thingiverse.com/thing:2787803"&gt;3D打印到织物上的方法&lt;/a&gt;，制作了两片鱼鳞甲，用来保护自己的手臂。
&lt;img alt="arm" src="https://i.loli.net/2019/05/08/5cd2ec5de5b0d.jpg"&gt;&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;p&gt;打印的时候直接打印整条的。要用到打印到尼龙网上的技巧
&lt;img alt="armor" src="https://i.loli.net/2019/05/08/5cd2ece07c48a.jpg"&gt;&lt;/p&gt;
&lt;p&gt;我用的方法与&lt;a href="https://www.thingiverse.com/thing:2787803"&gt;网上说的暂停打印的方法&lt;/a&gt;略有不同。因为我发现暂停打印以后，如果在铺设尼龙网时用了比较长的时间，打印机可能就休眠或者中断打印了。与其手忙脚乱地赶时间，还不如干脆分成两个文件来打印。&lt;/p&gt;
&lt;p&gt;我用的是&lt;a href="https://www.simplify3d.com/"&gt;Simplify3D&lt;/a&gt;这个软件，可以设定一个打印process的起止高度。所以我把打印过程分成两部分，一个从0开始，打印到0.06mm，也就是2层厚度，然后另一组从0.06mm开始，到打印完成。
&lt;img alt="屏幕快照 2019-05-08 20.05.47" src="https://i.loli.net/2019/05/08/5cd2ed0c4e581.png"&gt;&lt;/p&gt;
&lt;p&gt;这样，先打印完第一部分，把尼龙网铺在打印好的两层上，可以用夹子或者用美工胶布固定，整理好以后再打印第二部分。我觉得比较从容。注意第一部分打印完成以后，挤出头和热床可能温度都会掉下来，赶紧手工设定到需要的温度即可。&lt;/p&gt;
&lt;p&gt;我使用的是掺杂了碳纤维的PLA材料，比较硬。打印完成以后，可以用线缝或者用布料胶水粘到袖子上，套袖是买的自行车防晒用的袖子，有一定弹性，紧身，固定比较好。线缝可能比较耗费时间，布料胶水在淘宝就能找到，能粘上，但不知道粘好以后的强度如何，不过就算掉了几粒，也可以单独打印出单体再重新粘上。&lt;/p&gt;
&lt;p&gt;这是由一个一个小的单体鳞片构成的，每一个鳞片受力时，能够把压力传递给3个鳞片，于是分散了压力。
&lt;img alt="mono" src="https://i.loli.net/2019/05/08/5cd2ed34eaa92.jpg"&gt;&lt;/p&gt;
&lt;p&gt;做好了以后，我用刀试了试，居然可以一定程度上对抗刀砍，这是之前完全没料到的。注意是砍，不是刺，刺的话还是可能被刀尖伤到，鳞片之间没有二次重叠，是有缝隙的。&lt;/p&gt;
&lt;p&gt;补充一下，用Fusion360画六边形平铺二维平面的方法：&lt;/p&gt;
&lt;p&gt;本质上还是一个矩形阵列，但“矩形”的两个边并不是互相垂直的，你需要画出60度夹角的两个方向，就是画好六边形以后，画两个中点连线，然后选择矩形阵列，再方向上，按住command键选上两个方向，间距就是六边形两个平行边的宽度或者再加上空隙。注意这样平铺的结构不是矩形的，而是平行四边形，若做成矩形的样子，要勾选掉一些。&lt;/p&gt;
&lt;p&gt;&lt;img alt="屏幕快照 2019-05-08 21.27.14" src="https://i.loli.net/2019/05/08/5cd2d98eac1e1.png"&gt;&lt;/p&gt;
&lt;p&gt;哦，忘了放上&lt;a href="https://www.thingiverse.com/thing:3615893"&gt;模型的链接&lt;/a&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/3D_printed_armor/</guid><pubDate>Wed, 08 May 2019 04:00:00 GMT</pubDate></item><item><title>病例一则：夜间睡眠时疼痛</title><link>https://goldengrape.github.io/posts/bulabula/case-report/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;blockquote&gt;
&lt;p&gt;警告：文中这样擅自修改医嘱的行为是非常危险的，仅由专业人士进行，或在专业人士指导下进行。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;我平时对疾病诊断没什么兴趣，碰到病例讨论查房，往往处于神游乃至半昏迷状态。在我看来诊断更多像是在抽屉里找卡片，缺乏连续的推理过程。不过这次遇到的这个病例引起了我的极大兴趣。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;因为这是我自己。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;病人自诉：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;右腿胫骨碰撞后疼痛7天，&lt;/p&gt;
&lt;p&gt;7天前练习咏春拳时，右腿胫骨与对方手肘多次碰撞。碰撞后疼痛，夜间睡眠时加重，可疼醒，平卧小腿肌肉紧张时加重，白天直立稍活动后可缓解。小腿外侧肿胀，踝关节轻肿胀，足跟部及足2-4趾附近有淤血痕迹。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;img alt="未命名1" src="https://i.loli.net/2019/05/07/5cd13106184c9.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这是用肘外侧防御高鞭腿的动作，高鞭腿大概是排名第二位的“不会打架”动作，（第一位是揪领子，这部分以后再展开讲）。但练习嘛，我就很认真地去踢，于是被磕得很疼。&lt;/p&gt;
&lt;p&gt;疼了一星期，而且糟糕的是夜里更疼，睡着了疼，睡眠质量很差。即使是睡着了以后，身体也是时不时要动一下的，动的时候，肌肉就会紧张收缩用力，然后就会引起一阵腿疼。我昨天终于受不了了，去看病。&lt;/p&gt;
&lt;p&gt;打算去的医院是骨科同学指导过的医院，所以先问了问。到了以后意外发现医院还挺大，就诊环境也不错。主任没出门诊，于是挂了个普通号先看看。大夫很规矩，流程清晰，诊断和治疗方案都是对的。&lt;/p&gt;
&lt;p&gt;以下纯学术讨论，没有任何责怪医生的部分。本人非骨科专业，而且由于SARS当年完全没轮转骨科，有不当之处还请指出。&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h3&gt;主诉&lt;/h3&gt;
&lt;blockquote&gt;
&lt;p&gt;患者自述：
右腿胫骨碰撞后疼痛7天，
7天前练习咏春拳时，右腿胫骨与对方手肘多次碰撞。碰撞后疼痛，夜间睡眠时加重，可疼醒，平卧小腿肌肉紧张时加重，白天直立稍活动后可缓解。小腿外侧肿胀，踝关节轻肿胀，足跟部及足2-4趾附近有淤血痕迹。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;查体&lt;/h3&gt;
&lt;p&gt;如患者所诉：小腿外侧肿胀，踝关节轻肿胀，足跟部及足2-4趾附近有淤血痕迹。&lt;/p&gt;
&lt;h3&gt;辅助检查&lt;/h3&gt;
&lt;p&gt;右胫腓骨正侧位：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;影像所见： 右侧胫腓骨骨质完整，未见明显异常征象，所示关节关系可。
诊断意见：右侧胫腓骨未见明显异常，请结合临床。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;此处批评放射科，表扬一下门诊大夫，看片更仔细一些，发现腓骨中部骨膜增厚，还专门在电脑上指给我看。
&lt;img alt="" src="https://i.loli.net/2019/05/07/5cd13905b3a19.jpg"&gt;&lt;/p&gt;
&lt;h3&gt;诊断和处理&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;诊断：软组织损伤&lt;/li&gt;
&lt;li&gt;Rx：抬高患肢高于心脏平面休息，外用药膏（患者自备）&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;他那里的是药酒，我觉得水剂用着不方便，而且我这有运医神剂“创伤止痛乳”（现在叫“当红创伤乳膏”），于是就没开药。&lt;/p&gt;
&lt;p&gt;我仔细问了问，夜间睡眠时疼痛加重是什么原因。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;"夜间睡眠时加重，可疼醒，平卧小腿肌肉紧张时加重，白天直立稍活动后可缓解。"&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3&gt;夜间睡眠时疼痛原因：&lt;/h3&gt;
&lt;p&gt;医生的解释是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;外界干扰降低，对痛觉敏感&lt;/li&gt;
&lt;li&gt;副交感神经兴奋&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这么说当然是没错啦，大夫还很仔细地讲解了一下“植物神经系统”，比我以前出门诊解释都多。我只好说我以前是眼科医生，才尽快去拍了片子。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;但是&lt;/strong&gt;，这两条并不能完全解释“白天直立稍活动后可缓解。”&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;于是我就回家躺着了，夜里睡着了还是被疼醒了几次。一直到早上6点多，我迷迷糊糊地，又疼醒了一次，心里念叨着我的骨膜啊，然后突然灵光闪现。立刻爬起来查我重金购买的&lt;a href="https://3d4medical.com/"&gt;Complete Anatomy 2019解剖软件&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;关键在于白天站立与夜间平卧时的区别&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="夜间睡眠时疼痛" src="https://i.loli.net/2019/05/08/5cd2301858d9a.jpg"&gt;&lt;/p&gt;
&lt;p&gt;踝关节的命名比较奇怪，抬脚叫做伸，绷脚叫做屈。在平卧放松的状态，踝关节并不是90度的，而是脚尖更远，这时候脚背面和小腿前侧的肌肉是处于拉伸的状态。&lt;/p&gt;
&lt;p&gt;&lt;img alt="屏幕快照 2019-05-07 16.16.35" src="https://i.loli.net/2019/05/07/5cd13efb2df3b.png"&gt;&lt;/p&gt;
&lt;p&gt;右侧小腿，如果把从踝关节后面拉住的肌肉和足内部的肌肉去掉，剩下是主管抬脚足伸肌群：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;胫骨前肌 Tibialis Anterior Muscle&lt;/li&gt;
&lt;li&gt;趾长伸肌 Extensor Digitorum Longus Muscle&lt;/li&gt;
&lt;li&gt;踇长伸肌 Extensor Hallucis Longus Muscle&lt;/li&gt;
&lt;li&gt;第三腓骨肌/腓外侧肌 Fibularis Tertius Muscle&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="幻灯片5" src="https://i.loli.net/2019/05/07/5cd148bf62096.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;其中Extensor Hallucis Longus Muscle的止点就在腓骨的中部
&lt;img alt="幻灯片6" src="https://i.loli.net/2019/05/07/5cd14a3b060df.jpeg"&gt;&lt;/p&gt;
&lt;p&gt;&lt;img alt="未命名.2019-05-07 16_55_03" src="https://i.loli.net/2019/05/07/5cd1482b66ae4.gif"&gt;)&lt;/p&gt;
&lt;p&gt;我现在高度怀疑是它的肌肉止点附近有损伤。&lt;/p&gt;
&lt;p&gt;这个链条是这样的：&lt;/p&gt;
&lt;p&gt;平卧-&amp;gt;踝关节曲-&amp;gt;伸肌拉长-&amp;gt;收缩时牵扯肌肉止点-&amp;gt;牵扯腓骨骨膜-&amp;gt;疼痛&lt;/p&gt;
&lt;p&gt;对于睡眠状态，这个肌肉拉伸的状态保持更久，所以在翻身或者有肌肉收缩时，会对腓骨骨膜有更大的刺激。而当起身站立之后，足伸肌群处于相对放松的状态，于是直立活动后反而疼痛会有所缓解。&lt;/p&gt;
&lt;p&gt;因此，现在我的处理方式是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;平卧时，利用护踝保持踝关节伸位&lt;/li&gt;
&lt;li&gt;抬高患肢高于心脏休息&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;当病人说的是“夜间睡眠时疼痛加重，白天活动后缓解”，他的实际意思是“长时间平卧踝关节屈曲时疼痛加重，直立踝关节伸位时疼痛缓解”。&lt;/p&gt;
&lt;p&gt;这还是医学专业病人自己的症状描述，非专业的病人还不知道要说成是什么样子。&lt;/p&gt;
&lt;p&gt;但愿今晚能睡个好觉。&lt;/p&gt;
&lt;hr&gt;
&lt;p&gt;次日晨起更新：&lt;/p&gt;
&lt;p&gt;仅仅用护踝固定还是不够的，护踝在脚底面的距离太短，在运动中，因为有体重的压力，将踝关节控制在90度不需要很大的力，但在平卧时护踝脚底面承受的压力则太大，导致足弓很不舒服。&lt;/p&gt;
&lt;p&gt;咨询了同学，应该用“夜靴”，在淘宝上直接搜夜靴会找到一堆夜店穿的靴子，正确的关键词是“夜靴+医”，大概就是一个靴子，鞋尖和鞋帮用弹力绷带连起来。构成一个直角三角形，一个边是鞋底/脚底，一个边是鞋帮/小腿背侧，斜边是弹力绷带。&lt;/p&gt;
&lt;p&gt;经过工程拆解后，可以找到它的等效解：一个位于脚底的边，一个位于脚后跟到小腿背侧的硬边，两个边的连接点，和一个弹力绷带。&lt;/p&gt;
&lt;p&gt;所以我昨天晚上用护踝+护腿板搭了一个，
&lt;img alt="未命名" src="https://i.loli.net/2019/05/08/5cd23315c4599.jpg"&gt;&lt;/p&gt;
&lt;p&gt;早起想更明白了一点，其实用拖鞋和护腿板搭建会更好。&lt;/p&gt;
&lt;h2&gt;实验结果：&lt;/h2&gt;
&lt;p&gt;&lt;strong&gt;昨天晚上睡了个好觉！&lt;/strong&gt;
单点非盲实验，没有统计学意义。&lt;/p&gt;
&lt;p&gt;考虑修正第一诊断为：&lt;/p&gt;
&lt;p&gt;踇长伸肌腓骨止点软组织损伤&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/case-report/</guid><pubDate>Tue, 07 May 2019 04:00:00 GMT</pubDate></item><item><title>文献赏析: 古代如何测视力</title><link>https://goldengrape.github.io/posts/bulabula/An_Ancient_Eye_Test/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;读到一篇文献, 觉得太有趣了.
&lt;a href="https://www.ncbi.nlm.nih.gov/pubmed/18929764"&gt;《古代如何测视力————用星星》&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;全文可以在&lt;a href="https://sci-hub.tw/https://www.ncbi.nlm.nih.gov/pubmed/18929764"&gt;sci-hub上找到&lt;/a&gt;. 在此简单叙述.&lt;/p&gt;
&lt;p&gt;在视力表出现之前, 古代波斯/阿拉伯, 使用北斗七星勺子柄上中间的开阳星作为视力检测标准.&lt;/p&gt;
&lt;p&gt;&lt;img alt="IMG_3639" src="https://i.loli.net/2018/08/10/5b6c82feabafd.jpg"&gt;&lt;/p&gt;
&lt;p&gt;这是双星, (所以北斗其实是八星?)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;亮的那颗中文名叫开阳, 英文名叫Mizar,&lt;/li&gt;
&lt;li&gt;暗的那颗中文名叫辅, 英文名叫Alcor&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;如果能够裸眼看出两颗星, 那么就认为被试视力不错. 虽然古代文人可能对视力要求不高, 但士兵可能一直是要有严格体检的, 所以Alcor往往作为对士兵视力的检查标准.&lt;/p&gt;
&lt;p&gt;通常天文学家/ 历史学家只讲到这里, 但这是篇眼科文献, 于是...
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;h2&gt;视力&lt;/h2&gt;
&lt;p&gt;正常视力20/20, 或者说1.0, 是说视角=1分, 而开阳双星的&lt;a href="http://aeea.nmns.edu.tw/2006/0606/ap060615.html"&gt;赤经赤纬坐标&lt;/a&gt;分别是:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;开阳(13:23:55.5, +54:55:31)&lt;/li&gt;
&lt;li&gt;辅((13:23:56.3, +54:55:18))&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;但是, 两颗星之间的视角大约是12分, 那么相当于视力20/200, 也就是0.1左右, 其实很差. 用0.1左右的视标去检查士兵, 显然并不靠谱.&lt;/p&gt;
&lt;h2&gt;对比度与眩光&lt;/h2&gt;
&lt;p&gt;又但是, Mizar是二等星(2.27), Alcor是四等星(3.95), 亮度差距其实很大(22:9.4), 所以这个测试除了测量视力, 还相当于糅合了对比敏感度和眩光检查.&lt;/p&gt;
&lt;h2&gt;等效性实验&lt;/h2&gt;
&lt;p&gt;文献中记载有好事者做了一个等效性实验,&lt;/p&gt;
&lt;p&gt;先找了一组正视眼的人, 都能看清20/20的视标, 在冬天月亮不明显的晴天夜里去看开阳双星, 大家都能看见. 然后在眼前加正度数透镜, 一直加到看不到Alcor为止, 得到的球面镜度数范围是在+0.5到+0.75.&lt;/p&gt;
&lt;p&gt;第二天, 还是这些人, 去看视力表20/20这一行, 也是同样加球面镜, 直到看不清这一行为止, 得到的球面镜度数范围仍然是+0.5到+0.75.&lt;/p&gt;
&lt;p&gt;这个实验在我看来并不严谨, 但是貌似将开阳双星检查和20/20等效起来.&lt;/p&gt;
&lt;p&gt;其中还有一个有趣的病例, 在等效实验中, 有个20/20的65岁被试, 分不出开阳双星, 考虑是因为早期白内障, 对比敏感度降低.&lt;/p&gt;&lt;/div&gt;</description><category>ophthalmology</category><guid>https://goldengrape.github.io/posts/bulabula/An_Ancient_Eye_Test/</guid><pubDate>Tue, 07 May 2019 03:00:00 GMT</pubDate></item><item><title>根据字幕做视频摘要</title><link>https://goldengrape.github.io/posts/python/video_keynote/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;周末做了一个奇怪的小东西.&lt;/p&gt;
&lt;p&gt;一个根据字幕来做出视频缩略版的工具, 效果参见&lt;a href="https://www.youtube.com/watch?v=wxlySg9TBBI"&gt;李永乐老师讲柏拉图立体的复习缩略版&lt;/a&gt;&lt;/p&gt;
&lt;iframe width="560" height="315" src="https://www.youtube.com/embed/wxlySg9TBBI" frameborder="0" allow="accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture" allowfullscreen&gt;&lt;/iframe&gt;&lt;p&gt;这是一段remix的视频, 是从&lt;a href="https://www.youtube.com/watch?v=m9AE_G_9c7Y"&gt;李永乐老师讲柏拉图立体&lt;/a&gt; 的课程中节选了数学概念的部分, 去掉了推导与展开的部分. 原视频大约12分钟, 剪辑后的视频只有4分钟. 可以方便用来快速复习概念.&lt;/p&gt;
&lt;!-- TEASER_END --&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;过程是这样的, 先从youtube下载某个视频的字幕, 然后你可以对字幕进行编辑, 删去不重要的部分, 只留下需要保留的文字, 但注意仍然要保留原来的换行. 然后程序会自动在字幕中查找保留文字, 并找到对应的时间. 把对应时间的视频片段下载下来, 连成一体.&lt;/p&gt;
&lt;p&gt;这个程序最好是在Google Colab上运行, 在本地电脑上运行要令终端也可以&lt;strong&gt;正常访问国际互联网&lt;/strong&gt; 本文的&lt;a href="https://github.com/goldengrape/goldengrape.github.io/blob/master/posts/python/video_keynote/index.ipynb"&gt;代码在github上&lt;/a&gt;, 可以上传至&lt;a href="https://colab.research.google.com/"&gt;google colab&lt;/a&gt;中运行&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;这个程序依赖于&lt;a href="https://webvtt-py.readthedocs.io/en/latest/"&gt;webvtt-py&lt;/a&gt;、&lt;a href="https://rg3.github.io/youtube-dl/"&gt;youtube-dl&lt;/a&gt; 和 &lt;a href="https://ffmpeg.org/"&gt;ffmpeg&lt;/a&gt; , 当然还有&lt;a href="https://pandas.pydata.org/"&gt;pandas&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;注意在Google Colab上, webvtt-py和youtube-dl都是需要每次安装的.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [4]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webvtt&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;!&lt;/span&gt;pip install webvtt-py
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;webvtt&lt;/span&gt;
&lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;youtube_dl&lt;/span&gt;
&lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="o"&gt;!&lt;/span&gt;pip install youtube_dl
    &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;youtube_dl&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pandas&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="nn"&gt;pd&lt;/span&gt;
&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;os&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;,&lt;/span&gt; &lt;span class="nn"&gt;difflib&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="下载youtube视频字幕"&gt;下载youtube视频字幕&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/video_keynote/#%E4%B8%8B%E8%BD%BDyoutube%E8%A7%86%E9%A2%91%E5%AD%97%E5%B9%95"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;首先是要下载youtube上的视频字幕, youtube的字幕有两类, 一是作者自己上传的文字字幕, 一是由youtube进行语音识别后生成的自动字幕, 其中自动字幕又会被机器翻译成各种语言.&lt;/p&gt;
&lt;p&gt;youtube字幕是一种叫做WebVTT的格式, 可以使用youtube-dl进行下载. 虽然youtube-dl有python运行方式, 但我还不能熟练掌握, 于是使用了subprocess.call运行命令行进行下载.&lt;/p&gt;
&lt;p&gt;如果是下载自动字幕, 要使用&lt;code&gt;--write-auto-sub&lt;/code&gt;, 如果是下载作者上传的字幕, 则是&lt;code&gt;--write-sub&lt;/code&gt;, 下载字幕的时候, 我觉得并不需要将视频也下载下来, 所以要使用&lt;code&gt;--skip-download&lt;/code&gt;, 字幕的语言简体中文=zh-Hans, 英文=en&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [5]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_youtube_sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;out_filename&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"zh-Hans"&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;vtt_command&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'youtube-dl'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
               &lt;span class="s1"&gt;'--write-auto-sub'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 如果下载作者自制的字幕则使用--write-sub&lt;/span&gt;
               &lt;span class="s1"&gt;'--sub-lang'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 选择语言&lt;/span&gt;
               &lt;span class="s1"&gt;'--skip-download'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;  &lt;span class="c1"&gt;# 不下载视频, 只下载字幕&lt;/span&gt;
               &lt;span class="s1"&gt;'--no-continue'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;    &lt;span class="c1"&gt;# 强制覆盖已经下载的文件&lt;/span&gt;
                   &lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
              &lt;span class="s1"&gt;'--output'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;out_filename&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="c1"&gt;# 输出文件名格式&lt;/span&gt;
    &lt;span class="c1"&gt;# final out filename=out_filename+lang+'.vtt'&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;call&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtt_command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;!=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
    &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="kc"&gt;True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="清理vtt字幕"&gt;清理vtt字幕&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/video_keynote/#%E6%B8%85%E7%90%86vtt%E5%AD%97%E5%B9%95"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;vtt的字幕, 是一种还挺丰富(=复杂)的字幕格式, 里面不仅仅是时间戳和文字, 文字里可以加入丰富的特效.  特别是英文版本的vtt字幕, 为了表现出连贯的效果, 会把当前行与下一行字幕都显示出来, 于是每一句话其实记录了两次(中文似乎没有). 所以要进行一点清理. 将重复的部分删去. 只保留当前说的一句话, 和这句话的起止时间戳. 保存到一个pandas Dataframe里. 毕竟pandas后期好处理&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [6]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;clean_vtt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;starts&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;ends&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;extend_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
        &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extend_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;extend_text&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;starts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;ends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="n"&gt;repeat&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;
    &lt;span class="n"&gt;new_lines&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;new_starts&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="n"&gt;new_ends&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;

    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;zip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;starts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;ends&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;previous&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;continue&lt;/span&gt;
        &lt;span class="k"&gt;else&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;new_lines&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_starts&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;new_ends&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;append&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="n"&gt;previous&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;l&lt;/span&gt;

    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s2"&gt;"start"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new_starts&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"end"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new_ends&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;new_lines&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="合并vtt字幕成为脚本"&gt;合并vtt字幕成为脚本&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/video_keynote/#%E5%90%88%E5%B9%B6vtt%E5%AD%97%E5%B9%95%E6%88%90%E4%B8%BA%E8%84%9A%E6%9C%AC"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;无他, 一行一句, 保留换行之后比较好看也好编辑.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [7]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;vtt_to_transcript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clean_vtt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;transcript&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;transcript&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="在字幕中找到对应的句子"&gt;在字幕中找到对应的句子&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/video_keynote/#%E5%9C%A8%E5%AD%97%E5%B9%95%E4%B8%AD%E6%89%BE%E5%88%B0%E5%AF%B9%E5%BA%94%E7%9A%84%E5%8F%A5%E5%AD%90"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;给定一句话, 要在字幕中找到这一句话的时间戳, 这样才能按照时间对视频切片. python的标准库里有一个difflib, 专门用来比较, 其中我使用的是get_close_matches, 找到最接近的文字. 这样即使只截取了一句话中的一部分, 也有可能找到相应的话语.&lt;/p&gt;
&lt;p&gt;考虑到给定的一句话, 一定是从字幕中提取出来, 所以没有考虑找不到的情况.&lt;/p&gt;
&lt;p&gt;使用pandas的优点在此显现, 只需要merge两个数据库, 就可以把相同字段, 相同内容的部分求出交集, 这样就可以获得时间戳了.&lt;/p&gt;
&lt;p&gt;(在这里记录url, 是为了日后扩展成从多个字幕中找句子, 那时就要记录每个字幕从哪里来的, 这是后话, 暂时还没有开始)&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [8]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;find_text_in_vtt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;clean_vtt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;youtube_url&lt;/span&gt;
    &lt;span class="n"&gt;chosen_text&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;splitlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;difflib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get_close_matches&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt;&lt;span class="n"&gt;n&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="n"&gt;chosen_text&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extend&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;sentence&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;df_chosen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;pd&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;DataFrame&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;chosen_text&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;columns&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"text"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;df_chosen&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;df_chosen&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;merge&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="n"&gt;df_chosen&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;以上就是处理字幕的部分.&lt;/p&gt;
&lt;p&gt;还是以李永乐老师讲课的视频为例, 这堂课的字幕内容&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [11]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'https://www.youtube.com/watch?v=m9AE_G_9c7Y'&lt;/span&gt;
    &lt;span class="n"&gt;vtt_pre&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"test"&lt;/span&gt;
    &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'zh-Hans'&lt;/span&gt;
    &lt;span class="n"&gt;vtt_filename&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'.'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="n"&gt;vtt_pre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s2"&gt;"vtt"&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="n"&gt;download_youtube_sub&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;vtt_pre&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;lang&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;webvtt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;read&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtt_filename&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtt_to_transcript&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="p"&gt;)[:&lt;/span&gt;&lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="c1"&gt;#blog中只显示100个字符&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;各位同学大家好 我是李永乐老师
最近有小朋友说 他看综艺节目里面谈到了
柏拉图立体和阿基米德多面体
他想问我这是什么
那我们今天就来先研究一下柏拉图立体
以前其实我们也曾经说过柏拉图立体
什么叫柏拉图
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="手工选择必要的关键部分"&gt;手工选择必要的关键部分&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/video_keynote/#%E6%89%8B%E5%B7%A5%E9%80%89%E6%8B%A9%E5%BF%85%E8%A6%81%E7%9A%84%E5%85%B3%E9%94%AE%E9%83%A8%E5%88%86"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;对, 这个程序做不到人工智能, 只有手工智能, 我怎么知道你觉得那一部分更重要, 所以请复制粘贴上面打印出来的字幕, 然后删掉其中不想要的部分, 保留下需要的, 注意不要改变换行的方式.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [13]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;keynote&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'''&lt;/span&gt;
&lt;span class="s1"&gt;什么叫柏拉图立体呢&lt;/span&gt;
&lt;span class="s1"&gt;他提出正多面体只有五种&lt;/span&gt;
&lt;span class="s1"&gt;所以我们就把正多面体称为柏拉图立体&lt;/span&gt;
&lt;span class="s1"&gt;首先它必须每一个面… 它是个正多面体&lt;/span&gt;
&lt;span class="s1"&gt;每个面都是同样的正多边形&lt;/span&gt;
&lt;span class="s1"&gt;除此之外 它还有一个要求&lt;/span&gt;
&lt;span class="s1"&gt;就是每个顶点的情况必须是相同的&lt;/span&gt;
&lt;span class="s1"&gt;比如说如果每一个顶点都连接三条棱&lt;/span&gt;
&lt;span class="s1"&gt;那所有顶点都必须是这样&lt;/span&gt;
&lt;span class="s1"&gt;然后你如果把这个图形稍微转一个方向&lt;/span&gt;
&lt;span class="s1"&gt;你会发现所有顶点都会跟以前重合&lt;/span&gt;
&lt;span class="s1"&gt;这个就叫每个顶点的情况是相同的&lt;/span&gt;
&lt;span class="s1"&gt;我们就把这种立体称之为正多面体&lt;/span&gt;
&lt;span class="s1"&gt;或者叫柏拉图立体&lt;/span&gt;
&lt;span class="s1"&gt;我们现在想证明一下 正多面体只有五种&lt;/span&gt;
&lt;span class="s1"&gt;首先我们先来看由正三角形所组成的&lt;/span&gt;
&lt;span class="s1"&gt;我们知道三角形每一个内角是60度&lt;/span&gt;
&lt;span class="s1"&gt;'''&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;然后我们就可以给出一句话的起止时间了:&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [14]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_text_in_vtt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keynote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;head&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;div class="output_wrapper"&gt;
&lt;div class="output"&gt;


&lt;div class="output_area"&gt;

&lt;div class="prompt"&gt;&lt;/div&gt;


&lt;div class="output_subarea output_stream output_stdout output_text"&gt;
&lt;pre&gt;                 text           end         start  \
0           什么叫柏拉图立体呢  00:00:15.539  00:00:13.859   
1         他提出正多面体只有五种  00:00:24.339  00:00:21.719   
2   所以我们就把正多面体称为柏拉图立体  00:00:27.019  00:00:24.519   
3  首先它必须每一个面… 它是个正多面体  00:00:32.520  00:00:29.160   
4        每个面都是同样的正多边形  00:00:38.100  00:00:32.679   

                                           url  
0  https://www.youtube.com/watch?v=m9AE_G_9c7Y  
1  https://www.youtube.com/watch?v=m9AE_G_9c7Y  
2  https://www.youtube.com/watch?v=m9AE_G_9c7Y  
3  https://www.youtube.com/watch?v=m9AE_G_9c7Y  
4  https://www.youtube.com/watch?v=m9AE_G_9c7Y  
&lt;/pre&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="下载youtube片段"&gt;下载youtube片段&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/video_keynote/#%E4%B8%8B%E8%BD%BDyoutube%E7%89%87%E6%AE%B5"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;根据上面获得的起止时间, 去下载youtube视频中的片段. 很遗憾, youtube-dl虽然可以方便下载youtube视频, 但却无法只下载某个片段. 所以这里有两个事情要做:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;获得真实的youtube视频文件地址. 真正的视频文件并不是你看到的www.youtube.com/watch?v=m9AE_G_9c7Y 而是一个带有签名的超复杂地址, 我猜测可能还会在不同电脑或者不同时间段有变化. 但YouTube-dl是能够获得这个地址的, 方便起见, 我直接抓取的是视频+音频合并的格式. 此时也不必下载视频.&lt;/li&gt;
&lt;li&gt;通过ffmpeg下载视频片段, ffmpeg的&lt;code&gt;-ss -to&lt;/code&gt;可以设定起止时间, 但如果直接使用起止时间, 应当用&lt;code&gt;-copyts&lt;/code&gt;来强制使用原始视频的绝对时间. 而且&lt;code&gt;-ss&lt;/code&gt;放在&lt;code&gt;-i&lt;/code&gt;之前还是之后,也有不少学问. 具体请参考&lt;a href="https://trac.ffmpeg.org/wiki/Seeking"&gt;https://trac.ffmpeg.org/wiki/Seeking&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里使用了x264和mp3分别对视频和音频进行了重新编码, 导致速度较慢. 理论上可以使用“copy”, 但实测发现因为每个片段都很短, 高概率丢失关键帧, 所以不重新编码的话, 很有可能画面是静止的.&lt;/p&gt;
&lt;p&gt;虽然ffmpeg也有python的处理版本, 但是那个库也是生成了ffmpeg的命令行, 还要学一堆他自定的语法, 还不如我直接用subprocess.run呢&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [15]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;download_part_youtube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="n"&gt;youtube_dl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;YoutubeDL&lt;/span&gt;&lt;span class="p"&gt;({&lt;/span&gt;&lt;span class="s1"&gt;'format'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="s1"&gt;'22'&lt;/span&gt;&lt;span class="p"&gt;})&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;ydl&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;info_dict&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ydl&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;extract_info&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;video_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
        &lt;span class="n"&gt;real_video_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;info_dict&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;get&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"url"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="kc"&gt;None&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

    &lt;span class="n"&gt;ffmpeg_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'ffmpeg'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;'-ss'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;'-i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="n"&gt;real_video_url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;'-to'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
     &lt;span class="s1"&gt;'-c:v'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'libx264'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-c:a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'libmp3lame'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#视频重编码使用x264, 音频重编码使用mp3&lt;/span&gt;
     &lt;span class="s1"&gt;'-copyts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 强制使用原视频的绝对时间&lt;/span&gt;
     &lt;span class="s1"&gt;'-y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;# 强制覆盖&lt;/span&gt;
     &lt;span class="n"&gt;output_filename&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ffmpeg_command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;PIPE&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;stderr&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STDOUT&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;p&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;stdout&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;decode&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"utf-8"&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="根据文字截取视频片段并合并"&gt;根据文字截取视频片段并合并&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/video_keynote/#%E6%A0%B9%E6%8D%AE%E6%96%87%E5%AD%97%E6%88%AA%E5%8F%96%E8%A7%86%E9%A2%91%E7%89%87%E6%AE%B5%E5%B9%B6%E5%90%88%E5%B9%B6"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这就是把前面的准备工作合并到一起了, 根据摘取的数据库中的url、起止时间, 去到每个url中下载起止时间的视频片段. 这些视频片段都下载到了本地, 将文件名写入一个txt文件进行记录. 然后使用ffmpeg的concat功能将txt文件中的文件合并成一个视频文件. 最后再打扫一下临时文件, 就大功告成了.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [16]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;get_youtube_by_keynote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;final_output&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;#临时文件命名, 记录临时文件列表&lt;/span&gt;
    &lt;span class="n"&gt;temp_file_list&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"tmp_&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;.mp4"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;))]&lt;/span&gt;
    &lt;span class="n"&gt;temp_input&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'tmp_input_files.txt'&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'w'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="nb"&gt;range&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nb"&gt;len&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;)):&lt;/span&gt;
            &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;write&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"file '&lt;/span&gt;&lt;span class="si"&gt;{}&lt;/span&gt;&lt;span class="s2"&gt;'&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_file_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;]))&lt;/span&gt;    

    
    &lt;span class="c1"&gt;# 遍历数据库, 下载每个视频片段&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;iterrows&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
        &lt;span class="n"&gt;download_part_youtube&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;url&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;start&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;row&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;end&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;temp_file_list&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="n"&gt;index&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    
    &lt;span class="c1"&gt;# 将临时文件合并起来&lt;/span&gt;
    &lt;span class="n"&gt;ff_concat_command&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s2"&gt;"ffmpeg"&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; 
                   &lt;span class="s1"&gt;'-f'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'concat'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;'-safe'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="s1"&gt;'0'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;'-i'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;temp_input&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="s1"&gt;'-c:v'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'copy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-c:a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'copy'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;'-copyts'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="c1"&gt;#合并似乎不需要重新编码&lt;/span&gt;
                   &lt;span class="s1"&gt;'-y'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;
                   &lt;span class="n"&gt;final_output&lt;/span&gt;
                   &lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="n"&gt;subprocess&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ff_concat_command&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="kc"&gt;False&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="c1"&gt;# 打扫临时文件&lt;/span&gt;
    &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;temp_input&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;temp_file_list&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;os&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;remove&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;p&gt;合并到一起, 如果是在本地运行, 只需要找本地目录中的内容. 如果是放在colab上, 下载文件是要调用google.colab库中的file.download函数&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing code_cell rendered"&gt;
&lt;div class="input"&gt;
&lt;div class="prompt input_prompt"&gt;In [ ]:&lt;/div&gt;
&lt;div class="inner_cell"&gt;
    &lt;div class="input_area"&gt;
&lt;div class=" highlight hl-ipython3"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="o"&gt;==&lt;/span&gt;&lt;span class="s2"&gt;"__main__"&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;find_text_in_vtt&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;keynote&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;vtt&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="n"&gt;youtube_url&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="n"&gt;final_output&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s2"&gt;"final.mp4"&lt;/span&gt;
    &lt;span class="n"&gt;get_youtube_by_keynote&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;df&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;final_output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    
    &lt;span class="c1"&gt;# download from google colab&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;google.colab&lt;/span&gt; &lt;span class="k"&gt;import&lt;/span&gt; &lt;span class="n"&gt;files&lt;/span&gt;
        &lt;span class="n"&gt;files&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;download&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;final_output&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="nb"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s2"&gt;"not in google colab"&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;

&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="使用与进一步改进"&gt;使用与进一步改进&lt;a class="anchor-link" href="https://goldengrape.github.io/posts/python/video_keynote/#%E4%BD%BF%E7%94%A8%E4%B8%8E%E8%BF%9B%E4%B8%80%E6%AD%A5%E6%94%B9%E8%BF%9B"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;这个小工具可以用来制作公开课的快速复习视频. 比如OCW, deeplearning.ai中的课程, 都是放在youtube上的. 一些上过的课时间一久就该忘了, 太可惜了. 但完全重看一遍又没有必要, 如果用此方法可以制作出快速复习视频. 只需要很短的时间就可以唤起回忆.&lt;/p&gt;
&lt;p&gt;另一个可能的诡异应用是, 我也可以不视频字幕中的文字, 而是自己撰写一些常用的语句, 如果difflib.get_close_matches能够找到接近的语句, 就可以摘取下来. 那么给定一组视频, 比如某个总统的演讲视频. 也可以制作出一份“断章取义”的视频来. 当然每句话之间是断断续续, 背景也可能不断转换. 但可能很有趣吧. 这个功能需要对查找的部分进行一些修改, 以后有时间再进行了.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>python</category><guid>https://goldengrape.github.io/posts/python/video_keynote/</guid><pubDate>Mon, 25 Mar 2019 04:00:00 GMT</pubDate></item><item><title>如何查阅文献</title><link>https://goldengrape.github.io/posts/bulabula/how-to-use-pubmed-and-read-paper/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;更新配音幻灯视频:
&lt;iframe src="//player.bilibili.com/player.html?aid=45981183&amp;amp;cid=80563574&amp;amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt; &lt;/iframe&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;面向对象: 不满足于查百度的人. 医疗药品/ 器械相关企业从业者. &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;学习目的: 对一个自己不熟悉的领域, (此处为医学), 快速查阅文献, 了解基础知识.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;要求: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基础的英语水平: 现在青少年的初中二年级水平. 如果是成年人, 考虑到成人的能力通常会迅速下降, 大概大学4级水平吧.&lt;/li&gt;
&lt;li&gt;会使用Chrome浏览器或Firefox浏览器.&lt;/li&gt;
&lt;li&gt;会安装Chrome插件或Firefox插件.&lt;/li&gt;
&lt;li&gt;可能需要具备“正常访问国际互联网”的能力.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本教程以眼科“OK镜”为例. 场景是这样的, 你带着自己(或好友)的娃去看了看眼睛, 发现近视了. 医生推荐了OK镜, 但这东西好贵啊, 你想自己也多了解一些. 公司可能最近也有往这方面代理产品/研发产品的意图. 所以, 你打算自己再查查资料. &lt;/p&gt;
&lt;p&gt;图文教程, 图片比较多. (如果看不到图片, 可能是因为广告过滤器阻止了sm.ms的图床调用, 需要将i.loli.net许可)&lt;/p&gt;
&lt;!-- TEASER_END --&gt;

&lt;h2&gt;软件的准备&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Chrome浏览器: 
本教程按照Chrome浏览器来讲解. 下载Chrome离线版的方法不在此赘述, 可以参考&lt;a href="https://www.zhihu.com/question/19981495"&gt;知乎上的教程&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;ScholarScope插件: 
用来显示文献的影响因子, 可以视为一个文献质量的评分吧. ScholarScope插件的下载和使用在其&lt;a href="https://www.scholarscope.cn/"&gt;官方网站上有详细的解说&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;彩云小译网页翻译插件: 
非必须, 但我真的喜欢看中英文对照的翻译, 所以用上&lt;a href="https://chrome.google.com/webstore/detail/lingocloud-interpreter/jmpepeebcbihafjjadogphmbgiffiajh?hl=zh-CN"&gt;这个插件&lt;/a&gt;, 类似网页翻译工具应该还有很多. 国内大概有道, 腾讯, 搜狗之类的都多多少少有类似的东西.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2&gt;合适的关键词&lt;/h2&gt;
&lt;p&gt;听到的只有“OK镜”这个词. 似乎是个缩略语, 那么应当选择什么关键词去寻找呢?&lt;/p&gt;
&lt;p&gt;专业词汇的中英文互相翻译, 从CNKI的翻译助手开始, 网址是&lt;a href="http://dict.cnki.net/"&gt;http://dict.cnki.net/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;打开CNKI翻译助手, 输入“OK镜”
&lt;img alt="屏幕快照 2019-01-28 14.05.47" src="https://i.loli.net/2019/01/28/5c4e9bd98c547.png"&gt;&lt;/p&gt;
&lt;p&gt;有两个候选词汇“OK lens”和“orthokeratology lenses”, 前者似乎是后者的缩写, 本着选择题选答案最长的原则, 我们将使用“orthokeratology lenses”&lt;/p&gt;
&lt;h2&gt;在Pubmed上查文献&lt;/h2&gt;
&lt;p&gt;PubMed, 是美国国家医学图书馆提供的一个医学搜索引擎. 某种程度上, 你就当这是医学文献唯一的搜索引擎好了. 除非是为了某些“医学考古”的研究目的, 否则PubMed上搜不到就意味着不重要或者不存在. &lt;/p&gt;
&lt;p&gt;PubMed的网址很长, 是啰哩啰嗦的https://www.ncbi.nlm.nih.gov/pubmed/ 但通常使用pubmed.gov或者pubmed.org甚至pubmed.com都可以访问到.&lt;/p&gt;
&lt;p&gt;在搜索框里填入orthokeratology lenses, 然后按Search, 出现如下结果: 
&lt;img alt="屏幕快照 2019-01-28 14.13.59" src="https://i.loli.net/2019/01/28/5c4e9dc187f96.png"&gt;&lt;/p&gt;
&lt;h2&gt;从哪里开始看?&lt;/h2&gt;
&lt;h3&gt;文献的重要性&lt;/h3&gt;
&lt;p&gt;搜索orthokeratology lenses有450篇文献, 如果不是这个专业的人, 没必要也没时间都看过一遍. 而且要看, 也要有个先后顺序. 我们刚才装好的ScholarScope插件, 就是为了如此. &lt;/p&gt;
&lt;p&gt;如果之前装好了ScholarScope插件, 那么会在每篇文献的下面有一个数字和一个Q数字, 例如这篇文献的2.12和Q2, 前面的数字越大越重要, 后面的Qx, 数字越小越重要. &lt;/p&gt;
&lt;p&gt;&lt;img alt="屏幕快照 2019-01-28 14.15.49" src="https://i.loli.net/2019/01/28/5c4e9e2355a1a.png"&gt;&lt;/p&gt;
&lt;h3&gt;文献的类型&lt;/h3&gt;
&lt;p&gt;在左上角, 还有一组限制条件
&lt;img alt="屏幕快照 2019-01-28 14.21.21" src="https://i.loli.net/2019/01/28/5c4e9f7e35ce7.png"&gt;&lt;/p&gt;
&lt;p&gt;如果只是想快速了解一个领域, 当然应该先看看别人写好的综述, 也就是Review. 如果想知道疗效如何, 则可能应该要再看看临床实验Clinical Trials. &lt;/p&gt;
&lt;p&gt;对于某些历史悠久的领域, 还可以限定只看5年以内的文献, 在Publication dates里选上5years.&lt;/p&gt;
&lt;p&gt;对于OK镜, 还算是一个相对较新的领域, 从右边文献与年份的关系可以看出大约是在2000年以后热起来的. 
&lt;img alt="屏幕快照 2019-01-28 14.24.12" src="https://i.loli.net/2019/01/28/5c4ea0273242f.png"&gt;&lt;/p&gt;
&lt;p&gt;我们先暂时不限定文献的类型, 而是快速浏览一下文献的题目和评分, 看看有没有感兴趣的. &lt;/p&gt;
&lt;h3&gt;快速浏览&lt;/h3&gt;
&lt;p&gt;说实话, 我只想读一篇, 满篇英文也挺烦的. 翻译一下吧:&lt;/p&gt;
&lt;p&gt;点一下彩云小译的插件, 可以快速翻译页面中的文字, 如果觉得语句不太通顺, 影响理解, 就再看看英文原文是怎么写的. 
&lt;img alt="屏幕快照 2019-01-28 14.36.13" src="https://i.loli.net/2019/01/28/5c4ea2f8e2c81.png"&gt;&lt;/p&gt;
&lt;p&gt;大致看一下评分, 说实话分数都不高啊, 多数是在1-2分左右, 不过下面有一篇7分多的文章, 显得鹤立鸡群. 还是美国眼科学会报告. 看题目也是大而全, 貌似是不错的入门文章, 就从这里开始好了.
&lt;img alt="屏幕快照 2019-01-28 14.38.31" src="https://i.loli.net/2019/01/28/5c4ea3afedd46.png"&gt;&lt;/p&gt;
&lt;h2&gt;阅读摘要&lt;/h2&gt;
&lt;p&gt;点开这篇&lt;a href="https://www.ncbi.nlm.nih.gov/pubmed/30476518"&gt;“Use of Orthokeratology for the Prevention of Myopic Progression in Children: A Report by the American Academy of Ophthalmology.”&lt;/a&gt; , &lt;/p&gt;
&lt;p&gt;你会看到一段摘要Abstract, 讲述了该文献的大致内容, 如果是临床试验研究, 往往读一下摘要就可以知道其研究结果, 如果嫌弃读英文烦, 也可以用上彩云小译的插件, 此处不再赘述. &lt;/p&gt;
&lt;p&gt;但对于大而全的综述, 最好深入到原文中去读读详细. 
&lt;img alt="屏幕快照 2019-01-28 14.42.50" src="https://i.loli.net/2019/01/28/5c4ea4b13f74d.png"&gt;&lt;/p&gt;
&lt;h2&gt;找到全文&lt;/h2&gt;
&lt;p&gt;理论上, 文章的全文链接出现在右侧的“Full text links”, 但实际上往往点进去是要求付费的. 这是科学界自己也非常不爽的事情, 明明是拿着纳税人的钱做出的研究成果, 却无法分享给全社会, 而被科学杂志收取了费用, 甚至科学家自己不但没有稿费还经常要掏版面费. &lt;/p&gt;
&lt;p&gt;于是此处应有侠盗出场, 
&lt;img alt="Scihub_raven" src="https://i.loli.net/2019/01/28/5c4ea6d76d2db.png"&gt;&lt;/p&gt;
&lt;p&gt;Sci-Hub, 由哈萨克斯坦软件开发暨神经技术研究生亚历珊卓·艾尔巴金（Alexandra Elbakyan）建立, 一个非常非常强大的全文数据库. &lt;/p&gt;
&lt;p&gt;如果已经安装了ScholarScope插件, 去点击doi后面那一串数字, 就可以自动跳转到sci-hub的链接上. 
&lt;img alt="屏幕快照 2019-01-28 14.55.41" src="https://i.loli.net/2019/01/28/5c4ea77a189c9.png"&gt;&lt;/p&gt;
&lt;p&gt;或者, &lt;/p&gt;
&lt;p&gt;这篇文献的网址是: https://www.ncbi.nlm.nih.gov/pubmed/30476518&lt;/p&gt;
&lt;p&gt;那么把 sci-hub.tw/ 加在文献网址的前面, 变成sci-hub.tw/https://www.ncbi.nlm.nih.gov/pubmed/30476518  就可以找到全文了. &lt;/p&gt;
&lt;p&gt;点击save, 就可以下载保存PDF全文了.&lt;img alt="屏幕快照 2019-01-28 15.00.27" src="https://i.loli.net/2019/01/28/5c4ea8b212c28.png"&gt;&lt;/p&gt;
&lt;h2&gt;阅读全文&lt;/h2&gt;
&lt;p&gt;显然还是阅读中文的速度快, 尤其是你可能对这个领域并不熟悉. 对于医学文献, 此处使用&lt;a href="https://fanyi.transgod.cn/"&gt;TransGod的PDF翻译&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;打开https://fanyi.transgod.cn/ 勾选上“上传完成后自动翻译”再点击“上传文件”&lt;/p&gt;
&lt;p&gt;&lt;img alt="屏幕快照 2019-01-28 15.06.12" src="https://i.loli.net/2019/01/28/5c4eaa0444296.png"&gt;&lt;/p&gt;
&lt;p&gt;把刚才下载的PDF全文上传上去, 1分钟左右就能够翻译完成, 然后下载译文即可&lt;/p&gt;
&lt;p&gt;&lt;img alt="屏幕快照 2019-01-28 15.09.27" src="https://i.loli.net/2019/01/28/5c4eaaca2d7a6.png"&gt;&lt;/p&gt;
&lt;p&gt;得到一篇Word文档. 我对他们能够把PDF这种丧心病狂的格式处理得如此服帖非常佩服. (为什么说PDF是丧心病狂的格式, 请参考&lt;a href="https://sspai.com/post/47092"&gt;理解数字世界中的纸张：PDF | 科普&lt;/a&gt;)
&lt;img alt="屏幕快照 2019-01-28 15.11.44" src="https://i.loli.net/2019/01/28/5c4eab4a5b89f.png"&gt;&lt;/p&gt;
&lt;p&gt;这篇文章居然是篇Meta分析, 简单的说就是汇总以前做过的正规临床实验的结果, 按照&lt;a href="https://goldengrape.github.io/posts/bulabula/what-is-ebm/"&gt;证据的强度&lt;/a&gt;汇总出来的一份报告. &lt;/p&gt;
&lt;p&gt;个人建议用&lt;a href="https://goldengrape.github.io/posts/bulabula/gollum-wiki"&gt;wiki&lt;/a&gt;或者其他的笔记软件, 记录一下文献阅读中获得的新识和心得. &lt;/p&gt;
&lt;p&gt;注意, 虽然现在机器学习机器翻译的进步飞快, 但仍然不能代替阅读原文, 机器翻译的译文只是作为辅助, 用来快速浏览, 在涉及到细节的地方, 还是要仔细阅读原文的. &lt;/p&gt;
&lt;h2&gt;作业&lt;/h2&gt;
&lt;p&gt;你在微信里被问到这篇文章&lt;a href="http://www.360doc7.net/wxarticlenew/710434757.html"&gt;《帕金森终于有了特效药！》&lt;/a&gt; 中提到“CBD（大麻二酚）对于改善帕金森病患者病情效果非常显著。”. 本能的, 你觉得这很不靠谱, 请找出你的证据.&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/how-to-use-pubmed-and-read-paper/</guid><pubDate>Fri, 15 Mar 2019 04:00:00 GMT</pubDate></item><item><title>人工晶体轶事(1)</title><link>https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;更新了自动配音幻灯视频: &lt;/p&gt;
&lt;iframe src="//player.bilibili.com/player.html?aid=46123306&amp;amp;page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true"&gt; &lt;/iframe&gt;

&lt;p&gt;最近查看了一些关于人工晶体历史的资料, 其实也不是什么考据研究, 只是在wiki上乱转. 有些故事看起来很有意思.&lt;/p&gt;
&lt;p&gt;人工晶体, 或者人工晶状体, Intraocular lens, 缩写是IOL, 是用来替换天然晶状体的一片微型的透镜, 通常用在白内障手术中.
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;h2&gt;人工晶体轶事之一, 人工晶体发明的故事&lt;/h2&gt;
&lt;h3&gt;Gordon Cleaver&lt;sup id="fnref-1"&gt;&lt;a class="footnote-ref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fn-1"&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;1940年8月15日, 伦敦西南的温切斯特, 空袭警报响起.&lt;/p&gt;
&lt;p&gt;德军的轰炸机来得太快了, 直扑机场而来, 想在遇到拦截之前直接摧毁整个空军基地. 皇家空军601中队空军上尉(Flying Officer) Gordon Cleaver冒着硝烟, 奔向跑道上自己的飓风歼击机, 匆忙中他没有戴上护目镜, 就在敌机的轰炸中紧急起飞.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="http://d.ibtimes.co.uk/en/full/313242/hurricane.jpg"&gt;
(https://www.ibtimes.co.uk)&lt;/p&gt;
&lt;p&gt;Cleaver上尉参加过敦克尔克的战役, 他操纵飓风歼击机无比灵巧, 因此获得了"老鼠"的绰号, 在一年多的战斗飞行中击落了7-9架敌机. 升空后他很快抓到机会击落了一家德军飞机. 突然, Cleaver双眼一黑知道自己被击中了, 他已经无法控制飞机, 只好弃机跳伞, 降落在南安普敦.&lt;/p&gt;
&lt;p&gt;在医院, Cleaver得知当时子弹击中了座舱盖, 将座舱盖打得粉碎, 碎片打中了自己的脸. 右眼已经完全看不见光感, 眼科医生Harold Ridley说对右眼已经无能为力了, 左眼也被弹片击中, 虽然角膜被打穿, 但弹片并没有打碎晶状体, 而是停留在了眼睛里, 而且座舱盖弹片是透明的, 视力虽然下降, 但多少还是能看清些东西. Ridley医生人很好, 经常过来看这只受伤的左眼, 他说只要不感染, 还是有希望恢复一些视力的.&lt;/p&gt;
&lt;p&gt;也许当时戴上护目镜, 世界就会不一样吧.&lt;/p&gt;
&lt;h3&gt;Harold Ridley&lt;sup id="fnref-2"&gt;&lt;a class="footnote-ref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fn-2"&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;Gordon Cleaver上尉是个坚强的军人, 头面部的创伤经过了18次的手术才算治疗完成. 他也是个有趣的病例, 飓风战斗机的座舱盖弹片居然安静地留在他的左眼里, 没有引起感染和排异反应. 最让人担心的眼内炎并没有发生.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Harold Ridley" src="https://i.loli.net/2018/06/01/5b103665eb0aa.png"&gt;
(https://www.rayner.com/media/pdf/Invention_of_the_IOL.pdf)&lt;/p&gt;
&lt;p&gt;Ridley医生很想知道座舱盖的材料, 战时打听战斗机的材料多多少少有些麻烦, 但后来总算查到了, 是帝国化工(ICI)生产的Perspex. 这种材料在1928年已经被制造出来, 叫做聚甲基丙烯酸甲酯, 缩写是PMMA, 也被称为有机玻璃. 1930年ICI注册了Perspex的商标. 这种材料透光性很好, 比玻璃轻很多, 有一点点弹性, 不像玻璃那么容易破碎, 即使破碎了, 碎片也一般不会那么锋利. 但显然Perspex还是无法抵抗机枪子弹的威力.&lt;/p&gt;
&lt;p&gt;通常情况下弹片打进身体会引起严重的免疫排异反应, 毕竟这是一种异物. 但Cleaver上尉眼睛里的PMMA弹片却是个例外, 原因可能有两个, 一是PMMA是一种聚合物, 不容易释放出什么离子或者小分子, 甚至可以用来制成培养皿来饲养细胞, 后世的生物医学工程师称之为生物相容性很好; 二是眼球内血液和其他液体比如房水和玻璃体是分隔开的, 有血房水屏障, 这种屏障阻挡了免疫反应, 所以眼内也是一个免疫豁免的区域. 这两个因素在Cleaver上尉眼睛遇到了一起, 于是PMMA弹片没有产生排异反应. 他的左眼总算是保住了.&lt;/p&gt;
&lt;p&gt;战时的临床工作忙得不可开交, Ridley医生弹片留在眼睛里的原委以后, 就记录在笔记本上, 又去忙其他病人了.&lt;/p&gt;
&lt;h3&gt;John Pike&lt;sup id="fnref-3"&gt;&lt;a class="footnote-ref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fn-3"&gt;3&lt;/a&gt;&lt;/sup&gt;&lt;/h3&gt;
&lt;p&gt;二战已经结束3年多了, John Pike现在是伦敦Rayner公司的光学专家. 最近他正在和Ridley医生合作研发电子眼底镜. 研发工作进展很顺利, 他也和Ridley医生成为好朋友.&lt;/p&gt;
&lt;p&gt;一天傍晚Ridley医生打来电话, 很兴奋地说要讨论一个新项目, 还挺急, 说查房完了就过来. 在卡文迪许广场上, John Pike坐在Ridley医生的车里, 听完了8年前病例报告. Ridley医生说他打算用Perspex做一枚透镜植入到病人眼睛里, 替代天然的晶状体. John Pike觉得这事在医学上有点异想天开, 但在光学上并不困难, 不过是制造一个小一点的透镜而已. 在车里, 两个人就已经完成了大部分的设计. 这个就叫做人工晶体Intraocular lens吧.&lt;/p&gt;
&lt;p&gt;回去以后John Pike很快就按照设计制造出了样品.&lt;/p&gt;
&lt;p&gt;&lt;img alt="https://www.rayner.com/en/history" src="https://www.rayner.com/skin/frontend/mtcolias/default/images/iol_box.jpg"&gt;
https://www.rayner.com/en/history&lt;/p&gt;
&lt;h3&gt;Harold Ridley&lt;/h3&gt;
&lt;p&gt;1949年11月29日, 第一例人工晶体植入手术终于完成了. Ridley医生从圣托马斯医院办公室的窗户看着泰晤士河上往来的船只, 心中有些激动.&lt;/p&gt;
&lt;p&gt;这是一个49岁&lt;sup id="fnref-4"&gt;&lt;a class="footnote-ref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fn-4"&gt;4&lt;/a&gt;&lt;/sup&gt;的女病人名叫伊丽莎白, 她的左眼晶状体已经完全浑浊, Pike或者说Rayner公司生产的人工晶体被植入到了患者眼内. 巡台护士Doreen Clarke小姐配合得不错, 手术视野照明很清楚. 当时并没有手术显微镜, Clarke小姐用的是一把手电. 术后, Clarke小姐在记录本上记下了"Extra-capsular ext"--白内障囊外摘除术.&lt;/p&gt;
&lt;p&gt;但其实第一例手术并不算顺利, 而且这也是第一例人工晶体手术并发症----度数算错了, 术后病人验光有高度近视, 但视力仍然提高到20/60.&lt;/p&gt;
&lt;p&gt;&lt;img alt="Ridley's eighth IOL implantation, performed at St. Thomas' Hospital, May 8, 1951" src="https://i.loli.net/2018/06/01/5b1036f8abdf1.png"&gt;
(https://www.rayner.com/media/pdf/Invention_of_the_IOL.pdf)&lt;/p&gt;
&lt;p&gt;之后, Ridley医生又做了很多人工晶体植入手术, 早期的手术大约有70%的成功率. 虽然白内障病人多数是老年人, 但也有一些年轻的病人因为外伤植入人工晶体, 这些病人经过了40多年后, 仍然保持着可用的视力. &lt;sup id="fnref-5"&gt;&lt;a class="footnote-ref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fn-5"&gt;5&lt;/a&gt;&lt;/sup&gt;.&lt;/p&gt;
&lt;h3&gt;Gordon Cleaver&lt;/h3&gt;
&lt;p&gt;Cleaver上尉因为在温切斯特保卫战中的英勇表现被授予空军功勋十字勋章, 当时他年仅30岁, 但右眼失明, 左眼破裂伤使得他无法再驾驶战斗机重回蓝天.&lt;/p&gt;
&lt;p&gt;在他70多岁的时候, 他的左眼晶状体也终于出现了白内障, 他也接受了白内障摘除手术, 并植入了一枚人工晶体. &lt;/p&gt;
&lt;h3&gt;Harold Ridley&lt;/h3&gt;
&lt;p&gt;2000年2月, Ridley医生被英女王授予爵士勋衔(Knight Bachelor), 以表彰他在白内障手术中的开创性工作.&lt;/p&gt;
&lt;p&gt;Harold Ridley爵士逝世于2001年5月25日, 享年94岁.&lt;/p&gt;
&lt;p&gt;&lt;img alt="" src="https://images-na.ssl-images-amazon.com/images/I/51udsOifu8L._SX398_BO1,204,203,200_.jpg"&gt;&lt;/p&gt;
&lt;!-- EOF --&gt;

&lt;div class="footnote"&gt;
&lt;hr&gt;
&lt;ol&gt;
&lt;li id="fn-1"&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Gordon_Cleaver &lt;a class="footnote-backref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fnref-1" title="Jump back to footnote 1 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-2"&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Harold_Ridley_(ophthalmologist) &lt;a class="footnote-backref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fnref-2" title="Jump back to footnote 2 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-3"&gt;
&lt;p&gt;https://en.wikipedia.org/wiki/Rayner_(company) &lt;a class="footnote-backref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fnref-3" title="Jump back to footnote 3 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-4"&gt;
&lt;p&gt;维基百科上说年龄是45岁, 但按照"Sir Harold Ridley and His Fight for Sight"中的记录, 还是应当为49岁. &lt;a class="footnote-backref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fnref-4" title="Jump back to footnote 4 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li id="fn-5"&gt;
&lt;p&gt;&lt;a href="https://www.sciencedirect.com/science/article/pii/S0886335099800613"&gt;Letocha, C. E.; Pavlin, C. J. (1999). "Follow-up of 3 patients with Ridley intraocular lens implantation". Journal of cataract and refractive surgery. 25 (4): 587–591.&lt;/a&gt; &lt;a class="footnote-backref" href="https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/#fnref-5" title="Jump back to footnote 5 in the text"&gt;↩&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;&lt;/div&gt;</description><category>IOL</category><category>ophthalmology</category><guid>https://goldengrape.github.io/posts/bulabula/stories_of_IOL_1/</guid><pubDate>Tue, 12 Mar 2019 17:00:00 GMT</pubDate></item><item><title>全自动录制幻灯片配音</title><link>https://goldengrape.github.io/posts/bulabula/fullautomatic_dubbing_slide/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;OK, 完成了自动为PowerPoint幻灯片配音的python3程序. &lt;/p&gt;
&lt;p&gt;提取每一页幻灯片中的备注, 使用语音合成(Text-To-Speech, TTS)产生配音, 并将配音音频插入到幻灯片中. 如果在PowerPoint/ Keyote中导出成视频, 可以产生自动配演讲解的视频.&lt;/p&gt;
&lt;p&gt;当前仅仅支持mac OS.&lt;/p&gt;
&lt;p&gt;项目页面在&lt;a href="https://github.com/goldengrape/dubbing-pptx"&gt;https://github.com/goldengrape/dubbing-pptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;需要先安装&lt;a href="https://github.com/scanny/python-pptx"&gt;python-pptx&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;使用方法:
&lt;code&gt;python dubbing.py inputfile.pptx outputfile.pptx&lt;/code&gt;&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/fullautomatic_dubbing_slide/</guid><pubDate>Sat, 09 Mar 2019 16:00:00 GMT</pubDate></item><item><title>半自动录制幻灯片配音</title><link>https://goldengrape.github.io/posts/bulabula/semiautomatic_dubbing_slide/</link><dc:creator>Golden Grape</dc:creator><description>&lt;div&gt;&lt;p&gt;最近要做一批幻灯片的配音演讲. 之前用的&lt;a href="https://goldengrape.github.io/posts/bulabula/auto_keynote_presentation"&gt;自动生成keynote演讲&lt;/a&gt;方法突然不好用了, 因为似乎苹果偷偷更新了apple script的函数定义, 一大堆命令都无法识别了. &lt;/p&gt;
&lt;p&gt;但是自动生成配音演讲真的是很方便, 做网络课程的时候, 有什么地方需要更新改正时, 修改文字就好了. 即使是准备现场演讲, 提前生成配音听一遍, 也能够提前对演讲有一个预演, 知道哪些地方需要改进. &lt;/p&gt;
&lt;p&gt;虽然应该自己重新用python写一个, 但本着能拖一天是一天的拖延症思想, 先用现成的东西拼凑连接起来好了. &lt;/p&gt;
&lt;p&gt;于是有如下步骤:
&lt;!-- TEASER_END --&gt;&lt;/p&gt;
&lt;h2&gt;材料:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;iPhone/ iPad&lt;/li&gt;
&lt;li&gt;mac&lt;/li&gt;
&lt;li&gt;数据线&lt;/li&gt;
&lt;li&gt;MTCoreAudio的AudioMonitor, &lt;a href="http://mac.softpedia.com/get/Developer-Tools/MTCoreAudio.shtml"&gt;softpedia中下载&lt;/a&gt; 或mac自家的GarageBand &lt;/li&gt;
&lt;li&gt;讯飞阅读 app&lt;/li&gt;
&lt;li&gt;耳机&lt;/li&gt;
&lt;li&gt;作者本人&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;软硬件连接方法:&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;用数据线连接iPhone和mac, 解锁iPhone&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;到mac上, 应用程序-&amp;gt;实用工具-&amp;gt;“音频MIDI设置”, 打开“音频MIDI设置”, 找到自己的iPhone, 点击“启用”
&lt;img alt="屏幕快照 2019-03-08 12.07.51" src="https://i.loli.net/2019/03/08/5c81eb5a0582d.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;把下载下来的MTCoreAudio打开, 找到里面的AudioMonitor, 复制到应用程序中, 
&lt;img alt="" src="https://cdn.guidingtech.com/media/assets/WordPress-Import/2016/01/Screen_Shot_2016-01-25_at_8_00_20_PM.png"&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;(图片应用自guidingtech.com)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;插上耳机, 然后运行 Audio Monitor, 将input改成iPhone, 点击Play Through&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="屏幕快照 2019-03-08 12.16.18" src="https://i.loli.net/2019/03/08/5c81eca50fd3f.png"&gt;&lt;/p&gt;
&lt;p&gt;以上步骤就可以将iPhone里发出的声音作为mac上的音频输入, 并且同时接通音频输入和音响输出, 使自己可以监听到音频过程. &lt;/p&gt;
&lt;p&gt;注意如果不是使用的iphone作为输入和耳机作为输出, 而是用了内建话筒和音箱, 那么可能会引起尖锐的哮鸣.&lt;/p&gt;
&lt;h3&gt;操作流程&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;撰写演讲脚本, 保存为txt文件.&lt;/li&gt;
&lt;li&gt;发送到iPhone上, 用讯飞阅读打开.&lt;/li&gt;
&lt;li&gt;打开做好的keynote, “录制幻灯片放映”&lt;/li&gt;
&lt;li&gt;点击红色的录音按钮, 倒数3秒后, 在讯飞阅读中播放朗读演讲脚本.&lt;/li&gt;
&lt;li&gt;自己听着朗读, 到该翻页的时候翻页. 是的, 这个过程是有人参与的, 所以说是半自动.&lt;/li&gt;
&lt;li&gt;播放完成后, 保存, keynote中文件-&amp;gt;导出到-&amp;gt;视频&lt;/li&gt;
&lt;/ol&gt;
&lt;h2&gt;结果与讨论&lt;/h2&gt;
&lt;p&gt;效果很好, 而且所有的动画也都可以流畅播放和录制, 如果再DJ一点, 还可以手动暂停语音朗读, 等着动画播放完成. &lt;/p&gt;
&lt;p&gt;建议先高速听一遍, 一边听一边把一些表达稍微修改, 比如数学公式的朗读可能有问题, 有些分词断句可能听起来很怪异, 必要时加个逗号或者空格. &lt;/p&gt;
&lt;p&gt;注意导出的视频文件是m4v后缀, 有些教学网站傻傻的只认mp4文件, 直接改后缀成mp4就行了. 不用再转码.&lt;/p&gt;
&lt;p&gt;没找到讯飞朗读里如何人为做一些停顿. 逗号, 句号之类都只是寻常间断, 多个标点也不能把停顿延长.&lt;/p&gt;
&lt;p&gt;把iphone作为mac的音频输入, 再同时监听真的很有趣. 好像可以玩很多东西&lt;/p&gt;&lt;/div&gt;</description><guid>https://goldengrape.github.io/posts/bulabula/semiautomatic_dubbing_slide/</guid><pubDate>Fri, 08 Mar 2019 04:00:00 GMT</pubDate></item></channel></rss>